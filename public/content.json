{"meta":{"title":"٩◔̯◔۶|MYONE","subtitle":"吃素菜，彼此相爱","description":"TestTestTestTestTestTestTest","author":"MYONERAY","url":"http://litten.github.io"},"pages":[{"title":"","date":"2016-12-07T06:19:31.200Z","updated":"2016-12-07T06:19:31.200Z","comments":true,"path":"404.html","permalink":"http://litten.github.io/404.html","excerpt":"","text":"无标题文档 body { padding:0; margin:0; overflow:hidden; height: 600px; } canvas { padding:0; margin:0; } div.btnbg { position:fixed; left:0; top:0; } uniform mat4 uProjection; uniform mat4 uModelview; uniform vec3 uResolution; uniform vec3 uOffset; uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start attribute vec3 aPosition; attribute vec3 aEuler; attribute vec2 aMisc; //x:size, y:fade varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; void main(void) { // Projection is based on vertical angle vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0); gl_Position = uProjection * pos; gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5; pposition = pos.xyz; psize = aMisc.x; pdist = length(pos.xyz); palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z); vec3 elrsn = sin(aEuler); vec3 elrcs = cos(aEuler); mat3 rotx = mat3( 1.0, 0.0, 0.0, 0.0, elrcs.x, elrsn.x, 0.0, -elrsn.x, elrcs.x ); mat3 roty = mat3( elrcs.y, 0.0, -elrsn.y, 0.0, 1.0, 0.0, elrsn.y, 0.0, elrcs.y ); mat3 rotz = mat3( elrcs.z, elrsn.z, 0.0, -elrsn.z, elrcs.z, 0.0, 0.0, 0.0, 1.0 ); mat3 rotmat = rotx * roty * rotz; normal = rotmat[2]; mat3 trrotm = mat3( rotmat[0][0], rotmat[1][0], rotmat[2][0], rotmat[0][1], rotmat[1][1], rotmat[2][1], rotmat[0][2], rotmat[1][2], rotmat[2][2] ); normX = trrotm[0]; normY = trrotm[1]; normZ = trrotm[2]; const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237); float tmpdfs = dot(lit, normal); if(tmpdfs < 0.0) { normal = -normal; tmpdfs = dot(lit, normal); } diffuse = 0.4 + tmpdfs; vec3 eyev = normalize(-pos.xyz); if(dot(eyev, normal) > 0.0) { vec3 hv = normalize(eyev + lit); specular = pow(max(dot(hv, normal), 0.0), 20.0); } else { specular = 0.0; } rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0); rstop = pow(rstop, 0.5); //-0.69315 = ln(0.5) distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y)); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start const vec3 fadeCol = vec3(0.08, 0.03, 0.06); varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; float ellipse(vec2 p, vec2 o, vec2 r) { vec2 lp = (p - o) / r; return length(lp) - 1.0; } void main(void) { vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0; vec3 d = vec3(0.0, 0.0, -1.0); float nd = normZ.z; //dot(-normZ, d); if(abs(nd) < 0.0001) discard; float np = dot(normZ, p); vec3 tp = p + d * np / nd; vec2 coord = vec2(dot(normX, tp), dot(normY, tp)); //angle = 15 degree const float flwrsn = 0.258819045102521; const float flwrcs = 0.965925826289068; mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs); vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm; float r; if(flwrp.x < 0.0) { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5); } else { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5); } if(r > rstop) discard; vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r); float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35)); col *= vec3(1.0, grady, grady); col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3)); col = col * diffuse + specular; col = mix(fadeCol, col, distancefade); float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0; alpha = smoothstep(0.0, 1.0, alpha) * palpha; gl_FragColor = vec4(col * 0.5, alpha); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec2 uTimes; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec3 col; float c; vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0); c = exp(-pow(length(tmpv) * 1.8, 2.0)); col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c); gl_FragColor = vec4(col * 0.5, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; uniform vec4 uBlurDir; //dir(x, y), stride(z, w) varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta); col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta); gl_FragColor = col / 5.0; } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_FragColor = texture2D(uSrc, texCoord); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform sampler2D uBloom; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 srccol = texture2D(uSrc, texCoord) * 2.0; vec4 bloomcol = texture2D(uBloom, texCoord); vec4 col; col = srccol + bloomcol * (vec4(1.0) + srccol); col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5); col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2) gl_FragColor = vec4(col.rgb, 1.0); gl_FragColor.a = 1.0; } // Utilities var Vector3 = {}; var Matrix44 = {}; Vector3.create = function(x, y, z) { return {'x':x, 'y':y, 'z':z}; }; Vector3.dot = function (v0, v1) { return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z; }; Vector3.cross = function (v, v0, v1) { v.x = v0.y * v1.z - v0.z * v1.y; v.y = v0.z * v1.x - v0.x * v1.z; v.z = v0.x * v1.y - v0.y * v1.x; }; Vector3.normalize = function (v) { var l = v.x * v.x + v.y * v.y + v.z * v.z; if(l > 0.00001) { l = 1.0 / Math.sqrt(l); v.x *= l; v.y *= l; v.z *= l; } }; Vector3.arrayForm = function(v) { if(v.array) { v.array[0] = v.x; v.array[1] = v.y; v.array[2] = v.z; } else { v.array = new Float32Array([v.x, v.y, v.z]); } return v.array; }; Matrix44.createIdentity = function () { return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]); }; Matrix44.loadProjection = function (m, aspect, vdeg, near, far) { var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0; var w = h * aspect; m[0] = 2.0 * near / w; m[1] = 0.0; m[2] = 0.0; m[3] = 0.0; m[4] = 0.0; m[5] = 2.0 * near / h; m[6] = 0.0; m[7] = 0.0; m[8] = 0.0; m[9] = 0.0; m[10] = -(far + near) / (far - near); m[11] = -1.0; m[12] = 0.0; m[13] = 0.0; m[14] = -2.0 * far * near / (far - near); m[15] = 0.0; }; Matrix44.loadLookAt = function (m, vpos, vlook, vup) { var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z); Vector3.normalize(frontv); var sidev = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(sidev, vup, frontv); Vector3.normalize(sidev); var topv = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(topv, frontv, sidev); Vector3.normalize(topv); m[0] = sidev.x; m[1] = topv.x; m[2] = frontv.x; m[3] = 0.0; m[4] = sidev.y; m[5] = topv.y; m[6] = frontv.y; m[7] = 0.0; m[8] = sidev.z; m[9] = topv.z; m[10] = frontv.z; m[11] = 0.0; m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]); m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]); m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]); m[15] = 1.0; }; // var timeInfo = { 'start':0, 'prev':0, // Date 'delta':0, 'elapsed':0 // Number(sec) }; // var gl; var renderSpec = { 'width':0, 'height':0, 'aspect':1, 'array':new Float32Array(3), 'halfWidth':0, 'halfHeight':0, 'halfArray':new Float32Array(3) // and some render targets. see setViewport() }; renderSpec.setSize = function(w, h) { renderSpec.width = w; renderSpec.height = h; renderSpec.aspect = renderSpec.width / renderSpec.height; renderSpec.array[0] = renderSpec.width; renderSpec.array[1] = renderSpec.height; renderSpec.array[2] = renderSpec.aspect; renderSpec.halfWidth = Math.floor(w / 2); renderSpec.halfHeight = Math.floor(h / 2); renderSpec.halfArray[0] = renderSpec.halfWidth; renderSpec.halfArray[1] = renderSpec.halfHeight; renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight; }; function deleteRenderTarget(rt) { gl.deleteFramebuffer(rt.frameBuffer); gl.deleteRenderbuffer(rt.renderBuffer); gl.deleteTexture(rt.texture); } function createRenderTarget(w, h) { var ret = { 'width':w, 'height':h, 'sizeArray':new Float32Array([w, h, w / h]), 'dtxArray':new Float32Array([1.0 / w, 1.0 / h]) }; ret.frameBuffer = gl.createFramebuffer(); ret.renderBuffer = gl.createRenderbuffer(); ret.texture = gl.createTexture(); gl.bindTexture(gl.TEXTURE_2D, ret.texture); gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer); gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0); gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer); gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h); gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer); gl.bindTexture(gl.TEXTURE_2D, null); gl.bindRenderbuffer(gl.RENDERBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, null); return ret; } function compileShader(shtype, shsrc) { var retsh = gl.createShader(shtype); gl.shaderSource(retsh, shsrc); gl.compileShader(retsh); if(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) { var errlog = gl.getShaderInfoLog(retsh); gl.deleteShader(retsh); console.error(errlog); return null; } return retsh; } function createShader(vtxsrc, frgsrc, uniformlist, attrlist) { var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc); var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc); if(vsh == null || fsh == null) { return null; } var prog = gl.createProgram(); gl.attachShader(prog, vsh); gl.attachShader(prog, fsh); gl.deleteShader(vsh); gl.deleteShader(fsh); gl.linkProgram(prog); if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { var errlog = gl.getProgramInfoLog(prog); console.error(errlog); return null; } if(uniformlist) { prog.uniforms = {}; for(var i = 0; i < uniformlist.length; i++) { prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]); } } if(attrlist) { prog.attributes = {}; for(var i = 0; i < attrlist.length; i++) { var attr = attrlist[i]; prog.attributes[attr] = gl.getAttribLocation(prog, attr); } } return prog; } function useShader(prog) { gl.useProgram(prog); for(var attr in prog.attributes) { gl.enableVertexAttribArray(prog.attributes[attr]);; } } function unuseShader(prog) { for(var attr in prog.attributes) { gl.disableVertexAttribArray(prog.attributes[attr]);; } gl.useProgram(null); } ///// var projection = { 'angle':60, 'nearfar':new Float32Array([0.1, 100.0]), 'matrix':Matrix44.createIdentity() }; var camera = { 'position':Vector3.create(0, 0, 100), 'lookat':Vector3.create(0, 0, 0), 'up':Vector3.create(0, 1, 0), 'dof':Vector3.create(10.0, 4.0, 8.0), 'matrix':Matrix44.createIdentity() }; var pointFlower = {}; var meshFlower = {}; var sceneStandBy = false; var BlossomParticle = function () { this.velocity = new Array(3); this.rotation = new Array(3); this.position = new Array(3); this.euler = new Array(3); this.size = 1.0; this.alpha = 1.0; this.zkey = 0.0; }; BlossomParticle.prototype.setVelocity = function (vx, vy, vz) { this.velocity[0] = vx; this.velocity[1] = vy; this.velocity[2] = vz; }; BlossomParticle.prototype.setRotation = function (rx, ry, rz) { this.rotation[0] = rx; this.rotation[1] = ry; this.rotation[2] = rz; }; BlossomParticle.prototype.setPosition = function (nx, ny, nz) { this.position[0] = nx; this.position[1] = ny; this.position[2] = nz; }; BlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) { this.euler[0] = rx; this.euler[1] = ry; this.euler[2] = rz; }; BlossomParticle.prototype.setSize = function (s) { this.size = s; }; BlossomParticle.prototype.update = function (dt, et) { this.position[0] += this.velocity[0] * dt; this.position[1] += this.velocity[1] * dt; this.position[2] += this.velocity[2] * dt; this.euler[0] += this.rotation[0] * dt; this.euler[1] += this.rotation[1] * dt; this.euler[2] += this.rotation[2] * dt; }; function createPointFlowers() { // get point sizes var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); renderSpec.pointSize = {'min':prm[0], 'max':prm[1]}; var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent; var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent; pointFlower.program = createShader( vtxsrc, frgsrc, ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'], ['aPosition', 'aEuler', 'aMisc'] ); useShader(pointFlower.program); pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]); pointFlower.fader = Vector3.create(0.0, 10.0, 0.0); // paramerters: velocity[3], rotate[3] pointFlower.numFlowers = 1600; pointFlower.particles = new Array(pointFlower.numFlowers); // vertex attributes {position[3], euler_xyz[3], size[1]} pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2)); pointFlower.positionArrayOffset = 0; pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3; pointFlower.miscArrayOffset = pointFlower.numFlowers * 6; pointFlower.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(pointFlower.program); for(var i = 0; i < pointFlower.numFlowers; i++) { pointFlower.particles[i] = new BlossomParticle(); } } function initPointFlowers() { //area pointFlower.area = Vector3.create(20.0, 20.0, 20.0); pointFlower.area.x = pointFlower.area.y * renderSpec.aspect; pointFlower.fader.x = 10.0; //env fade start pointFlower.fader.y = pointFlower.area.z; //env fade half pointFlower.fader.z = 0.1; //near fade start //particles var PI2 = Math.PI * 2.0; var tmpv3 = Vector3.create(0, 0, 0); var tmpv = 0; var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);}; for(var i = 0; i < pointFlower.numFlowers; i++) { var tmpprtcl = pointFlower.particles[i]; //velocity tmpv3.x = symmetryrand() * 0.3 + 0.8; tmpv3.y = symmetryrand() * 0.2 - 1.0; tmpv3.z = symmetryrand() * 0.3 + 0.5; Vector3.normalize(tmpv3); tmpv = 2.0 + Math.random() * 1.0; tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv); //rotation tmpprtcl.setRotation( symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5 ); //position tmpprtcl.setPosition( symmetryrand() * pointFlower.area.x, symmetryrand() * pointFlower.area.y, symmetryrand() * pointFlower.area.z ); //euler tmpprtcl.setEulerAngles( Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0 ); //size tmpprtcl.setSize(0.9 + Math.random() * 0.1); } } function renderPointFlowers() { //update var PI2 = Math.PI * 2.0; var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z]; var repeatPos = function (prt, cmp, limit) { if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) { //out of area if(prt.position[cmp] > 0) { prt.position[cmp] -= limit * 2.0; } else { prt.position[cmp] += limit * 2.0; } } }; var repeatEuler = function (prt, cmp) { prt.euler[cmp] = prt.euler[cmp] % PI2; if(prt.euler[cmp] < 0.0) { prt.euler[cmp] += PI2; } }; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; prtcl.update(timeInfo.delta, timeInfo.elapsed); repeatPos(prtcl, 0, pointFlower.area.x); repeatPos(prtcl, 1, pointFlower.area.y); repeatPos(prtcl, 2, pointFlower.area.z); repeatEuler(prtcl, 0); repeatEuler(prtcl, 1); repeatEuler(prtcl, 2); prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5; prtcl.zkey = (camera.matrix[2] * prtcl.position[0] + camera.matrix[6] * prtcl.position[1] + camera.matrix[10] * prtcl.position[2] + camera.matrix[14]); } // sort pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;}); // update data var ipos = pointFlower.positionArrayOffset; var ieuler = pointFlower.eulerArrayOffset; var imisc = pointFlower.miscArrayOffset; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; pointFlower.dataArray[ipos] = prtcl.position[0]; pointFlower.dataArray[ipos + 1] = prtcl.position[1]; pointFlower.dataArray[ipos + 2] = prtcl.position[2]; ipos += 3; pointFlower.dataArray[ieuler] = prtcl.euler[0]; pointFlower.dataArray[ieuler + 1] = prtcl.euler[1]; pointFlower.dataArray[ieuler + 2] = prtcl.euler[2]; ieuler += 3; pointFlower.dataArray[imisc] = prtcl.size; pointFlower.dataArray[imisc + 1] = prtcl.alpha; imisc += 2; } //draw gl.enable(gl.BLEND); //gl.disable(gl.DEPTH_TEST); gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); var prog = pointFlower.program; useShader(prog); gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix); gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof)); gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader)); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT); // doubler for(var i = 1; i < 2; i++) { var zpos = i * -2.0; pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); } //main pointFlower.offset[0] = 0.0; pointFlower.offset[1] = 0.0; pointFlower.offset[2] = 0.0; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(prog); gl.enable(gl.DEPTH_TEST); gl.disable(gl.BLEND); } // effects //common util function createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) { var ret = {}; var unifs = ['uResolution', 'uSrc', 'uDelta']; if(exunifs) { unifs = unifs.concat(exunifs); } var attrs = ['aPosition']; if(exattrs) { attrs = attrs.concat(exattrs); } ret.program = createShader(vtxsrc, frgsrc, unifs, attrs); useShader(ret.program); ret.dataArray = new Float32Array([ -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0 ]); ret.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer); gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(ret.program); return ret; } // basic usage // useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize // gl.uniform**(...); //additional uniforms // drawEffect() // unuseEffect(prog) // TEXTURE0 makes src function useEffect(fxobj, srctex) { var prog = fxobj.program; useShader(prog); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); if(srctex != null) { gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray); gl.uniform1i(prog.uniforms.uSrc, 0); gl.activeTexture(gl.TEXTURE0); gl.bindTexture(gl.TEXTURE_2D, srctex.texture); } } function drawEffect(fxobj) { gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer); gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0); gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4); } function unuseEffect(fxobj) { unuseShader(fxobj.program); } var effectLib = {}; function createEffectLib() { var vtxsrc, frgsrc; //common var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent; //background frgsrc = document.getElementById(\"bg_fsh\").textContent; effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null); // make brightpixels buffer frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent; effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null); // direction blur frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent; effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null); //final composite vtxsrc = document.getElementById(\"pp_final_vsh\").textContent; frgsrc = document.getElementById(\"pp_final_fsh\").textContent; effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null); } // background function createBackground() { //console.log(\"create background\"); } function initBackground() { //console.log(\"init background\"); } function renderBackground() { gl.disable(gl.DEPTH_TEST); useEffect(effectLib.sceneBg, null); gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta); drawEffect(effectLib.sceneBg); unuseEffect(effectLib.sceneBg); gl.enable(gl.DEPTH_TEST); } // post process var postProcess = {}; function createPostProcess() { //console.log(\"create post process\"); } function initPostProcess() { //console.log(\"init post process\"); } function renderPostProcess() { gl.enable(gl.TEXTURE_2D); gl.disable(gl.DEPTH_TEST); var bindRT = function (rt, isclear) { gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer); gl.viewport(0, 0, rt.width, rt.height); if(isclear) { gl.clearColor(0, 0, 0, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); } }; //make bright buff bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.mkBrightBuf, renderSpec.mainRT); drawEffect(effectLib.mkBrightBuf); unuseEffect(effectLib.mkBrightBuf); // make bloom for(var i = 0; i < 2; i++) { var p = 1.5 + 1 * i; var s = 2.0 + 1 * i; bindRT(renderSpec.wHalfRT1, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT0); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT1); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); } //display gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.viewport(0, 0, renderSpec.width, renderSpec.height); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); useEffect(effectLib.finalComp, renderSpec.mainRT); gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1); gl.activeTexture(gl.TEXTURE1); gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture); drawEffect(effectLib.finalComp); unuseEffect(effectLib.finalComp); gl.enable(gl.DEPTH_TEST); } ///// var SceneEnv = {}; function createScene() { createEffectLib(); createBackground(); createPointFlowers(); createPostProcess(); sceneStandBy = true; } function initScene() { initBackground(); initPointFlowers(); initPostProcess(); //camera.position.z = 17.320508; camera.position.z = pointFlower.area.z + projection.nearfar[0]; projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0; Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]); } function renderScene() { //draw Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up); gl.enable(gl.DEPTH_TEST); //gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer); gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height); gl.clearColor(0.005, 0, 0.05, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); renderBackground(); renderPointFlowers(); renderPostProcess(); } ///// function onResize(e) { makeCanvasFullScreen(document.getElementById(\"sakura\")); setViewports(); if(sceneStandBy) { initScene(); } } function setViewports() { renderSpec.setSize(gl.canvas.width, gl.canvas.height); gl.clearColor(0.2, 0.2, 0.5, 1.0); gl.viewport(0, 0, renderSpec.width, renderSpec.height); var rtfunc = function (rtname, rtw, rth) { var rt = renderSpec[rtname]; if(rt) deleteRenderTarget(rt); renderSpec[rtname] = createRenderTarget(rtw, rth); }; rtfunc('mainRT', renderSpec.width, renderSpec.height); rtfunc('wFullRT0', renderSpec.width, renderSpec.height); rtfunc('wFullRT1', renderSpec.width, renderSpec.height); rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight); rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight); } function render() { renderScene(); } var animating = true; function toggleAnimation(elm) { animating ^= true; if(animating) animate(); if(elm) { elm.innerHTML = animating? \"Stop\":\"Start\"; } } function stepAnimation() { if(!animating) animate(); } function animate() { var curdate = new Date(); timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0; timeInfo.delta = (curdate - timeInfo.prev) / 1000.0; timeInfo.prev = curdate; if(animating) requestAnimationFrame(animate); render(); } function makeCanvasFullScreen(canvas) { var b = document.body; var d = document.documentElement; fullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth); fullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight); canvas.width = fullw; canvas.height = fullh; } window.addEventListener('load', function(e) { var canvas = document.getElementById(\"sakura\"); try { makeCanvasFullScreen(canvas); gl = canvas.getContext('experimental-webgl'); } catch(e) { alert(\"WebGL not supported.\" + e); console.error(e); return; } window.addEventListener('resize', onResize); setViewports(); createScene(); initScene(); timeInfo.start = new Date(); timeInfo.prev = timeInfo.start; animate(); }); //set window.requestAnimationFrame (function (w, r) { w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); }; })(window, 'equestAnimationFrame');"},{"title":"相册","slug":"instagram","date":"2016-12-07T06:19:31.200Z","updated":"2016-12-07T06:19:31.200Z","comments":false,"path":"instagram/index.html","permalink":"http://litten.github.io/instagram/index.html","excerpt":"","text":"图片来自instagram，正在加载中…"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2016-12-07T06:11:32.912Z","updated":"2016-12-07T06:11:32.912Z","comments":true,"path":"2016/12/07/hello-world/","link":"","permalink":"http://litten.github.io/2016/12/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"UI-Router for Angular 1","slug":"2016-12-06","date":"2016-12-06T09:57:07.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/12/06/2016-12-06/","link":"","permalink":"http://litten.github.io/2016/12/06/2016-12-06/","excerpt":"AngularUI库提供的最有用的库之一：UI-ROUTER本页介绍UI-ROUTER。","text":"AngularUI库提供的最有用的库之一：UI-ROUTER本页介绍UI-ROUTER。 关于UI-Router是在AngularJS中路由的规范标准。受到Angula路由器$route和Ember路由器的影响，UI-Router已成为在Angular 1中路由非简单应用程序的标准选择。 安装 NPM 1npm install --save angular-ui-router 命令行向项目中添加最新的预发布：npm install --save angular-ui-router@next向项目中添加特定版本：npm install --save angular-ui-router@1.0.0-beta.1 在HTML中用&lt;script&gt;标签最新的预发布: &lt;script src=&quot;//unpkg.com/angular-ui-router/release/angular-ui-router.min.js&quot;&gt;特定版本: &lt;script src=&quot;//unpkg.com/angular-ui-router@0.3.1/release/angular-ui-router.js&quot;&gt; bower 1bower install angular-ui-router#0.3.1 使用将ui.router注入到应用中1angulat.module('app',['ui.router']); 和angular内置服务ngRouter不同，ui-router是基于状态工作的，不是简单的url,因此可以将其镶嵌在视图中。123&lt;div ng-controller=\"DemoController\"&gt; &lt;div ui-view&gt;&lt;/div&gt;&lt;/div&gt; ng-view ==&gt; ui-view ui-view的内置路由和状态有关系，所以只需要关心应用处于那种状态。 允许视图嵌套。 用.config定义路由。将路由设置在 $routerProvider 上，而不是$stateProvider。12345$stateProvider .state('home', &#123; url: '/home', template: require('./index.html'), &#125;); 这一步给路由配置了一个home的状态，当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面。 1.template,templateUrl,templateProvider视图设置模板的方式有三种： template：一个html字符串 OR 返回HTML的函数 templateUrl：一个模板路径 OR 返回模板路径的函数 templateProvider： 一个返回HTML字符的函数 例如：12345678910111213$stateProvider .state('app', &#123; url: '/home', /*@ngInject*/ templateProvider: ($q) =&gt; &#123; let promise = $q((resolve) =&gt; &#123; require.ensure([], function() &#123; resolve(require('./index.html')); &#125;); &#125;); return promise; &#125;&#125;); 2.controller 为视图关联控制器，如果没有视图则不会创建该控制器。 3.resolve在angular-ui-router中resolve是一个对象：其中： 键就是你要注入到控制器中依赖的名称。 值就是待解析的这个factories。 如果传入的是一个字符串，angular-ui-router会和已经注册的服务进行匹配。如果传入的是一个函数，angular-ui-router则会注册这个函数，函数返回值就是依赖。如果传入的是一个promise，angular-ui-router会在控制器实例化之前解析，其值会被注册到控制器中。 12345678910111213141516171819202122$stateProvider .state('home', &#123; url: '/home', template: require('./index.html'), controller: 'AppController', controllerAs: 'ctrl', resolve: &#123; /*@ngInject*/ load: ($q, $ocLazyLoad) =&gt; &#123; let appControllerPromise = $q((resolve) =&gt; &#123; require.ensure([], () =&gt; &#123; let module = require('./app.controller'); //babel6 export default $ocLazyLoad.load(&#123; name: module.name &#125;); resolve(module); &#125;); &#125;); return $q.all([appControllerPromise]); &#125; &#125; &#125;); 4.url给应用程序的状态分配一个唯一URL。URL通过状态导航应用，而不是简单的通过URL导航。12345$stateProvider .state('home', &#123; url: '/home', template: require('./index.html'), &#125;); 当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面将其填充到ui-view指令处。 4.1url参数12345678$stateProvider .state('home', &#123; url: '/home/:indexId', template: require('./index.html'), controller:($scope,$stateParams)=&gt;&#123; $scope.indexId=$stateParams.indexId; &#125; &#125;); 当用户访问到 /home/1，$stateParams.indexId会变成1，因为$stateParams为{indexId:1}。 还可以用不同的语法：12345678$stateProvider .state('home', &#123; url: '/home/&#123;indexId&#125;', template: require('./index.html'), controller:($scope,$stateParams)=&gt;&#123; $scope.indexId=$stateParams.indexId; &#125; &#125;); 还可以用正则：12345678$stateProvider .state('home', &#123; url: '/home/&#123;indexId:[0-9a-fA-f]&#123;6&#125;&#125;',//只能匹配十六进制的indexId template: require('./index.html'), controller:($scope,$stateParams)=&gt;&#123; $scope.indexId=$stateParams.indexId; &#125; &#125;); 注意不能使用正则捕获数组。 还可以在路由中指定查询参数：12345678$stateProvider .state('home', &#123; url: '/home/inbox?sort=ascenging', template: require('./index.html'), controller:($scope,$stateParams)=&gt;&#123; $scope.indexId=$stateParams.indexId; &#125; &#125;); 5.嵌套路由一个页面包含多个ui-view。例如：在home的视图中，点击show billing链接将it’s billing! 加载到其下方。12345678910111213141516$stateProvider .state('home', &#123; url: '/home/:inbox', template: ` &lt;div&gt; &lt;a ui-sref=\"home.billing\"&gt;show billing&lt;/a&gt; &lt;div ui-view&gt;&lt;/div&gt; &lt;/div&gt;`, controller:($scope,$stateParams)=&gt;&#123; $scope.indexId=$stateParams.indexId; &#125; &#125;) .state('home.billing', &#123; url: '/billing', template: `&lt;div&gt; it's billing! &lt;/div&gt;` &#125;); /home/1 匹配第一个/home/:inbox路由状态 /home/1/billing 匹配第二个home.billing路由状态 6.params7.viewsangular-ui-router的多命名视图。在一个独立的视图中可以设置多个要引用的视图：12345&lt;div&gt; &lt;div ui-views=\"iface\"&gt;&lt;/div&gt; &lt;div ui-views=\"billing\"&gt;&lt;/div&gt; &lt;div ui-views=\"account\"&gt;&lt;/div&gt;&lt;/div&gt; 设置views参数,template,templateUrl,templateProvider就会被忽略。1234567891011121314151617$stateProvider .state('home', &#123; views:&#123; 'iface':&#123; template: require('./index.html'), controller:($scope)=&gt;&#123;&#125; &#125;, 'billing':&#123; template: require('./index.html'), controller:($scope)=&gt;&#123;&#125; &#125;, 'account':&#123; template: require('./index.html'), controller:($scope)=&gt;&#123;&#125; &#125; &#125; &#125;); 8.abstract 抽象模板不能直接被激活，可以被字节点激活。 1234567891011121314$stateProvider .state('home', &#123; abstract:true, //父设置abstract属性：抽象模板 url: '/home', template: `&lt;div&gt;&lt;div ui-view&gt;&lt;/div&gt;&lt;/div&gt;` &#125;) .state('home.billing', &#123; url: '/billing',//子节点 template: `&lt;div&gt; it's billing! &lt;/div&gt;` &#125; .state('home.account', &#123; url: '/account',//子节点 template: `&lt;div&gt; it's account! &lt;/div&gt;` &#125;); 9.onEnter , onExit 视图进入，或者离开状态时触发的行为。 10.data状态传递参数123456789101112131415161718$stateProvider.state('app', &#123; abstract: true, /*@ngInject*/ templateProvider: ($q) =&gt; &#123; let promise = $q((resolve) =&gt; &#123; require.ensure([], function() &#123; resolve(require('./index.html')); &#125;); &#125;); return promise; &#125;, controller: 'AppController', controllerAs: 'ctrl', resolve: &#123;&#125;, data : &#123; title : '首页' &#125;&#125;); en：https://ui-router.github.io/ng1/","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://litten.github.io/tags/Angular/"},{"name":"ui-router","slug":"ui-router","permalink":"http://litten.github.io/tags/ui-router/"}]},{"title":"Angular ngController","slug":"2016-12-05","date":"2016-12-05T02:06:43.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/12/05/2016-12-05/","link":"","permalink":"http://litten.github.io/2016/12/05/2016-12-05/","excerpt":"ngController本页介绍ngController，以及如何通过 $route服务在路由中绑定控制器？？？？。","text":"ngController本页介绍ngController，以及如何通过 $route服务在路由中绑定控制器？？？？。 ngControllerngController指令将控制器綁定到视图。这是Angular如何支持模型 - 视图 - 控制器设计模式背后原理的一个关键点。 Angular的MVC组件: 模型(Model) - 模型是范围的属性;通过绑定访问作用域属性,作用域附加到DOM。 视图(View) - 呈现到视图中的模板（具有数据绑定的HTML）。 控制器(Controller) -ngController指令指定一个Controller类;该类包含应用程序后面的业务逻辑，用函数和值来装饰范围. 注意，您还可以通过 $route服务在路由定义它来将控制器绑定到DOM。一个常见的错误是在模板本身中使用ng-controller再次声明控制器。这将导致控制器连接和执行两次。 如何通过 $route服务在路由中绑定控制器？？？？ 指令信息 此指令创建新范围。 此指令的执行优先级为500。 用法作为元素：1234&lt;ng-controller ng-controller=\"expression\"&gt;...&lt;/ng-controller&gt; 作为属性：1234&lt;ANY ng-controller=\"expression\"&gt;...&lt;/ANY&gt; 参数 参数 类型 详细信息 ngController 表达式 使用当前$controllerProvider注册函数名称或当前作用域上的表达式计算到函数的名称。通过指定ng-controller =“as propertyName”，可以将控制器实例发布到scope属性中。$controllerProvider.allowGlobals()设置全局，不推荐，已经弃用。 en：https://docs.angularjs.org/api/ng/directive/ngController","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://litten.github.io/tags/Angular/"},{"name":"ngController","slug":"ngController","permalink":"http://litten.github.io/tags/ngController/"}]},{"title":"Angular Bootstrap","slug":"2016-12-02","date":"2016-12-02T06:33:52.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/12/02/2016-12-02/","link":"","permalink":"http://litten.github.io/2016/12/02/2016-12-02/","excerpt":"Bootstrap本页介绍Angular初始化过程，以及如何在需要的时候手动初始化Angular。","text":"Bootstrap本页介绍Angular初始化过程，以及如何在需要的时候手动初始化Angular。 Angular&lt;script&gt;TagAngular自动初始化时,我们建议这样导入文件路径.1234567&lt;!doctype html&gt;&lt;html xmlns:ng=\"http://angularjs.org\" ng-app&gt; &lt;body&gt; ... &lt;script src=\"angular.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 将script标签放在页面底部。在页面末尾放置脚本标记可以提高应用程序加载时间，因为加载angular.js脚本不会阻止HTML的加载。你可以从这儿获取最新的代码。请不要将你的生产代码链接到此网址，因为它会暴露你网站上的安全漏洞。对于开发链接到我们的网站是好的。 选择angular-[version].js为可读的文件，适合开发和调试。选择angular-[version].min.js为压缩的文件，适合在生产中使用。 如果你希望Angularjs自动引导你的应用程序，请将ng-app放置到应用程序的根目录，通常在标签上。 不推荐在旧版本的IE上使用angularjs。 自动初始化angular在DOMContentLoaded事件时自动初始化或者当angular.js脚本被评估为document.readyState设置为“完成”。这这个时间点上，Angular寻找指定你的应用程序根目录的ngApp指令。如果找到ngApp指令，那么Angular将： 加载与指令相关联的模块。 创建应用程序注入器。 编译处理ngApp指令的DOM作为编译的最基层。这允许你告诉angular只处理DOM的一部分作为一个Angular应用程序。 1234567&lt;!doctype html&gt;&lt;html ng-app=\"optionalModuleName\"&gt; &lt;body&gt; I can add: &#123;&#123; 1+2 &#125;&#125;. &lt;script src=\"angular.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 作为最佳实践，考虑在ng-app的相同元素上添加ng-strict-di指令：1234567&lt;!doctype html&gt;&lt;html ng-app=\"optionalModuleName\" ng-strict-di&gt; &lt;body&gt; I can add: &#123;&#123; 1+2 &#125;&#125;. &lt;script src=\"angular.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 这将确保你的应用程序中的所有服务都已正确注释。请参阅这儿 了解依赖注入严格模式。 手动初始化如果你需要更多地控制初始化过程，可以改用手动引导方法。当你需要这样做需要在Angular编译页面之前执行操作。 这里是一个手动初始化Angular的例子：1234567891011121314151617181920&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt; &lt;div ng-controller=\"MyController\"&gt; Hello &#123;&#123;greetMe&#125;&#125;! &lt;/div&gt; &lt;script src=\"http://code.angularjs.org/snapshot/angular.js\"&gt;&lt;/script&gt; &lt;script&gt; angular.module('myApp', []) .controller('MyController', ['$scope', function ($scope) &#123; $scope.greetMe = 'World'; &#125;]); angular.element(function() &#123; angular.bootstrap(document, ['myApp']); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 注意: 要加载到注入器中的应用程序模块的名称作为angular.bootstrap函数的第二个参数。 请注意，angular.bootstrap不会即时创建模块,只会在启动时创建模块,因此在作为参数传递之前，必须确保创建其所有的自定义模块。你调用angular.bootstrap(),就已经加载到了所有自定义模块。你不能在应用程序启动后添加控制器，服务，指令等。 注意：在手动引导应用程序时，不应使用ng-app指令。 这是你的代码应该遵循的顺序： 在页面和所有代码加载后，找到你的AngularJS应用程序的根元素，它通常是文档的根。 调用angular.bootstrap将元素编译成可执行文件，双向绑定应用程序。 谨记有几个事情要记住，不管自动或手动引导： 虽然每页可以引导多个AngularJS应用程序，但不建议这么做。这可能会遇到问题，特别是与复杂的应用程序，所以提醒你需要谨慎。 不要在具有使用转换的指令的元素上引导应用程序，例如ngIf，ngInclude和ngView。 这样做会错误地放置应用程序$rootElement和应用程序的注入器，导致动画停止工作，并使应用程序外部无法访问注入器。 延迟引导这个功能使得像Batarang和测试运行程序这样的工具可以在AngularJS的引导进程中，并在更多的模块中依赖注入进来.其可以替代或增加依赖注入服务以用于仪器化或模拟重度依赖性。如果window.name包含前缀NG_DEFER_BOOTSTRAP！当angular.bootstrap被调用时，引导进程将被暂停，直到angular.resumeBootstrap（）被调用。angular.resumeBootstrap（）采用一个可选的模块数组，应该添加到应用程序即将被引导的模块的原始列表中。 en:https://docs.angularjs.org/guide/bootstrap","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://litten.github.io/tags/Angular/"},{"name":"Bootstrap","slug":"Bootstrap","permalink":"http://litten.github.io/tags/Bootstrap/"}]},{"title":"CSS文件引入","slug":"2016-12-01","date":"2016-12-01T06:47:41.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/12/01/2016-12-01/","link":"","permalink":"http://litten.github.io/2016/12/01/2016-12-01/","excerpt":"materialize.css文件引用","text":"materialize.css文件引用 之前引用：1@import '~materialize-css/sass/materialize.scss'; 然后报错：Module not found: Error: Cannot resolve ‘file’ or ‘directory’ ../fonts/roboto/Roboto-Bold.ttf in /home/xxxxxxxxxxx/src/assets/sass resolve file…………………….. 之后尝试修改引用node_modules文件中的资源，由引用SASS修改为应用 CSS文件。1@import '~materialize-css/dist/css/materialize.css'; 在app.mpdule.js中加载文件：import &#39;materialize-css&#39;;不用加载其到 Angular中去。 没有报错啦～～","categories":[],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://litten.github.io/tags/webpack/"},{"name":"Angular","slug":"Angular","permalink":"http://litten.github.io/tags/Angular/"},{"name":"ES6","slug":"ES6","permalink":"http://litten.github.io/tags/ES6/"}]},{"title":"html-webpack-plugin-②","slug":"2016-11-30-1","date":"2016-11-30T09:35:54.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/11/30/2016-11-30-1/","link":"","permalink":"http://litten.github.io/2016/11/30/2016-11-30-1/","excerpt":"webpack 配置html-webpack-plugin12let path = require('path');let HtmlWebpackPlugin = require('html-webpack-plugin'); 12345plugins: [ new HtmlWebpackPlugin(&#123; template: path.resolve('./src/index.html') &#125;)]","text":"webpack 配置html-webpack-plugin12let path = require('path');let HtmlWebpackPlugin = require('html-webpack-plugin'); 12345plugins: [ new HtmlWebpackPlugin(&#123; template: path.resolve('./src/index.html') &#125;)] 公司有一个大神搭建的项目，有许多地方设计的很巧妙。虚心研究，一直有一个疑惑，并没有在项目HTML中看到任何src 文件的引用，项目是如何加在资源文件的？上次框架搭建过程中没有研究清楚，这次在新项目中仔细研究搭建过程。 HtmlWebpackPlugin 这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件。 这个文件中自动引用了你打包后的JS文件。 每次编译都在文件名中插入一个不同的哈希值。 安装1npm install --save-dev html-webpack-plugin 创建Html模板页面，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件。 此时项目结构如下图所示 Webpack详细配置 （37行）：123456789101112131415161718192021222324252627282930313233343536373839404142let path = require('path');let webpack = require('webpack');let HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/src/app/app.module.js\", // entry: __dirname + \"/src/bootstrap.js\", output: &#123; path: __dirname + \"/dist\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [&#123; test: /\\.json$/, //在配置文件里添加JSON loader loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' //在webpack的module部分的loaders里进行配置即可 &#125;, &#123; test: /\\.css$/, loader: 'style!css' //添加对样式表的处理 &#125;] &#125;, devServer: &#123; contentBase: \"./src/\", //本地服务器所加载的页面所在的目录 colors: true, //终端中输出结果为彩色 historyApiFallback: true, //不跳转 inline: true //实时刷新 &#125;, plugins: [ new webpack.BannerPlugin(\"Copyright upsmart.\"), //在这个数组中new一个就可以了 new webpack.HotModuleReplacementPlugin(), //热加载插件 new HtmlWebpackPlugin(&#123; template: path.resolve('./src/index.html') &#125;) ],&#125; index.html：123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Webpack Sample Project&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Webpack Sample Project&lt;/h1&gt; &lt;hr&gt; &lt;div id='root'&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 以上！","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://litten.github.io/tags/node/"},{"name":"webpack","slug":"webpack","permalink":"http://litten.github.io/tags/webpack/"}]},{"title":"path.resolve([...paths])解释","slug":"2016-11-30-2","date":"2016-11-30T01:28:36.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/11/30/2016-11-30-2/","link":"","permalink":"http://litten.github.io/2016/11/30/2016-11-30-2/","excerpt":"path.resolvenodejs官方文档原文：https://nodejs.org/api/path.html#path_path_resolve_paths 初始添加在版本: v0.3.4 paths 路径或路径段 返回: path.resolve（）方法将一系列路径或路径段解析为绝对路径。","text":"path.resolvenodejs官方文档原文：https://nodejs.org/api/path.html#path_path_resolve_paths 初始添加在版本: v0.3.4 paths 路径或路径段 返回: path.resolve（）方法将一系列路径或路径段解析为绝对路径。 给定的路径序列从右到左进行处理，每个后续路径前置直到构造绝对路径。例如，给定路径段序列：/ foo，/ bar，baz，调用path.resolve（&#39;/ foo&#39;，&#39;/ bar&#39;，&#39;baz&#39;）将返回/ bar / baz。 如果在处理所有给定路径段之后还没有生成绝对路径，则使用当前工作目录。 生成的路径将进行规范化，并删除尾部斜杠，除非将路径解析为根目录。 忽略零长度路径段。 如果没有传递路径段，path.resolve（）将返回当前工作目录的绝对路径。 例如：12345678path.resolve('/foo/bar', './baz')// Returns: '/foo/bar/baz'path.resolve('/foo/bar', '/tmp/file/')// Returns: '/tmp/file'path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')// 如果当前工作目录是 /home/myself/node,返回 '/home/myself/node/wwwroot/static_files/gif/image.gif' 如果任何参数不是字符串，则抛出TypeError。 Class: TypeErrorError子类，指示提供的参数不是允许的类型。例如，将函数传递给期望字符串的参数将被视为TypeError。12require('url').parse(() =&gt; &#123; &#125;); // throws TypeError, since it expected a string Node.js将立即生成并抛出TypeError实例作为参数验证的形式。","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://litten.github.io/tags/node/"},{"name":"webpack","slug":"webpack","permalink":"http://litten.github.io/tags/webpack/"}]},{"title":"Angular指令数据绑定","slug":"2016-11-23-1","date":"2016-11-23T00:55:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/11/23/2016-11-23-1/","link":"","permalink":"http://litten.github.io/2016/11/23/2016-11-23-1/","excerpt":"准备项目示例 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html","text":"准备项目示例 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html Angular数据绑定有几种类型? Angular如何修改内联绑定符 ? Angular如何隐藏模板标记? Angular scope如何工作? Angular ng-bind 与 ng-bind-template区别? 123456&lt;div&gt; There are &lt;span ng-bind=\"todos.length\"&gt;&lt;/span&gt; items &lt;/div&gt; &lt;div ng-bind-template= \"First: &#123;&#123;todos[0].action&#125;&#125;. Second: &#123;&#123;todos[1].action&#125;&#125;\"&gt; &lt;/div&gt; 说明：`ng-bind` 只能处理单个数据绑定表达式， `ng-bind-template`可以处理多个数据绑定。所以一般用内联绑定符 {{ 和 }} （双括号，草拟娘的，hexo编译会自动屏蔽双大括号这个符号，MB~） 绑定数据。 傻子才会用这两个。O(∩_∩)O~ asd","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://litten.github.io/tags/Angular/"},{"name":"angular基础","slug":"angular基础","permalink":"http://litten.github.io/tags/angular基础/"},{"name":"数据绑定","slug":"数据绑定","permalink":"http://litten.github.io/tags/数据绑定/"}]},{"title":"Angular Material Dynamic Themes | 动态主题","slug":"2016-11-09","date":"2016-11-09T00:55:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/11/09/2016-11-09/","link":"","permalink":"http://litten.github.io/2016/11/09/2016-11-09/","excerpt":"先看效果： http://codepen.io/myoneray/pen/RoWGmp?editors=1010 angular Material 主题的修改主要围绕 $mdThemingProvider服务展开：","text":"先看效果： http://codepen.io/myoneray/pen/RoWGmp?editors=1010 angular Material 主题的修改主要围绕 $mdThemingProvider服务展开： 提供程序配置$ mdTheming服务 默认主题$mdThemingProvider默认使用一下配置:1234Primary Palette: PrimaryAccent Palette: PinkWarn Palette: Deep-OrangeBackground Palette: Grey 修改默认主题如果你不想在元素本身使用md-theme指令，覆盖默认主题。你可以使用下面的方式：12345678myAppModule.config(function($mdThemingProvider) &#123; $mdThemingProvider .theme('default') .primaryPalette('blue') .accentPalette('teal') .warnPalette('red') .backgroundPalette('grey');&#125;); 动态主题默认情况下，如果在运行时更改主题，$ mdTheming服务将不会检测到这些更改。如果你有一个应用程序，在运行时更改其主题，你必须启用主题监测：1234myAppModule.config(function($mdThemingProvider) &#123; // Enable theme watching. $mdThemingProvider.alwaysWatchTheme(true);&#125;); 自定义主题样式有时你可能想要为自定义组件使用自己的主题。你可以使用以下标记注册您自己的样式：1234myAppModule.config(function($mdThemingProvider) &#123; // Register our custom stylesheet into the theming provider. $mdThemingProvider.registerStyles(STYLESHEET);&#125;); registerStyles方法只接受字符串作为值，所以你实际上不能将外部样式表文件加载到$ mdThemingProvider。如果需要加载外部样式表，我们建议使用打包工具，它支持包括原始内容，如webpack的raw-loader：1234myAppModule.config(function($mdThemingProvider) &#123; // Register your custom stylesheet into the theming provider. $mdThemingProvider.registerStyles(require('../styles/my-component.theme.css'));&#125;); 浏览器颜色启用浏览器标题着色更多信息请访问：https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color 选项参数：theme - 通过$ mdThemeProvider定义的主题来使用调色板。默认为默认主题。palette- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。hue - 来自所选调色板的色调。默认值为800 例如一下配置：12345678myAppModule.config(function($mdThemingProvider) &#123; // Enable browser color $mdThemingProvider.enableBrowserColor(&#123; theme: 'myTheme', // Default is 'default' palette: 'accent', // Default is 'primary', any basic material palette and extended palettes are available hue: '200' // Default is '800' &#125;);&#125;); 方法 $mdThemingProvider.registerStyles(styles); 参数 类型 描述 styles string Angular Material的内置主题css中的样式。 $mdThemingProvider.setNonce(nonceValue); 参数 类型 描述 nonceValue string 要作为属性添加到主题样式标签的随机数。设置值允许使用CSP策略，而不使用unsafe-inline指令。 $mdThemingProvider.setDefaultTheme(themeName); 参数 类型 描述 themeName string 要应用于元素的默认主题名称。默认值为default。 $mdThemingProvider.alwaysWatchTheme(watch); 参数 类型 描述 watch boolean 是否总是观察主题的变化和重新应用类，当他们改变。默认值为false。启用可能会降低性能。 $mdThemingProvider.enableBrowserColor([options]); 参数 类型 描述 options Object theme - 通过$ mdThemeProvider定义的主题来使用调色板。默认为默认主题。palette- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。hue - 来自所选调色板的色调。默认值为800 返回值 描述 Function 删除浏览器颜色的功能 注：本文主要围绕解释阐述主题配置的，详细配置可以参考：https://material.angularjs.org/latest/Theming/01_introduction","categories":[],"tags":[{"name":"Angular Material","slug":"Angular-Material","permalink":"http://litten.github.io/tags/Angular-Material/"},{"name":"Dynamic Themes","slug":"Dynamic-Themes","permalink":"http://litten.github.io/tags/Dynamic-Themes/"},{"name":"Themes","slug":"Themes","permalink":"http://litten.github.io/tags/Themes/"}]},{"title":"Angular应用刨析","slug":"2016-11-23-2","date":"2016-11-09T00:55:00.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/11/09/2016-11-23-2/","link":"","permalink":"http://litten.github.io/2016/11/09/2016-11-23-2/","excerpt":"9.1 准备项目示例 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html","text":"9.1 准备项目示例 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html 9.2 使用模块工作创建模块： 1set myApp=angular.module('exampleApp',[]) module方法接受三个参数，但通常只使用前两个参数。 惯例给模块App的后缀名。 这个习惯清楚的体现出模块代表的是代码结构的顶层。这个做会在多模块的复杂应用中很有用。 模块方法接受的参数： 名称 描述 name 新模块的名称 requires 该模块所依赖的模块集合 config 改模块的配置。等同于Module.config方法 注意1set myApp=angular.module('exampleApp') 这样忽略requires参数，结果是模块试图查找一个之前创建的exampleApp的模块。而不是创建一个新的。而且通常会报错，没报错就说明已经有一个同名的模块。 在HTML中引应用ng-app属性：1&lt;html ng-app=\"exampleApp\"&gt; ng-app属性是在angularjs生命周期的bootstrap阶段被使用。不同于bootstrap CSS框架哦。 9.3 使用模块定义AngularJS组件 名称 描述 animation 动画特性 config 注册一个在模块加载时对模块的配置函数 constant 定义一个返回常亮服务 controller 创建控制器 directiv 创建一个指令 factory 创建一个服务 filter 创建一个过滤器 provider 创建一个服务 name 返回模块名 run 注册一个在angularJS加载完毕后用于对所有模块配置的函数 service 创建一个服务 vaiue 定义一个返回常量服务 Module的对象定义的方法可以范围三类： 为angulJS程序定义组件 使得","categories":[],"tags":[{"name":"Angular","slug":"Angular","permalink":"http://litten.github.io/tags/Angular/"},{"name":"angular基础","slug":"angular基础","permalink":"http://litten.github.io/tags/angular基础/"}]},{"title":"Material设置当前字体为主题默认颜色","slug":"2016-11-08","date":"2016-11-08T07:06:41.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/11/08/2016-11-08/","link":"","permalink":"http://litten.github.io/2016/11/08/2016-11-08/","excerpt":"1md-colors=\"&#123;color:'primary'&#125;\"","text":"1md-colors=\"&#123;color:'primary'&#125;\" Angular Material 默认不支持字体颜色，如下方法可以设置当前字体为主题默认颜色：&lt;h2 md-colors=&quot;{color:&#39;primary&#39;}&quot;&gt; 账号系统 &lt;small class=&quot;md-caption&quot;&gt;/ 账户管理&lt;/small&gt;&lt;/h2&gt; see: http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top angular验证： &lt;label&gt;账号&lt;/label&gt; &lt;input ng-model=&quot;ctrl.account&quot; name=&quot;account&quot; ng-pattern=&quot;/^[A-Za-z0-9]{1,10}$/&quot;&gt; &lt;div ng-messages=&quot;表单名.输入框名.$error&quot; role=&quot;alert&quot; multiple&gt; &lt;div ng-message=&quot;pattern&quot; class=&quot;my-message&quot;&gt;请输入十个字符以内的数字字母 &lt;/div&gt; &lt;/div&gt;","categories":[],"tags":[{"name":"Angular Material","slug":"Angular-Material","permalink":"http://litten.github.io/tags/Angular-Material/"}]},{"title":"html-webpack-plugin","slug":"2016-10-25-1","date":"2016-10-25T01:38:04.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/10/25/2016-10-25-1/","link":"","permalink":"http://litten.github.io/2016/10/25/2016-10-25-1/","excerpt":"webpack 插件： html-webpack-plugin 这个插件用来简化创建服务于 webpack bundle 的 HTML 文件，尤其是对于在文件名中包含了 hash 值，而这个值在每次编译的时候都发生变化的情况。你既可以让这个插件来帮助你自动生成 HTML 文件，也可以使用 lodash 模板加载生成的 bundles，或者自己加载这些 bundles。","text":"webpack 插件： html-webpack-plugin 这个插件用来简化创建服务于 webpack bundle 的 HTML 文件，尤其是对于在文件名中包含了 hash 值，而这个值在每次编译的时候都发生变化的情况。你既可以让这个插件来帮助你自动生成 HTML 文件，也可以使用 lodash 模板加载生成的 bundles，或者自己加载这些 bundles。 插件地址：https://www.npmjs.com/package/html-webpack-plugin 使用 npm 安装这个插件: $ npm install html-webpack-plugin@2 --save-dev webpack 配置 123456789var HtmlWebpackPlugin = require('html-webpack-plugin')var webpackConfig = &#123; entry: 'index.js', output: &#123; path: 'dist', filename: 'index_bundle.js' &#125;, plugins: [new HtmlWebpackPlugin()]&#125; 这将会自动在 dist 目录中生成一个名为 index.html 的文件，内容如下： 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Webpack App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script src=\"index_bundle.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 如果你有多个 webpack 入口点，它们都会被包含在生成的 script 元素中。 如果有任何的 CSS 资源包含在 webpack 输出中（例如，使用 ExtractTextPlugin 提炼出的 css ），这些将会使用 link 包含在 HTML 页面的 head 元素中。 详细配置 title: 用来生成页面的 title 元素 filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。 template: 模板文件路径，支持加载器，比如 html!./index.html inject: true | ‘head’ | ‘body’ | false ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，’head’ 将放置到 head 元素中。 favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。 minify: {} | false , 传递 html-minifier 选项给 minify 输出 hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。 cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。 showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中 chunks: 允许只添加某些块 (比如，仅仅 unit test 块) chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’ excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块) 下面的示例演示了如何使用这些配置。1234567891011121314&#123; entry: 'index.js', output: &#123; path: 'dist', filename: 'index_bundle.js', hash: true &#125;, plugins: [ new HtmlWebpackPlugin(&#123; title: 'My App', filename: 'assets/admin.html' &#125;) ]&#125; 生成多个 HTML 文件通过在配置文件中添加多次这个插件，来生成多个 HTML 文件。1234567891011121314&#123; entry: 'index.js', output: &#123; path: 'dist', filename: 'index_bundle.js' &#125;, plugins: [ new HtmlWebpackPlugin(), // Generates default index.html new HtmlWebpackPlugin(&#123; // Also generate a test.html filename: 'test.html', template: 'src/assets/test.html' &#125;) ]&#125; 编写自定义模板如果默认生成的 HTML 文件不适合你的需要看，可以创建自己定义的模板。方便的方式是通过 inject 选项，然后传递给定制的 HTML 文件。html-webpack-plugin 将会自动注入所有需要的 CSS, js, manifest 和 favicon 文件到标记中。1234567plugins: [ new HtmlWebpackPlugin(&#123; title: 'Custom template', template: 'my-index.html', // Load a custom template inject: 'body' // Inject all scripts into the body &#125;)] my-index.html 文件123456789&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/&gt; &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 如果你有模板加载器，可以使用它来解析这个模板。123456789101112module: &#123; loaders: [ &#123; test: /\\.hbs$/, loader: \"handlebars\" &#125; ]&#125;,plugins: [ new HtmlWebpackPlugin(&#123; title: 'Custom template using Handlebars', template: 'my-index.hbs', inject: 'body' &#125;)] 另外，如果你的模式是一个字符串，可以使用 templateContent 传递它。123456plugins: [ new HtmlWebpackPlugin(&#123; inject: true, templateContent: templateContentString &#125;)] 如果 inject 特性不适合你的需要，你希望完全控制资源放置。 可以直接使用 lodash 语法，使用 default template 作为起点创建自己的模板。 templateContent 选项也可以是一个函数，以便使用其它语言，比如 jade：12345678plugins: [ new HtmlWebpackPlugin(&#123; templateContent: function(templateParams, compilation) &#123; // Return your template content synchronously here return '..'; &#125; &#125;)] 或者异步版本12345678plugins: [ new HtmlWebpackPlugin(&#123; templateContent: function(templateParams, compilation, callback) &#123; // Return your template content asynchronously here callback(null, '..'); &#125; &#125;)] 注意，如果同时使用 template 和 templateContent ，插件会抛出错误。 htmlWebpackPlugin: 这个插件的相关数据 htmlWebpackPlugin.files: 资源的块名，来自 webpack 的 stats 对象，包含来自 entry 的从 entry point name 到 bundle 文件名映射。12345678910111213141516\"htmlWebpackPlugin\": &#123; \"files\": &#123; \"css\": [ \"main.css\" ], \"js\": [ \"assets/head_bundle.js\", \"assets/main_bundle.js\"], \"chunks\": &#123; \"head\": &#123; \"entry\": \"assets/head_bundle.js\", \"css\": [ \"main.css\" ] &#125;, \"main\": &#123; \"entry\": \"assets/main_bundle.js\", \"css\": [] &#125;, &#125; &#125;&#125; 如果在 webpack 配置文件中，你配置了 publicPath，将会反射正确的资源 htmlWebpackPlugin.options: 传递给插件的配置。 webpack: webpack 的 stats 对象。 webpackConfig: webpack 配置信息。 过滤块可以使用 chunks 来限定特定的块。12345plugins: [ new HtmlWebpackPlugin(&#123; chunks: ['app'] &#125;)] 还可以使用 excludeChunks 来排除特定块。12345plugins: [ new HtmlWebpackPlugin(&#123; excludeChunks: ['dev-helper'] &#125;)] 事件通过事件允许其它插件来扩展 HTML。 html-webpack-plugin-before-html-processing html-webpack-plugin-after-html-processing html-webpack-plugin-after-emit使用方式：1234compilation.plugin('html-webpack-plugin-before-html-processing', function(htmlPluginData, callback) &#123; htmlPluginData.html += 'The magic footer'; callback();&#125;); 完整的插件代码如下所示。1234567891011121314151617function MyPlugin(options) &#123;this.options = options;&#125;MyPlugin.prototype.apply = function(compiler) &#123; var paths = this.options.paths; compiler.plugin('compilation', function(compilation, options) &#123; compilation.plugin('html-webpack-plugin-before-html-processing', function(htmlPluginData, callback) &#123; for (var i = paths.length - 1; i &gt;= 0; i--) &#123; htmlPluginData.assets.js.unshift(paths[i]); &#125; callback(null, htmlPluginData); &#125;); &#125;);&#125;;module.exports = MyPlugin; 最后一行是导出我们的插件。","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"webpack","slug":"webpack","permalink":"http://litten.github.io/tags/webpack/"},{"name":"笔记","slug":"笔记","permalink":"http://litten.github.io/tags/笔记/"},{"name":"框架搭建","slug":"框架搭建","permalink":"http://litten.github.io/tags/框架搭建/"},{"name":"html-webpack-plugin","slug":"html-webpack-plugin","permalink":"http://litten.github.io/tags/html-webpack-plugin/"}]},{"title":"修改仓库地址","slug":"2016-10-25","date":"2016-10-25T01:38:04.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/10/25/2016-10-25/","link":"","permalink":"http://litten.github.io/2016/10/25/2016-10-25/","excerpt":"修改仓库地址 清除git项目仓库地址git remote rm origin 添加git项目仓库地址git remote add origin http://example.git","text":"修改仓库地址 清除git项目仓库地址git remote rm origin 添加git项目仓库地址git remote add origin http://example.git npm 常用包 安装webpack : npm install --save-dev webpack 安装webpack构建本地服务器 :npm install --save-dev webpack-dev-server 安装babel : npm install --save-dev babel-loader babel-core 安装样式加载模块：npm install --save-dev style-loader css-loader","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"webpack","slug":"webpack","permalink":"http://litten.github.io/tags/webpack/"},{"name":"笔记","slug":"笔记","permalink":"http://litten.github.io/tags/笔记/"},{"name":"框架搭建","slug":"框架搭建","permalink":"http://litten.github.io/tags/框架搭建/"}]},{"title":"前段框架搭建汇总-①","slug":"2016-10-21-1","date":"2016-10-21T06:45:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/10/21/2016-10-21-1/","link":"","permalink":"http://litten.github.io/2016/10/21/2016-10-21-1/","excerpt":"框架搭建过程！","text":"框架搭建过程！ 安装Webpack Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为ProjectName），在终端中转到该文件夹后执行下述指令就可以完成安装。 1234//全局安装npm install -g webpack//安装到你的项目目录npm install --save-dev webpack 初始化项目在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用npm init命令可以自动创建这个package.json文件 123mkdir ProjectNamecd ProjectNamenpm init //自动创建这个package.json 输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。 package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包 12// 安装Webpacknpm install --save-dev webpack 创建项目文件夹及其入口文件回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹， app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示 12345mkdir app publiccd apptouch main.js Greeter.jscd ../publictouch index.html 此时项目结构如下图所示 index.html文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Webpack Sample Project&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id='root'&gt; &lt;/div&gt; &lt;script src=\"bundle.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Greeter.js只包括一个用来返回包含问候信息的html元素的函数。123456// Greeter.jsmodule.exports = function() &#123; var greet = document.createElement('div'); greet.textContent = \"Hi there and greetings!\"; return greet;&#125;; main.js用来把Greeter模块返回的节点插入页面。123//main.jsvar greeter = require('./Greeter.js');document.getElementById('root').appendChild(greeter()); 正式使用Webpackwebpack可以在终端中使用，其最基础的命令是1webpack &#123;entry file/入口文件&#125; &#123;destination for bundled file/存放bundle.js的地方&#125; 只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，不过需要注意的是 如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址. 继续上面的例子，在终端中属于如下命令:12//webpack非全局安装的情况node_modules/.bin/webpack app/main.js public/bundle.js 结果如下可以看出webpack同时编译了main.js和Greeter.js,现在打开index.html,可以看到如下结果有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。 通过配置文件来使用WebpackWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。 还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。1234567module.exports = &#123; entry: __dirname + \"/app/main.js\",//已多次提及的唯一入口文件 output: &#123; path: __dirname + \"/public\",//打包后的文件存放的地方 filename: \"bundle.js\"//打包后输出文件的文件名 &#125;&#125; 注：__dirname 是node.js中的一个全局变量，它指向当前执行脚本所在的目录。 现在如果你需要打包文件只需要在终端里你运行webpack(非全局安装需使用node_modules/.bin/webpack)命令就可以了，这条命令会自动参考webpack.config.js文件中的配置选项打包你的项目。 又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用node_modules/.bin/webpack)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。 更快捷的执行打包任务执行类似于node_modules/.bin/webpack这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的npm start命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。12345678910111213&#123; \"name\": \"webpack-sample-project\", \"version\": \"1.0.0\", \"description\": \"Sample webpack project\", \"scripts\": &#123; \"start\": \"webpack\" //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令 &#125;, \"author\": \"zhang\", \"license\": \"ISC\", \"devDependencies\": &#123; \"webpack\": \"^1.12.9\" &#125;&#125; 注：package.json中的脚本部分已经默认在命令前添加了node_modules/.bin路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。 npm的start是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用npm start就可以执行相关命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用npm run {script name}如npm run build，以下是执行npm start后命令行的输出显示现在只需要使用npm start就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。 Webpack的强大功能生成Source Maps（使调试更容易）开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下： devtool选项 配置结果 source-map 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度； cheap-module-source-map 在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便； eval-source-map 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项； cheap-module-eval-source-map 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和eval-source-map选项具有相似的缺点； 正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。在学习阶段以及在小到中性的项目上，eval-source-map是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置12345678module.exports = &#123; devtool: 'eval-source-map',//配置生成Source Maps，选择合适的选项 entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/public\", filename: \"bundle.js\" &#125;&#125; cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。 使用webpack构建本地服务器想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖1npm install --save-dev webpack-dev-server devserver作为webpack配置选项中的一项，具有以下配置选项 devserver配置选项 功能描述 contentBase 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录） port 设置默认监听端口，如果省略，默认为8080 inline 设置为true，当源文件改变时会自动刷新页面 colors 设置为true，使终端输出的文件为彩色的 historyApiFallback 在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html 继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示12345678910111213141516module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/public\", filename: \"bundle.js\" &#125;, devServer: &#123; contentBase: \"./public\",//本地服务器所加载的页面所在的目录 colors: true,//终端中输出结果为彩色 historyApiFallback: true,//不跳转 inline: true//实时刷新 &#125;&#125; Loaders鼎鼎大名的Loaders登场了！Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。 Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面： test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须） loader：loader的名称（必须） include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）； query：为loaders提供额外的设置选项（可选） 继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下12//安装可以装换JSON的loadernpm install --save-dev json-loader 12345678910111213141516171819202122232425module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/public\", filename: \"bundle.js\" &#125;, module: &#123;//在配置文件里添加JSON loader loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125; ] &#125;, devServer: &#123; contentBase: \"./public\", colors: true, historyApiFallback: true, inline: true &#125;&#125; 创建带有问候信息的JSON文件(命名为config.json)1234//config.json&#123; \"greetText\": \"Hi there and greetings from JSON!\"&#125; 更新后的Greeter.js1234567var config = require('./config.json');module.exports = function() &#123; var greet = document.createElement('div'); greet.textContent = config.greetText; return greet;&#125;; Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。 BabelBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持； 使用基于JavaScript进行了拓展的语言，比如React的JSX Babel的安装与配置Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。 我们先来一次性安装这些依赖包12// npm一次性安装多个依赖模块，模块之间用空格隔开npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react 在webpack中配置Babel的方法如下123456789101112131415161718192021222324252627282930313233module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/public\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel',//在webpack的module部分的loaders里进行配置即可 query: &#123; presets: ['es2015','react'] &#125; &#125; ] &#125;, devServer: &#123; contentBase: \"./public\", colors: true, historyApiFallback: true, inline: true &#125;&#125; 现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM1npm install --save react react-dom 使用ES6的语法，更新Greeter.js并返回一个React组件123456789101112131415//Greeter,jsimport React, &#123;Component&#125; from 'react'import config from './config.json';class Greeter extends Component&#123; render() &#123; return ( &lt;div&gt; &#123;config.greetText&#125; &lt;/div&gt; ); &#125;&#125;export default Greeter 使用ES6的模块定义和渲染Greeter模块12345import React from 'react';import &#123;render&#125; from 'react-dom';import Greeter from './Greeter';render(&lt;Greeter /&gt;, document.getElementById('root')); Babel的配置选项Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：1234567891011121314151617181920212223242526// webpack.config.jsmodule.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/public\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125; ] &#125;, devServer: &#123;...&#125; // Omitted for brevity&#125; 1234//.babelrc&#123; \"presets\": [\"react\", \"es2015\"]&#125; 到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。 一切皆模块Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。 CSSwebpack提供两个工具处理样式表，css-loader 和style-loader，二者处理的任务不同，css-loader使你能够使用类似@import和url(...)的方法实现require()的功能,style-loader将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。 继续上面的例子12//安装npm install --save-dev style-loader css-loader 123456789101112131415161718192021222324252627282930//使用module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/build\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: 'style!css'//添加对样式表的处理 &#125; ] &#125;, devServer: &#123;...&#125;&#125; 注：感叹号的作用在于使同一文件能够使用不同类型的loader接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式12345678910111213141516171819html &#123; box-sizing: border-box; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%;&#125;*, *:before, *:after &#123; box-sizing: inherit;&#125;body &#123; margin: 0; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;&#125;h1, h2, h3, h4, h5, h6, p, ul &#123; margin: 0; padding: 0;&#125; 你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下 12345678//main.jsimport React from 'react';import &#123;render&#125; from 'react-dom';import Greeter from './Greeter';import './main.css';//使用require导入css文件render(&lt;Greeter /&gt;, document.getElementById('root')); 通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。 CSS module在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。 最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下 1234567891011121314151617181920212223242526module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123;...&#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: 'style!css?modules'//跟前面相比就在后面加上了?modules &#125; ] &#125;, devServer: &#123;...&#125;&#125; 创建一个Greeter.css文件 12345.root &#123; background-color: #eee; padding: 10px; border: 3px solid #ccc;&#125; 导入.root到Greeter.js中 123456789101112131415import React, &#123;Component&#125; from 'react';import config from './config.json';import styles from './Greeter.css';//导入class Greeter extends Component&#123; render() &#123; return ( &lt;div className=&#123;styles.root&#125;&gt;//添加类名 &#123;config.greetText&#125; &lt;/div&gt; ); &#125;&#125;export default Greeter 放心使用把，相同的类名也不会造成不同组件之间的污染。CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息 CSS预处理器Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders Less Loader Sass Loader Stylus Loader 不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其CSS官方文档可了解更多相关知识。举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。 首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）1npm install --save-dev postcss-loader autoprefixer 接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。123456789101112131415161718192021222324252627282930//webpack配置文件module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123;...&#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: 'style!css?modules!postcss' &#125; ] &#125;, postcss: [ require('autoprefixer')//调用autoprefixer插件 ], devServer: &#123;...&#125;&#125; 到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins 插件（Plugins）插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。 Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。 使用插件的方法要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。 12345678910111213141516171819202122232425//webpack.config.jsvar webpack = require('webpack');module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123;...&#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: 'style!css?modules!postcss' &#125;//这里添加PostCSS ] &#125;, postcss: [ require('autoprefixer') ], plugins: [ new webpack.BannerPlugin(\"Copyright Flying Unicorns inc.\")//在这个数组中new一个就可以了 ], devServer: &#123;...&#125;&#125; 打包后的JS文件bundle.js将会添加版本信息。知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件 HtmlWebpackPlugin这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。 安装1npm install --save-dev html-webpack-plugin 这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变： 移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。 在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码如下 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Webpack Sample Project&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id='root'&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件 1234567891011121314151617181920212223242526272829303132333435var webpack = require('webpack');var HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/build\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: 'style!css?modules!postcss' &#125; ] &#125;, postcss: [ require('autoprefixer') ], plugins: [ new HtmlWebpackPlugin(&#123; template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数 &#125;) ], devServer: &#123; colors: true, historyApiFallback: true, inline: true &#125;&#125; Hot Module ReplacementHot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。在webpack中实现HMR也很简单，只需要做两项配置 在webpack配置文件中添加HMR插件； 在Webpack Dev Server中添加“hot”参数； 不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。 整理下我们的思路，具体实现方法如下 Babel和webpack是独立的工具 二者可以一起工作 二者都可以通过插件拓展功能 HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额； Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作； 更新我们的例子来实际看看如何配置12345678910111213141516171819202122232425262728293031323334353637//webpack中的配置var webpack = require('webpack');var HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123; devtool: 'eval-source-map', entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/build\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: 'style!css?modules!postcss' &#125; ] &#125;, postcss: [ require('autoprefixer') ], plugins: [ new HtmlWebpackPlugin(&#123; template: __dirname + \"/app/index.tmpl.html\" &#125;), new webpack.HotModuleReplacementPlugin()//热加载插件 ], devServer: &#123; colors: true, historyApiFallback: true, inline: true, hot: true &#125;&#125; 安装react-transform-hmr1npm install --save-dev babel-plugin-react-transform react-transform-hmr 配置Babel12345678910111213141516&#123; \"presets\": [\"react\", \"es2015\"], \"env\": &#123; \"development\": &#123; \"plugins\": [[\"react-transform\", &#123; \"transforms\": [&#123; \"transform\": \"react-transform-hmr\", \"imports\": [\"react\"], \"locals\": [\"module\"] &#125;] &#125;]] &#125; &#125;&#125; 现在当你使用React时，可以热加载模块了 产品阶段的构建目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。 对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下 1234567891011121314151617181920212223242526272829303132333435363738var webpack = require('webpack');var HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123; entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/build\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: 'style!css?modules!postcss' &#125; ] &#125;, postcss: [ require('autoprefixer') ], plugins: [ new HtmlWebpackPlugin(&#123; template: __dirname + \"/app/index.tmpl.html\" &#125;), ],&#125; package.json1234567891011121314//package.json&#123; \"name\": \"webpack-sample-project\", \"version\": \"1.0.0\", \"description\": \"Sample webpack project\", \"scripts\": &#123; \"start\": \"webpack-dev-server --progress\", \"build\": \"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\" &#125;, \"author\": \"Cássio Zen\", \"license\": \"ISC\", \"devDependencies\": &#123;...&#125;, \"dependencies\": &#123;...&#125;&#125; 优化插件webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能 OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID UglifyJsPlugin：压缩JS代码； ExtractTextPlugin：分离CSS和JS文件 我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们1npm install --save-dev extract-text-webpack-plugin 在配置文件的plugins后引用它们1234567891011121314151617181920212223242526272829303132333435363738394041var webpack = require('webpack');var HtmlWebpackPlugin = require('html-webpack-plugin');var ExtractTextPlugin = require('extract-text-webpack-plugin');module.exports = &#123; entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/build\", filename: \"bundle.js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: ExtractTextPlugin.extract('style', 'css?modules!postcss') &#125; ] &#125;, postcss: [ require('autoprefixer') ], plugins: [ new HtmlWebpackPlugin(&#123; template: __dirname + \"/app/index.tmpl.html\" &#125;), new webpack.optimize.OccurenceOrderPlugin(), new webpack.optimize.UglifyJsPlugin(), new ExtractTextPlugin(\"style.css\") ]&#125; 缓存缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变） webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前 1234567891011121314151617181920212223242526272829303132333435363738394041var webpack = require('webpack');var HtmlWebpackPlugin = require('html-webpack-plugin');var ExtractTextPlugin = require('extract-text-webpack-plugin');module.exports = &#123; entry: __dirname + \"/app/main.js\", output: &#123; path: __dirname + \"/build\", filename: \"[name]-[hash].js\" &#125;, module: &#123; loaders: [ &#123; test: /\\.json$/, loader: \"json\" &#125;, &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;, &#123; test: /\\.css$/, loader: ExtractTextPlugin.extract('style', 'css?modules!postcss') &#125; ] &#125;, postcss: [ require('autoprefixer') ], plugins: [ new HtmlWebpackPlugin(&#123; template: __dirname + \"/app/index.tmpl.html\" &#125;), new webpack.optimize.OccurenceOrderPlugin(), new webpack.optimize.UglifyJsPlugin(), new ExtractTextPlugin(\"[name]-[hash].css\") ]&#125; 现在用户会有合理的缓存了。 总结这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到本文的英文版Webpack for React，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。 点击查看 本文的英文版Webpack for React点击查看 原本","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"webpack","slug":"webpack","permalink":"http://litten.github.io/tags/webpack/"},{"name":"笔记","slug":"笔记","permalink":"http://litten.github.io/tags/笔记/"},{"name":"框架搭建","slug":"框架搭建","permalink":"http://litten.github.io/tags/框架搭建/"}]},{"title":"GIT同时配置两个SSH","slug":"2016-10-21","date":"2016-10-21T03:24:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/10/21/2016-10-21/","link":"","permalink":"http://litten.github.io/2016/10/21/2016-10-21/","excerpt":"个人需要配置一个公司的GitLab以及一个Github两个SSH!","text":"个人需要配置一个公司的GitLab以及一个Github两个SSH! 先按照GitLab 官网配置github的SSH。 之后添加公司SSH.执行一下命令： 123ssh-keygen -t rsa -C 'myusername@mycompanyname.com'# 然后会让你输入文件名，可以输入 `id_rsa_mycompanyname`# 然后一路回车就行 将生成的两个文件 id_rsa_mycompanyname 和 id_rsa_mycompanyname.pub 拷贝到目录 \\.ssh 下。 在目录.ssh 下找到文件 config ，如果没有这个文件，则新建一个，切记，这个文件没有后缀名！ 在 config 里加入如下内容： 123456789101112#默认github github user(myusername@mygithubMail.com)Host github HostName github.com User git IdentityFile ~/.ssh/id_rsa# 公司gitLab 修改HostName user(myusername@mycompanyname.com)Host git.myone.com HostName git.myone.com User git Port 22 IdentityFile ~/.ssh/id_rsa_mycompanyname 将这个生成的 id_rsa_mycompanyname.pub 的内容加入到 gitlab上的SSH上后，即可使用！此时，github和gitlab 都可正常使用。如果有其他的网站，也可以按照这种方法继续处理。每一个 ssh的生成都要对应站点使用的email 。","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"GIT","slug":"GIT","permalink":"http://litten.github.io/tags/GIT/"},{"name":"SSH","slug":"SSH","permalink":"http://litten.github.io/tags/SSH/"}]},{"title":"博客主题修改部署问题","slug":"2016-10-17","date":"2016-10-12T00:55:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/10/12/2016-10-17/","link":"","permalink":"http://litten.github.io/2016/10/12/2016-10-17/","excerpt":"原博客主题修改完成后报错，及其决绝办法！","text":"原博客主题修改完成后报错，及其决绝办法！ 原博客主题修改完成后报以下错： 123456789101112131415161718192021222324upsmart@upsmart-pc:~/myone$ hexo sINFO Start processingFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC at exports._errnoException (util.js:896:11) at FSWatcher.start (fs.js:1423:19) at Object.fs.watch (fs.js:1450:11) at createFsWatchInstance (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:37:15) at setFsWatchListener (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:80:15) at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:228:14) at FSWatcher.NodeFsHandler._handleFile (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:255:21) at FSWatcher.&lt;anonymous&gt; (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:473:21) at FSReqWrap.oncomplete (fs.js:117:15)FATAL watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPCError: watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC at exports._errnoException (util.js:896:11) at FSWatcher.start (fs.js:1423:19) at Object.fs.watch (fs.js:1450:11) at createFsWatchInstance (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:37:15) at setFsWatchListener (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:80:15) at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:228:14) at FSWatcher.NodeFsHandler._handleFile (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:255:21) at FSWatcher.&lt;anonymous&gt; (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:473:21) at FSReqWrap.oncomplete (fs.js:117:15) 看出是node_modules 里面的文件出错，但实际部署不需要，使用命令移除：1rimraf node_modules 安装rimraf1sudo apt-get install node-rimraf","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"博客","slug":"博客","permalink":"http://litten.github.io/tags/博客/"},{"name":"经验","slug":"经验","permalink":"http://litten.github.io/tags/经验/"}]},{"title":"Editor","slug":"2016-10-13","date":"2016-09-12T00:55:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/09/12/2016-10-13/","link":"","permalink":"http://litten.github.io/2016/09/12/2016-10-13/","excerpt":"Editor.mdmd示例～","text":"Editor.mdmd示例～ 目录 (Table of Contents) [TOCM] [TOC] Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6Heading 1 link Heading linkHeading 2 link Heading linkHeading 3 link Heading linkHeading 4 link Heading link Heading link Heading linkHeading 5 link Heading linkHeading 6 link Heading link标题（用底线的形式）Heading (underline)This is an H1This is an H2字符效果和横线等 删除线 删除线（开启识别HTML标签时）斜体字 斜体字粗体 粗体粗斜体 粗斜体 上标：X2，下标：O2 缩写(同HTML的abbr标签) 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启 The HTML specification is maintained by the W3C. 引用 Blockquotes 引用文本 Blockquotes 引用的行内混合 Blockquotes 引用：如果想要插入空白换行即&lt;br /&gt;标签，在插入处先键入两个以上的空格然后回车即可，普通链接。 锚点与链接 Links普通链接 普通链接带标题 直接链接：https://github.com 锚点链接 mailto:test.test@gmail.com GFM a-tail link @pandao 邮箱地址自动链接 test.test@gmail.com www@vip.qq.com @pandao 多语言代码高亮 Codes行内代码 Inline code执行命令：npm install marked 缩进风格即缩进四个空格，也做为实现类似 &lt;pre&gt; 预格式化文本 ( Preformatted Text ) 的功能。 &lt;?php echo &quot;Hello world!&quot;; ?&gt; 预格式化文本： | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | JS代码 123456789101112131415161718192021222324252627282930313233343536function test() &#123; console.log(\"Hello world!\");&#125;(function()&#123; var box = function() &#123; return box.fn.init(); &#125;; box.prototype = box.fn = &#123; init : function()&#123; console.log('box.init()'); return this; &#125;, add : function(str) &#123; alert(\"add\", str); return this; &#125;, remove : function(str) &#123; alert(\"remove\", str); return this; &#125; &#125;; box.fn.init.prototype = box.fn; window.box =box;&#125;)();var testBox = box();testBox.add(\"jQuery\").remove(\"jQuery\"); HTML 代码 HTML codes1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=\"utf-8\" /&gt; &lt;meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;style type=\"text/css\"&gt; body&#123;font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;&#125; ul&#123;list-style: none;&#125; img&#123;border:none;vertical-align: middle;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 class=\"text-xxl\"&gt;Hello world!&lt;/h1&gt; &lt;p class=\"text-green\"&gt;Plain text&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 图片 ImagesImage: Follow your heart. 图为：厦门白城沙滩 图片加链接 (Image + Link)： 图为：李健首张专辑《似水流年》封面 列表 Lists无序列表（减号）Unordered Lists (-) 列表一 列表二 列表三 无序列表（星号）Unordered Lists (*) 列表一 列表二 列表三 无序列表（加号和嵌套）Unordered Lists (+) 列表一 列表二 列表二-1 列表二-2 列表二-3 列表三 列表一 列表二 列表三 有序列表 Ordered Lists (-) 第一行 第二行 第三行 GFM task list [x] GFM task list 1 [x] GFM task list 2 [ ] GFM task list 3 [ ] GFM task list 3-1 [ ] GFM task list 3-2 [ ] GFM task list 3-3 [ ] GFM task list 4 [ ] GFM task list 4-1 [ ] GFM task list 4-2 绘制表格 Tables 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 First Header Second Header Content Cell Content Cell Content Cell Content Cell First Header Second Header Content Cell Content Cell Content Cell Content Cell Function name Description help() Display the help window. destroy() Destroy your computer! Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 Item Value Computer $1600 Phone $12 Pipe $1 特殊符号 HTML Entities Codes&copy; &amp; &uml; &trade; &iexcl; &pound;&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo; 18&ordm;C &quot; &apos; [========] Emoji表情 :smiley: Blockquotes :star: GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x: [x] :smiley: @mentions, :smiley: #refs, links, formatting, and tags supported :editormd-logo:; [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:; [x] [ ] :smiley: this is a complete item :smiley:; [ ] []this is an incomplete item test link :fa-star: @pandao; [ ] [ ]this is an incomplete item :fa-star: :fa-gear:; [ ] :smiley: this is an incomplete item test link :fa-star: :fa-gear:; [ ] :smiley: this is :fa-star: :fa-gear: an incomplete item test link; 反斜杠 Escape*literal asterisks* [========] 科学公式 TeX(KaTeX)$$E=mc^2$$ 行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。 $$x &gt; y$$ $$(\\sqrt{3x-1}+(1+x)^2)$$ $$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$ 多行公式： 12345\\displaystyle\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2\\leq\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right) 123456789\\displaystyle \\frac&#123;1&#125;&#123; \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123; \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123; 1+\\frac&#123;e^&#123;-6\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125; &#123;1+\\cdots&#125; &#125; &#125; &#125; 123f(x) = \\int_&#123;-\\infty&#125;^\\infty \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125; \\,d\\xi 分页符 Page break Print Test: Ctrl + P [========] 绘制流程图 Flowchart12345678st=&gt;start: 用户登陆op=&gt;operation: 登陆操作cond=&gt;condition: 登陆成功 Yes or No?e=&gt;end: 进入后台st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op [========] 绘制序列图 Sequence Diagram1234Andrew-&gt;China: Says HelloNote right of China: China thinks\\nabout itChina--&gt;Andrew: How are you?Andrew-&gt;&gt;China: I am good thanks! End","categories":[],"tags":[{"name":"Editor","slug":"Editor","permalink":"http://litten.github.io/tags/Editor/"}]},{"title":"node 安装","slug":"2016-10-17-1","date":"2016-07-12T00:55:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/07/12/2016-10-17-1/","link":"","permalink":"http://litten.github.io/2016/07/12/2016-10-17-1/","excerpt":"卸载node $ nvm uninstall –lts$ sudo apt-get remove nodejs$ apt-get autoremove nodejs","text":"卸载node $ nvm uninstall –lts$ sudo apt-get remove nodejs$ apt-get autoremove nodejs 删除node $ sudo find ~/ -name &lt;查找的文件名字&gt; 删除npm 安装nvm $ curl -o- https:###raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash 将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中12export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; . \"$NVM_DIR/nvm.sh\" # This loads nvm 应用源文件 $ source /.bashrc, ~/.profile, or ~/.zshrc 验证安装是否成功 $ command -v nvm 查看所有的node版本 $ nvm ls-remote 安装node版本 $ nvm install –lts 查看安装是否成功 $ node -v$ npm -v 安装hexo $ npm install -g hexo-cli 初始化博客信息 $ hexo init $ cd 安装博客需要的插件 $ npm install 生成静态页面 $ hexo generate（hexo g也可以） 本地启动 $ hexo serverHexo is running at http://localhost:4000/. Press Ctrl+C to stop. 建立Repository gedit _config.yml 1234deploy: type: git repo: git@github.com:myoneray/myoneray.github.com.git branch: master 然后执行命令： npm install hexo-deployer-git –save 设置当前node版本 nvm use –delete-prefix v6.0.0 设置当前默认的node版本nvm alias default v6.0.0 获取npm 安装的路径npm config get prefix 查看当前PATHecho $PATH 安装treesudo apt-get install tree 显示所有的npm 默认配置npm config ls -l 显示npm配置npm config list npm找不到n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"npm","slug":"npm","permalink":"http://litten.github.io/tags/npm/"},{"name":"node","slug":"node","permalink":"http://litten.github.io/tags/node/"},{"name":"nvm","slug":"nvm","permalink":"http://litten.github.io/tags/nvm/"}]},{"title":"npm","slug":"2016-10-17-2","date":"2016-02-17T00:55:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/02/17/2016-10-17-2/","link":"","permalink":"http://litten.github.io/2016/02/17/2016-10-17-2/","excerpt":"淘宝镜像： –registry=https://registry.npm.taobao.org","text":"淘宝镜像： –registry=https://registry.npm.taobao.org 镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）: 1.通过config命令 npm config set registry https://registry.npm.taobao.orgnpm info underscore （如果上面配置正确这个命令会有字符串response） 2.命令行指定 npm –registry https://registry.npm.taobao.org info underscore 3.编辑 ~/.npmrc 加入下面内容 registry = https://registry.npm.taobao.org 命令安装包，默认会安装最新的版本 npm install gulp 安装指定版本 npm install gulp@3.9.1 -S, –save 安装包信息将加入到dependencies（生产阶段的依赖） npm install gulp –save 或 npm install gulp -S package.json 文件的 dependencies 字段：123\"dependencies\": &#123; \"gulp\": \"^3.9.1\"&#125; -D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它 npm install gulp –save-dev 或 npm install gulp -Dpackage.json 文件的 devDependencies字段：123\"devDependencies\": &#123; \"gulp\": \"^3.9.1\"&#125; -O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖） npm install gulp –save-optional 或 npm install gulp -Opackage.json 文件的optionalDependencies字段：123\"optionalDependencies\": &#123; \"gulp\": \"^3.9.1\"&#125; -E, –save-exact 精确安装指定模块版本 npm install gulp –save-exact 或 npm install gulp -E输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了123\"dependencies\": &#123; \"gulp\": \"3.9.1\"&#125; 模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包 npm install 本地安装（local） npm install gulp 全局安装（global）,使用 -g 或 –global npm install gulp -gnpm uninstall 卸载模块 基础语法 npm uninstall [&lt;@scope&gt;/][@]… [-S|–save|-D|–save-dev|-O|–save-optional]aliases: remove, rm, r, un, unlink 如卸载开发版本的模块 npm uninstall gulp –save-dev","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"note","slug":"note","permalink":"http://litten.github.io/tags/note/"},{"name":"npm","slug":"npm","permalink":"http://litten.github.io/tags/npm/"}]},{"title":"特效展示","slug":"hello-world","date":"2016-02-17T00:55:00.000Z","updated":"2016-12-07T06:18:27.536Z","comments":true,"path":"2016/02/17/hello-world/","link":"","permalink":"http://litten.github.io/2016/02/17/hello-world/","excerpt":"","text":"无标题文档 body { padding:0; margin:0; overflow:hidden; } canvas { padding:0; margin:0; height: 600px; width: 1000px; } div.btnbg { position:fixed; left:0; top:0; } uniform mat4 uProjection; uniform mat4 uModelview; uniform vec3 uResolution; uniform vec3 uOffset; uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start attribute vec3 aPosition; attribute vec3 aEuler; attribute vec2 aMisc; //x:size, y:fade varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; void main(void) { // Projection is based on vertical angle vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0); gl_Position = uProjection * pos; gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5; pposition = pos.xyz; psize = aMisc.x; pdist = length(pos.xyz); palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z); vec3 elrsn = sin(aEuler); vec3 elrcs = cos(aEuler); mat3 rotx = mat3( 1.0, 0.0, 0.0, 0.0, elrcs.x, elrsn.x, 0.0, -elrsn.x, elrcs.x ); mat3 roty = mat3( elrcs.y, 0.0, -elrsn.y, 0.0, 1.0, 0.0, elrsn.y, 0.0, elrcs.y ); mat3 rotz = mat3( elrcs.z, elrsn.z, 0.0, -elrsn.z, elrcs.z, 0.0, 0.0, 0.0, 1.0 ); mat3 rotmat = rotx * roty * rotz; normal = rotmat[2]; mat3 trrotm = mat3( rotmat[0][0], rotmat[1][0], rotmat[2][0], rotmat[0][1], rotmat[1][1], rotmat[2][1], rotmat[0][2], rotmat[1][2], rotmat[2][2] ); normX = trrotm[0]; normY = trrotm[1]; normZ = trrotm[2]; const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237); float tmpdfs = dot(lit, normal); if(tmpdfs < 0.0) { normal = -normal; tmpdfs = dot(lit, normal); } diffuse = 0.4 + tmpdfs; vec3 eyev = normalize(-pos.xyz); if(dot(eyev, normal) > 0.0) { vec3 hv = normalize(eyev + lit); specular = pow(max(dot(hv, normal), 0.0), 20.0); } else { specular = 0.0; } rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0); rstop = pow(rstop, 0.5); //-0.69315 = ln(0.5) distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y)); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec3 uDOF; //x:focus distance, y:focus radius, z:max radius uniform vec3 uFade; //x:start distance, y:half distance, z:near fade start const vec3 fadeCol = vec3(0.08, 0.03, 0.06); varying vec3 pposition; varying float psize; varying float palpha; varying float pdist; //varying mat3 rotMat; varying vec3 normX; varying vec3 normY; varying vec3 normZ; varying vec3 normal; varying float diffuse; varying float specular; varying float rstop; varying float distancefade; float ellipse(vec2 p, vec2 o, vec2 r) { vec2 lp = (p - o) / r; return length(lp) - 1.0; } void main(void) { vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0; vec3 d = vec3(0.0, 0.0, -1.0); float nd = normZ.z; //dot(-normZ, d); if(abs(nd) < 0.0001) discard; float np = dot(normZ, p); vec3 tp = p + d * np / nd; vec2 coord = vec2(dot(normX, tp), dot(normY, tp)); //angle = 15 degree const float flwrsn = 0.258819045102521; const float flwrcs = 0.965925826289068; mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs); vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm; float r; if(flwrp.x < 0.0) { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5); } else { r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5); } if(r > rstop) discard; vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r); float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35)); col *= vec3(1.0, grady, grady); col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3)); col = col * diffuse + specular; col = mix(fadeCol, col, distancefade); float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0; alpha = smoothstep(0.0, 1.0, alpha) * palpha; gl_FragColor = vec4(col * 0.5, alpha); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform vec2 uTimes; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec3 col; float c; vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0); c = exp(-pow(length(tmpv) * 1.8, 2.0)); col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c); gl_FragColor = vec4(col * 0.5, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; uniform vec4 uBlurDir; //dir(x, y), stride(z, w) varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 col = texture2D(uSrc, texCoord); col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta); col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta); col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta); gl_FragColor = col / 5.0; } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_FragColor = texture2D(uSrc, texCoord); } uniform vec3 uResolution; attribute vec2 aPosition; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { gl_Position = vec4(aPosition, 0.0, 1.0); texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5); screenCoord = aPosition.xy * vec2(uResolution.z, 1.0); } #ifdef GL_ES //precision mediump float; precision highp float; #endif uniform sampler2D uSrc; uniform sampler2D uBloom; uniform vec2 uDelta; varying vec2 texCoord; varying vec2 screenCoord; void main(void) { vec4 srccol = texture2D(uSrc, texCoord) * 2.0; vec4 bloomcol = texture2D(uBloom, texCoord); vec4 col; col = srccol + bloomcol * (vec4(1.0) + srccol); col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5); col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2) gl_FragColor = vec4(col.rgb, 1.0); gl_FragColor.a = 1.0; } // Utilities var Vector3 = {}; var Matrix44 = {}; Vector3.create = function(x, y, z) { return {'x':x, 'y':y, 'z':z}; }; Vector3.dot = function (v0, v1) { return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z; }; Vector3.cross = function (v, v0, v1) { v.x = v0.y * v1.z - v0.z * v1.y; v.y = v0.z * v1.x - v0.x * v1.z; v.z = v0.x * v1.y - v0.y * v1.x; }; Vector3.normalize = function (v) { var l = v.x * v.x + v.y * v.y + v.z * v.z; if(l > 0.00001) { l = 1.0 / Math.sqrt(l); v.x *= l; v.y *= l; v.z *= l; } }; Vector3.arrayForm = function(v) { if(v.array) { v.array[0] = v.x; v.array[1] = v.y; v.array[2] = v.z; } else { v.array = new Float32Array([v.x, v.y, v.z]); } return v.array; }; Matrix44.createIdentity = function () { return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]); }; Matrix44.loadProjection = function (m, aspect, vdeg, near, far) { var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0; var w = h * aspect; m[0] = 2.0 * near / w; m[1] = 0.0; m[2] = 0.0; m[3] = 0.0; m[4] = 0.0; m[5] = 2.0 * near / h; m[6] = 0.0; m[7] = 0.0; m[8] = 0.0; m[9] = 0.0; m[10] = -(far + near) / (far - near); m[11] = -1.0; m[12] = 0.0; m[13] = 0.0; m[14] = -2.0 * far * near / (far - near); m[15] = 0.0; }; Matrix44.loadLookAt = function (m, vpos, vlook, vup) { var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z); Vector3.normalize(frontv); var sidev = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(sidev, vup, frontv); Vector3.normalize(sidev); var topv = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(topv, frontv, sidev); Vector3.normalize(topv); m[0] = sidev.x; m[1] = topv.x; m[2] = frontv.x; m[3] = 0.0; m[4] = sidev.y; m[5] = topv.y; m[6] = frontv.y; m[7] = 0.0; m[8] = sidev.z; m[9] = topv.z; m[10] = frontv.z; m[11] = 0.0; m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]); m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]); m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]); m[15] = 1.0; }; // var timeInfo = { 'start':0, 'prev':0, // Date 'delta':0, 'elapsed':0 // Number(sec) }; // var gl; var renderSpec = { 'width':0, 'height':0, 'aspect':1, 'array':new Float32Array(3), 'halfWidth':0, 'halfHeight':0, 'halfArray':new Float32Array(3) // and some render targets. see setViewport() }; renderSpec.setSize = function(w, h) { renderSpec.width = w; renderSpec.height = h; renderSpec.aspect = renderSpec.width / renderSpec.height; renderSpec.array[0] = renderSpec.width; renderSpec.array[1] = renderSpec.height; renderSpec.array[2] = renderSpec.aspect; renderSpec.halfWidth = Math.floor(w / 2); renderSpec.halfHeight = Math.floor(h / 2); renderSpec.halfArray[0] = renderSpec.halfWidth; renderSpec.halfArray[1] = renderSpec.halfHeight; renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight; }; function deleteRenderTarget(rt) { gl.deleteFramebuffer(rt.frameBuffer); gl.deleteRenderbuffer(rt.renderBuffer); gl.deleteTexture(rt.texture); } function createRenderTarget(w, h) { var ret = { 'width':w, 'height':h, 'sizeArray':new Float32Array([w, h, w / h]), 'dtxArray':new Float32Array([1.0 / w, 1.0 / h]) }; ret.frameBuffer = gl.createFramebuffer(); ret.renderBuffer = gl.createRenderbuffer(); ret.texture = gl.createTexture(); gl.bindTexture(gl.TEXTURE_2D, ret.texture); gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer); gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0); gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer); gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h); gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer); gl.bindTexture(gl.TEXTURE_2D, null); gl.bindRenderbuffer(gl.RENDERBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, null); return ret; } function compileShader(shtype, shsrc) { var retsh = gl.createShader(shtype); gl.shaderSource(retsh, shsrc); gl.compileShader(retsh); if(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) { var errlog = gl.getShaderInfoLog(retsh); gl.deleteShader(retsh); console.error(errlog); return null; } return retsh; } function createShader(vtxsrc, frgsrc, uniformlist, attrlist) { var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc); var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc); if(vsh == null || fsh == null) { return null; } var prog = gl.createProgram(); gl.attachShader(prog, vsh); gl.attachShader(prog, fsh); gl.deleteShader(vsh); gl.deleteShader(fsh); gl.linkProgram(prog); if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { var errlog = gl.getProgramInfoLog(prog); console.error(errlog); return null; } if(uniformlist) { prog.uniforms = {}; for(var i = 0; i < uniformlist.length; i++) { prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]); } } if(attrlist) { prog.attributes = {}; for(var i = 0; i < attrlist.length; i++) { var attr = attrlist[i]; prog.attributes[attr] = gl.getAttribLocation(prog, attr); } } return prog; } function useShader(prog) { gl.useProgram(prog); for(var attr in prog.attributes) { gl.enableVertexAttribArray(prog.attributes[attr]);; } } function unuseShader(prog) { for(var attr in prog.attributes) { gl.disableVertexAttribArray(prog.attributes[attr]);; } gl.useProgram(null); } ///// var projection = { 'angle':60, 'nearfar':new Float32Array([0.1, 100.0]), 'matrix':Matrix44.createIdentity() }; var camera = { 'position':Vector3.create(0, 0, 100), 'lookat':Vector3.create(0, 0, 0), 'up':Vector3.create(0, 1, 0), 'dof':Vector3.create(10.0, 4.0, 8.0), 'matrix':Matrix44.createIdentity() }; var pointFlower = {}; var meshFlower = {}; var sceneStandBy = false; var BlossomParticle = function () { this.velocity = new Array(3); this.rotation = new Array(3); this.position = new Array(3); this.euler = new Array(3); this.size = 1.0; this.alpha = 1.0; this.zkey = 0.0; }; BlossomParticle.prototype.setVelocity = function (vx, vy, vz) { this.velocity[0] = vx; this.velocity[1] = vy; this.velocity[2] = vz; }; BlossomParticle.prototype.setRotation = function (rx, ry, rz) { this.rotation[0] = rx; this.rotation[1] = ry; this.rotation[2] = rz; }; BlossomParticle.prototype.setPosition = function (nx, ny, nz) { this.position[0] = nx; this.position[1] = ny; this.position[2] = nz; }; BlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) { this.euler[0] = rx; this.euler[1] = ry; this.euler[2] = rz; }; BlossomParticle.prototype.setSize = function (s) { this.size = s; }; BlossomParticle.prototype.update = function (dt, et) { this.position[0] += this.velocity[0] * dt; this.position[1] += this.velocity[1] * dt; this.position[2] += this.velocity[2] * dt; this.euler[0] += this.rotation[0] * dt; this.euler[1] += this.rotation[1] * dt; this.euler[2] += this.rotation[2] * dt; }; function createPointFlowers() { // get point sizes var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); renderSpec.pointSize = {'min':prm[0], 'max':prm[1]}; var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent; var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent; pointFlower.program = createShader( vtxsrc, frgsrc, ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'], ['aPosition', 'aEuler', 'aMisc'] ); useShader(pointFlower.program); pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]); pointFlower.fader = Vector3.create(0.0, 10.0, 0.0); // paramerters: velocity[3], rotate[3] pointFlower.numFlowers = 1600; pointFlower.particles = new Array(pointFlower.numFlowers); // vertex attributes {position[3], euler_xyz[3], size[1]} pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2)); pointFlower.positionArrayOffset = 0; pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3; pointFlower.miscArrayOffset = pointFlower.numFlowers * 6; pointFlower.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(pointFlower.program); for(var i = 0; i < pointFlower.numFlowers; i++) { pointFlower.particles[i] = new BlossomParticle(); } } function initPointFlowers() { //area pointFlower.area = Vector3.create(20.0, 20.0, 20.0); pointFlower.area.x = pointFlower.area.y * renderSpec.aspect; pointFlower.fader.x = 10.0; //env fade start pointFlower.fader.y = pointFlower.area.z; //env fade half pointFlower.fader.z = 0.1; //near fade start //particles var PI2 = Math.PI * 2.0; var tmpv3 = Vector3.create(0, 0, 0); var tmpv = 0; var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);}; for(var i = 0; i < pointFlower.numFlowers; i++) { var tmpprtcl = pointFlower.particles[i]; //velocity tmpv3.x = symmetryrand() * 0.3 + 0.8; tmpv3.y = symmetryrand() * 0.2 - 1.0; tmpv3.z = symmetryrand() * 0.3 + 0.5; Vector3.normalize(tmpv3); tmpv = 2.0 + Math.random() * 1.0; tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv); //rotation tmpprtcl.setRotation( symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5 ); //position tmpprtcl.setPosition( symmetryrand() * pointFlower.area.x, symmetryrand() * pointFlower.area.y, symmetryrand() * pointFlower.area.z ); //euler tmpprtcl.setEulerAngles( Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0 ); //size tmpprtcl.setSize(0.9 + Math.random() * 0.1); } } function renderPointFlowers() { //update var PI2 = Math.PI * 2.0; var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z]; var repeatPos = function (prt, cmp, limit) { if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) { //out of area if(prt.position[cmp] > 0) { prt.position[cmp] -= limit * 2.0; } else { prt.position[cmp] += limit * 2.0; } } }; var repeatEuler = function (prt, cmp) { prt.euler[cmp] = prt.euler[cmp] % PI2; if(prt.euler[cmp] < 0.0) { prt.euler[cmp] += PI2; } }; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; prtcl.update(timeInfo.delta, timeInfo.elapsed); repeatPos(prtcl, 0, pointFlower.area.x); repeatPos(prtcl, 1, pointFlower.area.y); repeatPos(prtcl, 2, pointFlower.area.z); repeatEuler(prtcl, 0); repeatEuler(prtcl, 1); repeatEuler(prtcl, 2); prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5; prtcl.zkey = (camera.matrix[2] * prtcl.position[0] + camera.matrix[6] * prtcl.position[1] + camera.matrix[10] * prtcl.position[2] + camera.matrix[14]); } // sort pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;}); // update data var ipos = pointFlower.positionArrayOffset; var ieuler = pointFlower.eulerArrayOffset; var imisc = pointFlower.miscArrayOffset; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; pointFlower.dataArray[ipos] = prtcl.position[0]; pointFlower.dataArray[ipos + 1] = prtcl.position[1]; pointFlower.dataArray[ipos + 2] = prtcl.position[2]; ipos += 3; pointFlower.dataArray[ieuler] = prtcl.euler[0]; pointFlower.dataArray[ieuler + 1] = prtcl.euler[1]; pointFlower.dataArray[ieuler + 2] = prtcl.euler[2]; ieuler += 3; pointFlower.dataArray[imisc] = prtcl.size; pointFlower.dataArray[imisc + 1] = prtcl.alpha; imisc += 2; } //draw gl.enable(gl.BLEND); //gl.disable(gl.DEPTH_TEST); gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); var prog = pointFlower.program; useShader(prog); gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix); gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof)); gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader)); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT); // doubler for(var i = 1; i < 2; i++) { var zpos = i * -2.0; pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); } //main pointFlower.offset[0] = 0.0; pointFlower.offset[1] = 0.0; pointFlower.offset[2] = 0.0; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(prog); gl.enable(gl.DEPTH_TEST); gl.disable(gl.BLEND); } // effects //common util function createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) { var ret = {}; var unifs = ['uResolution', 'uSrc', 'uDelta']; if(exunifs) { unifs = unifs.concat(exunifs); } var attrs = ['aPosition']; if(exattrs) { attrs = attrs.concat(exattrs); } ret.program = createShader(vtxsrc, frgsrc, unifs, attrs); useShader(ret.program); ret.dataArray = new Float32Array([ -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0 ]); ret.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer); gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(ret.program); return ret; } // basic usage // useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize // gl.uniform**(...); //additional uniforms // drawEffect() // unuseEffect(prog) // TEXTURE0 makes src function useEffect(fxobj, srctex) { var prog = fxobj.program; useShader(prog); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); if(srctex != null) { gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray); gl.uniform1i(prog.uniforms.uSrc, 0); gl.activeTexture(gl.TEXTURE0); gl.bindTexture(gl.TEXTURE_2D, srctex.texture); } } function drawEffect(fxobj) { gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer); gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0); gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4); } function unuseEffect(fxobj) { unuseShader(fxobj.program); } var effectLib = {}; function createEffectLib() { var vtxsrc, frgsrc; //common var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent; //background frgsrc = document.getElementById(\"bg_fsh\").textContent; effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null); // make brightpixels buffer frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent; effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null); // direction blur frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent; effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null); //final composite vtxsrc = document.getElementById(\"pp_final_vsh\").textContent; frgsrc = document.getElementById(\"pp_final_fsh\").textContent; effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null); } // background function createBackground() { //console.log(\"create background\"); } function initBackground() { //console.log(\"init background\"); } function renderBackground() { gl.disable(gl.DEPTH_TEST); useEffect(effectLib.sceneBg, null); gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta); drawEffect(effectLib.sceneBg); unuseEffect(effectLib.sceneBg); gl.enable(gl.DEPTH_TEST); } // post process var postProcess = {}; function createPostProcess() { //console.log(\"create post process\"); } function initPostProcess() { //console.log(\"init post process\"); } function renderPostProcess() { gl.enable(gl.TEXTURE_2D); gl.disable(gl.DEPTH_TEST); var bindRT = function (rt, isclear) { gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer); gl.viewport(0, 0, rt.width, rt.height); if(isclear) { gl.clearColor(0, 0, 0, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); } }; //make bright buff bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.mkBrightBuf, renderSpec.mainRT); drawEffect(effectLib.mkBrightBuf); unuseEffect(effectLib.mkBrightBuf); // make bloom for(var i = 0; i < 2; i++) { var p = 1.5 + 1 * i; var s = 2.0 + 1 * i; bindRT(renderSpec.wHalfRT1, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT0); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT1); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); } //display gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.viewport(0, 0, renderSpec.width, renderSpec.height); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); useEffect(effectLib.finalComp, renderSpec.mainRT); gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1); gl.activeTexture(gl.TEXTURE1); gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture); drawEffect(effectLib.finalComp); unuseEffect(effectLib.finalComp); gl.enable(gl.DEPTH_TEST); } ///// var SceneEnv = {}; function createScene() { createEffectLib(); createBackground(); createPointFlowers(); createPostProcess(); sceneStandBy = true; } function initScene() { initBackground(); initPointFlowers(); initPostProcess(); //camera.position.z = 17.320508; camera.position.z = pointFlower.area.z + projection.nearfar[0]; projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0; Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]); } function renderScene() { //draw Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up); gl.enable(gl.DEPTH_TEST); //gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer); gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height); gl.clearColor(0.005, 0, 0.05, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); renderBackground(); renderPointFlowers(); renderPostProcess(); } ///// function onResize(e) { makeCanvasFullScreen(document.getElementById(\"sakura\")); setViewports(); if(sceneStandBy) { initScene(); } } function setViewports() { renderSpec.setSize(gl.canvas.width, gl.canvas.height); gl.clearColor(0.2, 0.2, 0.5, 1.0); gl.viewport(0, 0, renderSpec.width, renderSpec.height); var rtfunc = function (rtname, rtw, rth) { var rt = renderSpec[rtname]; if(rt) deleteRenderTarget(rt); renderSpec[rtname] = createRenderTarget(rtw, rth); }; rtfunc('mainRT', renderSpec.width, renderSpec.height); rtfunc('wFullRT0', renderSpec.width, renderSpec.height); rtfunc('wFullRT1', renderSpec.width, renderSpec.height); rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight); rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight); } function render() { renderScene(); } var animating = true; function toggleAnimation(elm) { animating ^= true; if(animating) animate(); if(elm) { elm.innerHTML = animating? \"Stop\":\"Start\"; } } function stepAnimation() { if(!animating) animate(); } function animate() { var curdate = new Date(); timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0; timeInfo.delta = (curdate - timeInfo.prev) / 1000.0; timeInfo.prev = curdate; if(animating) requestAnimationFrame(animate); render(); } function makeCanvasFullScreen(canvas) { var b = document.body; var d = document.documentElement; fullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth); fullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight); canvas.width = fullw; canvas.height = fullh; } window.addEventListener('load', function(e) { var canvas = document.getElementById(\"sakura\"); try { makeCanvasFullScreen(canvas); gl = canvas.getContext('experimental-webgl'); } catch(e) { alert(\"WebGL not supported.\" + e); console.error(e); return; } window.addEventListener('resize', onResize); setViewports(); createScene(); initScene(); timeInfo.start = new Date(); timeInfo.prev = timeInfo.start; animate(); }); //set window.requestAnimationFrame (function (w, r) { w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); }; })(window, 'equestAnimationFrame');","categories":[],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"http://litten.github.io/tags/HTML5/"}]},{"title":"webpack","slug":"2016-10-19","date":"2016-02-16T00:55:00.000Z","updated":"2016-12-07T06:18:27.532Z","comments":true,"path":"2016/02/16/2016-10-19/","link":"","permalink":"http://litten.github.io/2016/02/16/2016-10-19/","excerpt":"Webpack！","text":"Webpack！ 安装Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。 1234//全局安装npm install -g webpack//安装到你的项目目录npm install --save-dev webpack 正式使用Webpack前的准备","categories":[],"tags":[{"name":"前段","slug":"前段","permalink":"http://litten.github.io/tags/前段/"},{"name":"博客","slug":"博客","permalink":"http://litten.github.io/tags/博客/"},{"name":"经验","slug":"经验","permalink":"http://litten.github.io/tags/经验/"},{"name":"webpack","slug":"webpack","permalink":"http://litten.github.io/tags/webpack/"}]}]}