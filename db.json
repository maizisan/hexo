{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/2favicon.ico","path":"2favicon.ico","modified":1,"renderable":0},{"_id":"source/avatar/avatar.jpg","path":"avatar/avatar.jpg","modified":1,"renderable":0},{"_id":"source/avatar/avatar1.jpg","path":"avatar/avatar1.jpg","modified":1,"renderable":0},{"_id":"source/img/pexels-photo-119617-450.jpeg","path":"img/pexels-photo-119617-450.jpeg","modified":1,"renderable":0},{"_id":"source/img/pexels-photo-188971-450x450.jpeg","path":"img/pexels-photo-188971-450x450.jpeg","modified":1,"renderable":0},{"_id":"source/img/work4.jpg","path":"img/work4.jpg","modified":1,"renderable":0},{"_id":"source/img/work1.jpg","path":"img/work1.jpg","modified":1,"renderable":0},{"_id":"source/img/work2.jpg","path":"img/work2.jpg","modified":1,"renderable":0},{"_id":"source/img/work3.jpg","path":"img/work3.jpg","modified":1,"renderable":0},{"_id":"source/img/work5.jpg","path":"img/work5.jpg","modified":1,"renderable":0},{"_id":"themes/magnetic/source/css/reset.css","path":"css/reset.css","modified":1,"renderable":1},{"_id":"themes/magnetic/source/css/main.css","path":"css/main.css","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-bold.eot","path":"fonts/raleway-bold.eot","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-bold.ttf","path":"fonts/raleway-bold.ttf","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-bold.woff","path":"fonts/raleway-bold.woff","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-regular.eot","path":"fonts/raleway-regular.eot","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-regular.ttf","path":"fonts/raleway-regular.ttf","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-semibold.eot","path":"fonts/raleway-semibold.eot","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-regular.woff","path":"fonts/raleway-regular.woff","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-semibold.ttf","path":"fonts/raleway-semibold.ttf","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-semibold.woff","path":"fonts/raleway-semibold.woff","modified":1,"renderable":1},{"_id":"themes/magnetic/source/img/men_icons.png","path":"img/men_icons.png","modified":1,"renderable":1},{"_id":"themes/magnetic/source/img/p_navigation.png","path":"img/p_navigation.png","modified":1,"renderable":1},{"_id":"themes/magnetic/source/img/point.png","path":"img/point.png","modified":1,"renderable":1},{"_id":"themes/magnetic/source/img/sm.png","path":"img/sm.png","modified":1,"renderable":1},{"_id":"themes/magnetic/source/img/sm_hover.png","path":"img/sm_hover.png","modified":1,"renderable":1},{"_id":"themes/magnetic/source/img/sm2.png","path":"img/sm2.png","modified":1,"renderable":1},{"_id":"themes/magnetic/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/magnetic/source/js/map.js","path":"js/map.js","modified":1,"renderable":1},{"_id":"source/img/pexels-photo-119617-1300.jpeg","path":"img/pexels-photo-119617-1300.jpeg","modified":1,"renderable":0},{"_id":"source/img/work6.jpg","path":"img/work6.jpg","modified":1,"renderable":0},{"_id":"themes/magnetic/source/fonts/raleway-bold.svg","path":"fonts/raleway-bold.svg","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-regular.svg","path":"fonts/raleway-regular.svg","modified":1,"renderable":1},{"_id":"themes/magnetic/source/fonts/raleway-semibold.svg","path":"fonts/raleway-semibold.svg","modified":1,"renderable":1},{"_id":"themes/magnetic/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/hero_image.jpg","path":"img/hero_image.jpg","modified":1,"renderable":0},{"_id":"source/img/pexels-photo-188971-1300x500.jpeg","path":"img/pexels-photo-188971-1300x500.jpeg","modified":1,"renderable":0},{"_id":"themes/magnetic/source/img/work5.jpg","path":"img/work5.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"30b1e8c132d230da793abf9a39244cec6657e8e4","modified":1481091571200},{"_id":"source/CNAME","hash":"ba92a2b1bafeb7027e00b88faa52687a713b0864","modified":1482721958629},{"_id":"source/favicon.ico","hash":"e2f951540913c5fe254209eaa73af16a17e9d9cf","modified":1481091571200},{"_id":"themes/magnetic/README.md","hash":"b424ff77024d6ec440616a4469b8104d6257a011","modified":1481768779954},{"_id":"themes/magnetic/_config.yml","hash":"81fae6f0055f3d8e0b452f2023afb59d4f8c7a87","modified":1482718998538},{"_id":"source/2favicon.ico","hash":"a1e455366b08099bad871f6e9b0b78ec2f1061dd","modified":1481091571200},{"_id":"source/_posts/2016-10-13.md","hash":"3e1bc089b931c9245cbddd749dc60f116ea3b165","modified":1482721161537},{"_id":"source/_posts/2016-10-130.md","hash":"01b50fe3b8ae6927bb8de1f43b8562585be4fd25","modified":1482721047943},{"_id":"source/_posts/hello-world.html","hash":"c7e45559c396f00d0327b92a246030a1bddd5706","modified":1482721485298},{"_id":"source/avatar/avatar.jpg","hash":"fe90c70901709bec0287e4150844685998eacb7a","modified":1481091571196},{"_id":"source/avatar/avatar1.jpg","hash":"6e5e6a79ee6b237cb2b0b188550464960c72c343","modified":1481091571196},{"_id":"source/instagram/index.ejs","hash":"192a4556549af07f5c1d9ad3997c7d30cd8ebc0e","modified":1481091571200},{"_id":"themes/magnetic/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1481768779938},{"_id":"themes/magnetic/.git/config","hash":"d06a26bc6faf9a0d98be4d98005dcead16d6b65e","modified":1481768779938},{"_id":"themes/magnetic/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1481768713087},{"_id":"themes/magnetic/.git/index","hash":"b57766a2a8034c79a4d02ff8791ca9b96b462c4e","modified":1481768779962},{"_id":"themes/magnetic/.git/packed-refs","hash":"f2cd90f7d380382191108b6b6cd67132da4f1f86","modified":1481768779938},{"_id":"themes/magnetic/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1481768779954},{"_id":"themes/magnetic/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1481768779954},{"_id":"themes/magnetic/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1481768779954},{"_id":"themes/magnetic/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1481768779954},{"_id":"themes/magnetic/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1481768779954},{"_id":"themes/magnetic/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1481768779954},{"_id":"themes/magnetic/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1481768779954},{"_id":"themes/magnetic/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1481768779954},{"_id":"themes/magnetic/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1481768779954},{"_id":"themes/magnetic/layout/archive.ejs","hash":"943c3e6760ae64f5e9f3297a9039c13f0b0cee2f","modified":1481768779954},{"_id":"themes/magnetic/layout/index.ejs","hash":"825b59f2029e8b8a7d76f5213bd499ab3127f8ae","modified":1481768779954},{"_id":"themes/magnetic/layout/layout.ejs","hash":"8ce3d566fff3c93975b0858b96f3a17e74c35438","modified":1481768779954},{"_id":"themes/magnetic/layout/page.ejs","hash":"54f11f374dd0903086bd5bf7db507908034a8f28","modified":1481768779954},{"_id":"themes/magnetic/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1481768779954},{"_id":"source/img/pexels-photo-119617-450.jpeg","hash":"bdbf9d07190efa3536f7114ff1b612bf525a6548","modified":1482721301142},{"_id":"source/img/pexels-photo-188971-450x450.jpeg","hash":"0689f6160f74e3d313654459ab514bcf93070624","modified":1482720966390},{"_id":"source/img/work4.jpg","hash":"8586f95919d7be4d069530a9ccab48495ce9c582","modified":1399019524000},{"_id":"source/img/work1.jpg","hash":"efa00232f3356c3198099001af78ca920f5a56f8","modified":1399019374000},{"_id":"source/img/work2.jpg","hash":"f33fe7b2187d556b0219703961ff44a136956461","modified":1399019450000},{"_id":"source/img/work3.jpg","hash":"f9d66079e85fbd60ac47512d3ee896cc96f5c71c","modified":1399019482000},{"_id":"source/img/work5.jpg","hash":"96c2c6d188fcbf6f5a931c6e951a571a5429a9d1","modified":1399019556000},{"_id":"themes/magnetic/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1481768713087},{"_id":"themes/magnetic/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1481768713087},{"_id":"themes/magnetic/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1481768713087},{"_id":"themes/magnetic/.git/logs/HEAD","hash":"500bebf8b1765e3537f5ecc5ded9f8b251a4d2d9","modified":1481768779938},{"_id":"themes/magnetic/layout/_partial/article-archive.ejs","hash":"e2cd0f49d5ce005711f7ebbd6bb894b8708728b8","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/after-footer.ejs","hash":"40f9b7dd7cf5d5a3e308778c33b34b508ea1c408","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/article-full-nav.ejs","hash":"702b5f67442de777799973182fdaf17376715289","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/article-full.ejs","hash":"d5feecf911f0ad07d45ead5ec9610e32bbd9daa4","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/article-index.ejs","hash":"3a8eece5ccd48093aab53fd93177cae787368cf5","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/gallery.ejs","hash":"1534fcafbec20a2b7abb6feb38c2d50e5f7bbeff","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/head.ejs","hash":"c8d8972395d276533879448e58189addb6578629","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/menu.ejs","hash":"52514b6ad8e7ab87bf97fd0f6e643a9770171a6a","modified":1482717782072},{"_id":"themes/magnetic/layout/_partial/pagination.ejs","hash":"bdf17317c1a9ac805abb57867f3f58faed03da1b","modified":1481768779954},{"_id":"themes/magnetic/source/css/reset.css","hash":"72c93a8da611db543f98b7f958fd9780758ceb1d","modified":1481768779954},{"_id":"themes/magnetic/source/css/main.css","hash":"eba4dedfe87bd366b3a86c9a1066d924ec6dab23","modified":1481768779954},{"_id":"themes/magnetic/source/fonts/raleway-bold.eot","hash":"d41384d4dcc7947563068976b99dbccca65e709b","modified":1481768779954},{"_id":"themes/magnetic/source/fonts/raleway-bold.ttf","hash":"4eba2d3820d08437c56ecb93c9d64dd97733175b","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-bold.woff","hash":"010acea1a46d8cb4cd9c62eeac1606a37288b217","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-regular.eot","hash":"aa08081cf7040d4734dbae77772bf1a7d700fc2e","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-regular.ttf","hash":"b92069d1c8d58b62a4a8cc714efcb7a5b305ddbe","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-semibold.eot","hash":"18544d8959809399cac867b3b6230823932ba187","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-regular.woff","hash":"dac9720546a9606b23b051589a138e9e1b55ed7c","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-semibold.ttf","hash":"49a7f9643860dab4fc1291f463fff564854d3f3f","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-semibold.woff","hash":"b6cd60f1c3eab6f2bb0ce437da2688f1a1b902a8","modified":1481768779958},{"_id":"themes/magnetic/source/img/men_icons.png","hash":"6529a71633a4e7831886c54e1111432f9a75fd63","modified":1481768779958},{"_id":"themes/magnetic/source/img/p_navigation.png","hash":"f9467cd6e6fe07485b107ba26fae9d8cbd097ce6","modified":1481768779958},{"_id":"themes/magnetic/source/img/point.png","hash":"94ca6629c55a89008d61ea44c8d9dc4c07945b51","modified":1481768779958},{"_id":"themes/magnetic/source/img/sm.png","hash":"bac9cd3901396cb02a06f79424ac426fe7b1ef74","modified":1481768779958},{"_id":"themes/magnetic/source/img/sm_hover.png","hash":"5aeb55d7562f58e1c2107b15e42167edf68e667b","modified":1481768779958},{"_id":"themes/magnetic/source/img/sm2.png","hash":"7e365ad4bd392829537739cb4118bfc6ac73b229","modified":1481768779958},{"_id":"themes/magnetic/source/js/main.js","hash":"81ea33ea141f91dfc526d741bb405f2a8b313d98","modified":1481768779962},{"_id":"themes/magnetic/source/js/map.js","hash":"10f7bba54547e1eb0eaaa2b1b338bd586a8e33bd","modified":1481768779962},{"_id":"source/img/pexels-photo-119617-1300.jpeg","hash":"53beaeeda2bf721c9be34ba62943bff6c024046c","modified":1482721238953},{"_id":"source/img/work6.jpg","hash":"0c35ad8c286c0c2f5e0175fc6aa0971b19f56413","modified":1399019588000},{"_id":"themes/magnetic/layout/_partial/article-page.ejs","hash":"b5e8d49bf3e29a0487ecc5a3c77e73ea38f338aa","modified":1481768779954},{"_id":"themes/magnetic/layout/_partial/article-tags.ejs","hash":"d1e72b22d8c1575d823591971a442bb3bdcea0ec","modified":1481768779954},{"_id":"themes/magnetic/source/fonts/raleway-bold.svg","hash":"821a3f6bf7803cc8e839d5fe582467e7f5259bd5","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-regular.svg","hash":"26c6f5b2c16b430e574f3b1617f6f4ea519320e1","modified":1481768779958},{"_id":"themes/magnetic/source/fonts/raleway-semibold.svg","hash":"062c29cb54ccd25d36f0b1adb2591db2bebfcedc","modified":1481768779958},{"_id":"themes/magnetic/source/js/jquery.js","hash":"4566b5815f47f976c7c3d3083c600ad5561b6fc0","modified":1481768779962},{"_id":"source/img/hero_image.jpg","hash":"ab741f3ae4757908905a57fa006681e2bb9c0b9f","modified":1399210484000},{"_id":"source/img/pexels-photo-188971-1300x500.jpeg","hash":"d9ac5f5fef9a36236e4f4642319739f9407cc203","modified":1482720925489},{"_id":"themes/magnetic/.git/objects/pack/pack-94b591622f07806cf9461d02aa18add09e3039e6.idx","hash":"777075c4e71e110dd4b0b1b953322fb7821c196c","modified":1481768779798},{"_id":"themes/magnetic/.git/refs/heads/master","hash":"6312ccd16b2a7381581ace5a3230c414f884c0fb","modified":1481768779938},{"_id":"themes/magnetic/source/img/work5.jpg","hash":"96c2c6d188fcbf6f5a931c6e951a571a5429a9d1","modified":1482718117968},{"_id":"themes/magnetic/.git/logs/refs/heads/master","hash":"500bebf8b1765e3537f5ecc5ded9f8b251a4d2d9","modified":1481768779938},{"_id":"themes/magnetic/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1481768779938},{"_id":"themes/magnetic/.git/logs/refs/remotes/origin/HEAD","hash":"500bebf8b1765e3537f5ecc5ded9f8b251a4d2d9","modified":1481768779938},{"_id":"themes/magnetic/.git/objects/pack/pack-94b591622f07806cf9461d02aa18add09e3039e6.pack","hash":"ea0df1c04cbac9c70da992fdaf41c3e4da740bfe","modified":1481768779798}],"Category":[],"Data":[],"Page":[{"_content":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","source":"404.html","raw":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","date":"2016-12-15T02:04:28.124Z","updated":"2016-12-07T06:19:31.200Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cix5incu50000dhc5xvzx5mss","content":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","excerpt":"","more":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n"},{"layout":"post","slug":"instagram","title":"相册","noDate":"true","comments":0,"_content":"\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n","source":"instagram/index.ejs","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: false\n---\n\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n","date":"2016-12-15T02:04:28.136Z","updated":"2016-12-07T06:19:31.200Z","path":"instagram/index.html","_id":"cix5incuq0002dhc5eb562zzg","content":"\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n","excerpt":"","more":"\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n"}],"Post":[{"title":"Editor","date":"2016-09-12T00:55:00.000Z","cover_index":"/img/pexels-photo-188971-450x450.jpeg","cover_detail":"/img/pexels-photo-188971-1300x500.jpeg","_content":"# Editor.md\nmd示例～\n\n<!-- more -->\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2               \n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n\n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id]\n\n[anchor-id]: http://www.this-anchor-link.com/\n\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\n\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n\n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test() {\n\tconsole.log(\"Hello world!\");\n}\n\n(function(){\n    var box = function() {\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str) {\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str) {\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n\n    box.fn.init.prototype = box.fn;\n\n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML 代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\n        <title>Hello world!</title>\n        <style type=\"text/css\">\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\n            ul{list-style: none;}\n            img{border:none;vertical-align: middle;}\n        </style>\n    </head>\n    <body>\n        <h1 class=\"text-xxl\">Hello world!</h1>\n        <p class=\"text-green\">Plain text</p>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n\n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n\n- 列表一\n- 列表二\n- 列表三\n\n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n\n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n\n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n\n----\n\n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n\n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;\n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n[========]\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao;\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n\n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n\n[========]\n\n### 科学公式 TeX(KaTeX)\n\n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$x > y$$\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle\n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        }\n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n### 分页符 Page break\n\n> Print Test: Ctrl + P\n\n[========]\n\n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[========]\n\n### 绘制序列图 Sequence Diagram\n\n```seq\nAndrew->China: Says Hello\nNote right of China: China thinks\\nabout it\nChina-->Andrew: How are you?\nAndrew->>China: I am good thanks!\n```\n\n### End\n","source":"_posts/2016-10-13.md","raw":"---\ntitle: Editor\ndate: 2016-09-12 08:55\ncover_index: /img/pexels-photo-188971-450x450.jpeg\ncover_detail: /img/pexels-photo-188971-1300x500.jpeg\ntags:\n- Editor\n---\n# Editor.md\nmd示例～\n\n<!-- more -->\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2               \n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n\n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id]\n\n[anchor-id]: http://www.this-anchor-link.com/\n\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\n\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n\n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test() {\n\tconsole.log(\"Hello world!\");\n}\n\n(function(){\n    var box = function() {\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str) {\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str) {\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n\n    box.fn.init.prototype = box.fn;\n\n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML 代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\n        <title>Hello world!</title>\n        <style type=\"text/css\">\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\n            ul{list-style: none;}\n            img{border:none;vertical-align: middle;}\n        </style>\n    </head>\n    <body>\n        <h1 class=\"text-xxl\">Hello world!</h1>\n        <p class=\"text-green\">Plain text</p>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n\n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n\n- 列表一\n- 列表二\n- 列表三\n\n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n\n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n\n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n\n----\n\n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n\n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;\n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n[========]\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao;\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n\n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n\n[========]\n\n### 科学公式 TeX(KaTeX)\n\n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$x > y$$\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle\n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        }\n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n### 分页符 Page break\n\n> Print Test: Ctrl + P\n\n[========]\n\n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[========]\n\n### 绘制序列图 Sequence Diagram\n\n```seq\nAndrew->China: Says Hello\nNote right of China: China thinks\\nabout it\nChina-->Andrew: How are you?\nAndrew->>China: I am good thanks!\n```\n\n### End\n","slug":"2016-10-13","published":1,"updated":"2016-12-26T02:59:21.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix5incul0001dhc51rteagsa","content":"<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p>md示例～</p>\n<a id=\"more\"></a>\n<p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\" alt=\"\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\" alt=\"\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\" target=\"_blank\" rel=\"external\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\" target=\"_blank\" rel=\"external\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\" target=\"_blank\" rel=\"external\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\" target=\"_blank\" rel=\"external\">锚点链接</a></p>\n<p><a href=\"mailto:test.test@gmail.com\" target=\"_blank\" rel=\"external\">mailto:test.test@gmail.com</a></p>\n<p>GFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com</p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre><p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre><h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码　\"></a>JS代码　</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> box.fn.init();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.prototype = box.fn = &#123;</div><div class=\"line\">        <span class=\"attr\">init</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'box.init()'</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"add\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">remove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"remove\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.fn.init.prototype = box.fn;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">window</span>.box =box;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testBox = box();</div><div class=\"line\">testBox.add(<span class=\"string\">\"jQuery\"</span>).remove(<span class=\"string\">\"jQuery\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"HTML-代码-HTML-codes\"><a href=\"#HTML-代码-HTML-codes\" class=\"headerlink\" title=\"HTML 代码 HTML codes\"></a>HTML 代码 HTML codes</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Editor.md, Markdown, Editor\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">            body&#123;font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;&#125;</div><div class=\"line\">            ul&#123;list-style: none;&#125;</div><div class=\"line\">            img&#123;border:none;vertical-align: middle;&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-xxl\"</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-green\"</span>&gt;</span>Plain text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\" alt=\"\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\" target=\"_blank\" rel=\"external\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\" alt=\"\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li>[x] GFM task list 1</li>\n<li>[x] GFM task list 2</li>\n<li>[ ] GFM task list 3<ul>\n<li>[ ] GFM task list 3-1</li>\n<li>[ ] GFM task list 3-2</li>\n<li>[ ] GFM task list 3-3</li>\n</ul>\n</li>\n<li>[ ] GFM task list 4<ul>\n<li>[ ] GFM task list 4-1</li>\n<li>[ ] GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th style=\"text-align:right\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p>\n<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>\n<p>18&ordm;C  &quot;  &apos;</p>\n<p>[========]</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 :smiley:</h3><blockquote>\n<p>Blockquotes :star:</p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li>[x] :smiley: @mentions, :smiley: #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li>[x] [ ] :smiley: this is a complete item :smiley:;</li>\n<li>[ ] []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao;</li>\n<li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li>[ ] :smiley: this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<p>[========]</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>\n<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>\n<p>$$x &gt; y$$</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2</div><div class=\"line\">\\leq</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">    \\frac&#123;1&#125;&#123;</div><div class=\"line\">        \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;</div><div class=\"line\">        \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;</div><div class=\"line\">        1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;</div><div class=\"line\">        &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125;</div><div class=\"line\">         &#123;1+\\cdots&#125; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f(x) = \\int_&#123;-\\infty&#125;^\\infty</div><div class=\"line\">    \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125;</div><div class=\"line\">    \\,d\\xi</div></pre></td></tr></table></figure>\n<h3 id=\"分页符-Page-break\"><a href=\"#分页符-Page-break\" class=\"headerlink\" title=\"分页符 Page break\"></a>分页符 Page break</h3><blockquote>\n<p>Print Test: Ctrl + P</p>\n</blockquote>\n<p>[========]</p>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 用户登陆</div><div class=\"line\">op=&gt;operation: 登陆操作</div><div class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</div><div class=\"line\">e=&gt;end: 进入后台</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<p>[========]</p>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Andrew-&gt;China: Says Hello</div><div class=\"line\">Note right of China: China thinks\\nabout it</div><div class=\"line\">China--&gt;Andrew: How are you?</div><div class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>","excerpt":"<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p>md示例～</p>","more":"<p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\" alt=\"\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\" alt=\"\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\">锚点链接</a></p>\n<p><a href=\"mailto:test.test@gmail.com\">mailto:test.test@gmail.com</a></p>\n<p>GFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com</p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre><p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre><h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码　\"></a>JS代码　</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> box.fn.init();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.prototype = box.fn = &#123;</div><div class=\"line\">        <span class=\"attr\">init</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'box.init()'</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"add\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">remove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"remove\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.fn.init.prototype = box.fn;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">window</span>.box =box;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testBox = box();</div><div class=\"line\">testBox.add(<span class=\"string\">\"jQuery\"</span>).remove(<span class=\"string\">\"jQuery\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"HTML-代码-HTML-codes\"><a href=\"#HTML-代码-HTML-codes\" class=\"headerlink\" title=\"HTML 代码 HTML codes\"></a>HTML 代码 HTML codes</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Editor.md, Markdown, Editor\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">            body&#123;font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;&#125;</div><div class=\"line\">            ul&#123;list-style: none;&#125;</div><div class=\"line\">            img&#123;border:none;vertical-align: middle;&#125;</div><div class=\"line\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-xxl\"</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-green\"</span>&gt;</span>Plain text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\" alt=\"\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\" alt=\"\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li>[x] GFM task list 1</li>\n<li>[x] GFM task list 2</li>\n<li>[ ] GFM task list 3<ul>\n<li>[ ] GFM task list 3-1</li>\n<li>[ ] GFM task list 3-2</li>\n<li>[ ] GFM task list 3-3</li>\n</ul>\n</li>\n<li>[ ] GFM task list 4<ul>\n<li>[ ] GFM task list 4-1</li>\n<li>[ ] GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th style=\"text-align:right\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p>\n<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>\n<p>18&ordm;C  &quot;  &apos;</p>\n<p>[========]</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 :smiley:</h3><blockquote>\n<p>Blockquotes :star:</p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li>[x] :smiley: @mentions, :smiley: #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li>[x] [ ] :smiley: this is a complete item :smiley:;</li>\n<li>[ ] []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao;</li>\n<li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li>[ ] :smiley: this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<p>[========]</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>\n<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>\n<p>$$x &gt; y$$</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2</div><div class=\"line\">\\leq</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">    \\frac&#123;1&#125;&#123;</div><div class=\"line\">        \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;</div><div class=\"line\">        \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;</div><div class=\"line\">        1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;</div><div class=\"line\">        &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125;</div><div class=\"line\">         &#123;1+\\cdots&#125; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f(x) = \\int_&#123;-\\infty&#125;^\\infty</div><div class=\"line\">    \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125;</div><div class=\"line\">    \\,d\\xi</div></pre></td></tr></table></figure>\n<h3 id=\"分页符-Page-break\"><a href=\"#分页符-Page-break\" class=\"headerlink\" title=\"分页符 Page break\"></a>分页符 Page break</h3><blockquote>\n<p>Print Test: Ctrl + P</p>\n</blockquote>\n<p>[========]</p>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 用户登陆</div><div class=\"line\">op=&gt;operation: 登陆操作</div><div class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</div><div class=\"line\">e=&gt;end: 进入后台</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<p>[========]</p>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Andrew-&gt;China: Says Hello</div><div class=\"line\">Note right of China: China thinks\\nabout it</div><div class=\"line\">China--&gt;Andrew: How are you?</div><div class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>"},{"title":"Gallery Post","date":"2013-12-24T16:16:18.000Z","cover_index":"/img/work1.jpg","cover_detail":"/img/hero_image.jpg","photos":["/img/work1.jpg","/img/work2.jpg","/img/work3.jpg","/img/work4.jpg"],"_content":"","source":"_posts/2016-10-130.md","raw":"title: Gallery Post\ndate: 2013-12-25 00:16:18\ncover_index: /img/work1.jpg\ncover_detail: /img/hero_image.jpg\nphotos:\n- /img/work1.jpg\n- /img/work2.jpg\n- /img/work3.jpg\n- /img/work4.jpg\n---\n","slug":"2016-10-130","published":1,"updated":"2016-12-26T02:57:27.943Z","comments":1,"layout":"post","link":"","_id":"cix5incur0003dhc5a5f2swro","content":"","excerpt":"","more":""},{"layout":"post","title":"特效展示","date":"2016-02-17T00:55:00.000Z","comments":1,"cover_index":"/img/pexels-photo-119617-450.jpeg","cover_detail":"/img/pexels-photo-119617-1300.jpeg","_content":"\n<!-- more -->\n\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","source":"_posts/hello-world.html","raw":"---\nlayout: post\ntitle:  特效展示\ndate: 2016-02-17 08:55\ncomments: true\ncover_index: /img/pexels-photo-119617-450.jpeg\ncover_detail: /img/pexels-photo-119617-1300.jpeg\ntags:\n- HTML5\n---\n\n<!-- more -->\n\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","slug":"hello-world","published":1,"updated":"2016-12-26T03:04:45.298Z","photos":[],"link":"","_id":"cix5incv10005dhc59m1xlldf","content":"\n<a id=\"more\"></a>\n\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","excerpt":"","more":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cix5incul0001dhc51rteagsa","tag_id":"cix5incux0004dhc5r7o0ix0y","_id":"cix5incv60007dhc5209ix0m6"},{"post_id":"cix5incv10005dhc59m1xlldf","tag_id":"cix5incv60006dhc554cu73ck","_id":"cix5incva0008dhc552yyer9i"}],"Tag":[{"name":"Editor","_id":"cix5incux0004dhc5r7o0ix0y"},{"name":"HTML5","_id":"cix5incv60006dhc554cu73ck"}]}}