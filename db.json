{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/2favicon.ico","path":"2favicon.ico","modified":0,"renderable":0},{"_id":"source/avatar/avatar1.jpg","path":"avatar/avatar1.jpg","modified":0,"renderable":0},{"_id":"source/img/2016-10-21-2.png","path":"img/2016-10-21-2.png","modified":0,"renderable":0},{"_id":"source/avatar/avatar.jpg","path":"avatar/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/2016-10-21.png","path":"img/2016-10-21.png","modified":0,"renderable":0},{"_id":"source/img/2016-11-30.png","path":"img/2016-11-30.png","modified":0,"renderable":0},{"_id":"source/img/3px-tile.png","path":"img/3px-tile.png","modified":0,"renderable":0},{"_id":"source/img/2016-10-21-1.png","path":"img/2016-10-21-1.png","modified":0,"renderable":0},{"_id":"source/img/2016-10-21-3.png","path":"img/2016-10-21-3.png","modified":0,"renderable":0},{"_id":"source/img/concepts-startup.png","path":"img/concepts-startup.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/style.js","path":"style.js","modified":0,"renderable":1},{"_id":"source/img/football-no-lines.png","path":"img/football-no-lines.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481091474768},{"_id":"source/404.html","hash":"30b1e8c132d230da793abf9a39244cec6657e8e4","modified":1481091571200},{"_id":"source/CNAME","hash":"ba92a2b1bafeb7027e00b88faa52687a713b0864","modified":1481091571200},{"_id":"source/favicon.ico","hash":"e2f951540913c5fe254209eaa73af16a17e9d9cf","modified":1481091571200},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1481091474756},{"_id":"themes/yilia/.gitignore","hash":"68eaa79f92481f95dd412ac44de1837fe2e5d9dd","modified":1481091474760},{"_id":"themes/yilia/_config.yml","hash":"048f253d3efc2cabcde147d0b834905c971eae16","modified":1481091474756},{"_id":"themes/yilia/package.json","hash":"00617be92734bd435ec21614c445bed23cf7448d","modified":1481091474768},{"_id":"themes/yilia/webpack.config.js","hash":"ccf5929d2727b00e76266f9f5d6edc0bc74539dc","modified":1481091474792},{"_id":"source/2favicon.ico","hash":"a1e455366b08099bad871f6e9b0b78ec2f1061dd","modified":1481091571200},{"_id":"source/_posts/2016-10-13.md","hash":"1995f4cb246c7dba15c2975acb6052938784c491","modified":1481091507532},{"_id":"source/_posts/2016-10-17-2.md","hash":"8f736ff1da6207b5b1113612df3e354abeafd2ce","modified":1481091507532},{"_id":"source/_posts/2016-10-17-1.md","hash":"7c98894596e3b14161b88310e3b58039a2e265db","modified":1481091507532},{"_id":"source/_posts/2016-10-17.md","hash":"c99c9af8fc12ece5f7c81e224820f1a249f0be02","modified":1481091507532},{"_id":"source/_posts/2016-10-19.md","hash":"8d4380556a4f0a9a73d738e7731e34013c0149f0","modified":1481091507532},{"_id":"source/_posts/2016-10-21.md","hash":"3dc4494521ed5061e937af1f3bd71bb880df3668","modified":1481091507532},{"_id":"source/_posts/2016-10-25-1.md","hash":"14b2ea8b54ec931c9b48e82bc7731e7be11d4552","modified":1481091507532},{"_id":"source/_posts/2016-10-25.md","hash":"c3c3c4526a1056286063c5c92d68fd6bb0cc2f5b","modified":1481091507532},{"_id":"source/_posts/2016-11-08.md","hash":"d5d1773f56f5cd8a1ac3be8be067b0b55ceb8cd1","modified":1481091507532},{"_id":"source/_posts/2016-10-21-1.md","hash":"72f1889f8200ef0edeb17604d1b38a346ad25eb8","modified":1481091507532},{"_id":"source/_posts/2016-11-23-1.md","hash":"bccf47a3575a857c12be31b6ff59766cc3af0202","modified":1481091507532},{"_id":"source/_posts/2016-11-09.md","hash":"82f3204069931305ce3ff2cf5e16b6cabda0cfca","modified":1481091507532},{"_id":"source/_posts/2016-11-30-1.md","hash":"88bcae8f4390aee30d9d9c9c148bd33913571ceb","modified":1481091507536},{"_id":"source/_posts/2016-11-23-2.md","hash":"ed61ccbeb4610e65cde92a0ad1868bb3bfeac0c8","modified":1481091507536},{"_id":"source/_posts/2016-11-30-2.md","hash":"597e5f8f068790aa97561c804ea8485a5a431527","modified":1481091507536},{"_id":"source/_posts/2016-12-01.md","hash":"4bce3d7c5ec45d698c4c8b82e7554a14f6db1352","modified":1481091507536},{"_id":"source/_posts/2016-12-02.md","hash":"0c10354a9f96fbce9984fe6b3253f74e74e4df1d","modified":1481091507536},{"_id":"source/_posts/2016-12-05.md","hash":"b8ea899ff92923def74102eac887f39ddc99520e","modified":1481091507536},{"_id":"source/_posts/2016-12-06.md","hash":"622a15df5cad60d013c9724914047de4ce089c43","modified":1481091507536},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1481091092912},{"_id":"source/_posts/hello-world.html","hash":"2e7b9195743fbb64ed4f65d15db732aa42b32c30","modified":1481091507536},{"_id":"source/avatar/avatar1.jpg","hash":"6e5e6a79ee6b237cb2b0b188550464960c72c343","modified":1481091571196},{"_id":"source/img/2016-10-21-2.png","hash":"1388d495c8c5d3b927107a8a05e944cf6ba29ab7","modified":1481091571196},{"_id":"source/avatar/avatar.jpg","hash":"fe90c70901709bec0287e4150844685998eacb7a","modified":1481091571196},{"_id":"source/img/2016-10-21.png","hash":"3e8b8843a73c99878bed0dd0dc79c60284efccda","modified":1481091571196},{"_id":"source/img/2016-11-30.png","hash":"d4d7572b0ed4641734d42715d75ff68244ae83eb","modified":1481091571196},{"_id":"source/img/3px-tile.png","hash":"9e0edb051b8944b0d1cf2e53f4e0a27b08f23570","modified":1481091571196},{"_id":"source/img/2016-10-21-1.png","hash":"c30c828eca3074417014ed4e513b61b02d8f05c1","modified":1481091571196},{"_id":"source/img/2016-10-21-3.png","hash":"9f00032f96397da7a2a169acac3dbefeaa9b6789","modified":1481091571196},{"_id":"source/instagram/index.ejs","hash":"192a4556549af07f5c1d9ad3997c7d30cd8ebc0e","modified":1481091571200},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1481091474760},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1481091474760},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1481091474760},{"_id":"source/img/concepts-startup.png","hash":"f64b6d171216c0bdb51bf89850927475bdf46319","modified":1481091571200},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1481091474760},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1481091474760},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1481091474760},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1481091474760},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1481091474760},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1481091474760},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1481091474760},{"_id":"themes/yilia/layout/layout.ejs","hash":"18bc94a020c6e74b0a7a29bc412670605e0c0873","modified":1481091474760},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481091474760},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1481091474768},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1481091474760},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"ef0205fa690a388e48ddcb62ed77f05c753a7b9d","modified":1481091474760},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1481091474760},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"65e786ace35a89eb2ec3eaff406de88565cc0b82","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"aa30a2f2634d8f70e78b75a407a09421347ad52c","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"9d24d167778e7d0da6baa74dcd90c739afb549d9","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"d78993618051392103df1107c0da5abb81e2acac","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"1ec178842b3e61b2cee09eb859e0209ee7712d59","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c5b92f83828e41a891c6db1d3e63cd2e007034e0","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"324f809c7d1505cbf1ef3a479782c67ae90dfa81","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1481091474764},{"_id":"themes/yilia/source/main.js","hash":"591b5266281ba1840ac4e64b24e371449145d57c","modified":1481091474768},{"_id":"themes/yilia/source/style.js","hash":"8fb389e6d3cb5e823729af8006079c92aeaf8c3b","modified":1481091474768},{"_id":"themes/yilia/source-src/js/archive-inner.js","hash":"da4a770ccb23ca1ded23fa6475ce1379f0c10604","modified":1481091474788},{"_id":"themes/yilia/source-src/js/browser.js","hash":"8ca48b006591bbf6d75688637c14fd1b5bdd650f","modified":1481091474788},{"_id":"themes/yilia/source-src/js/fix-page.js","hash":"f18e33e99b1032b95a60b018960bed64235c1a29","modified":1481091474788},{"_id":"themes/yilia/source-src/js/jquery.lazyload.js","hash":"37961302284435b2677b7fd1e0c0f7624e226e4a","modified":1481091474788},{"_id":"themes/yilia/source-src/js/main.js","hash":"a2dc03513509a04003185891c33d47f1de5c49dc","modified":1481091474788},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d79f5f2d789e6cddfd7b502df238107e9c63aac","modified":1481091474788},{"_id":"themes/yilia/source-src/js/tags.js","hash":"f259b3f808df3a8523a42978f922bb9eda76e0ee","modified":1481091474788},{"_id":"themes/yilia/source-src/js/tools.js","hash":"ed69771cd501770c2c303ae6ae695d2a9a187cdd","modified":1481091474788},{"_id":"themes/yilia/source-src/js/util.js","hash":"28c66c54cab81b2a6c8c393226f5bd30f369e1bb","modified":1481091474788},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"8b68f943b259bf6b4a648a10efe6c0160a880017","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"724162c14e5722a2ce1f44cf086dcea7b6855b80","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"38557bef17c33e172bc8e1670cd302d91622dfad","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.css","hash":"5cf582f8d8fbea91e4c1107d84655aadfad0b76a","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.min.js","hash":"e3267f5ae23f00c1ae052d019f12787296e34afc","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.scss","hash":"838d43529282b91a60934bbd39f3f9f5dbefee98","modified":1481091474792},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1481091474772},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1481091474776},{"_id":"themes/yilia/source-src/css/archive-inner.css","hash":"f491f36a25c2993c031b96f4ca048f346fb0ec11","modified":1481091474768},{"_id":"themes/yilia/source-src/css/archive-inner.scss","hash":"c70d67116dd4a8ff0a10c397059823820f846dbd","modified":1481091474768},{"_id":"themes/yilia/source-src/css/archive.css","hash":"e763597e142823ceaf91cd76d2a4c53bba2829e3","modified":1481091474768},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1481091474768},{"_id":"themes/yilia/source-src/css/article-inner.css","hash":"767223292297fbfc4c0aba2b0305679725dcf647","modified":1481091474768},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"eb1ee1fc425a6ba6b705ff0d1cc3695c1c04d1c5","modified":1481091474768},{"_id":"themes/yilia/source-src/css/article-main.css","hash":"5e654e229c8151ade4767ec69ba0a87ff77439e2","modified":1481091474768},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"752498c2d75576600ccc3f4ac185f76120bd8746","modified":1481091474768},{"_id":"themes/yilia/source-src/css/article-nav.css","hash":"a1cd2ac8902167875ef8a0553056a0ce87339291","modified":1481091474768},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"d046414a96adc400b54897fc236b3272e6deeafd","modified":1481091474772},{"_id":"themes/yilia/source-src/css/article.css","hash":"a416c371ea5385d802d01c8c597a621de84dc832","modified":1481091474768},{"_id":"themes/yilia/source-src/css/article.scss","hash":"849dc2dd0258bc0ad256bab7c06bb0e3d32da065","modified":1481091474772},{"_id":"themes/yilia/source-src/css/duoshuo.css","hash":"15779c16bc41a846748936b6894673760e3bce48","modified":1481091474772},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"1a4be8634b8dcf271cebad1feb687e96a038ffbf","modified":1481091474772},{"_id":"themes/yilia/source-src/css/fonts.css","hash":"70693d7c30723fbc06e7dea309d170f0a4f4e76c","modified":1481091474772},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"f5ee21869fcd3e2b257b49b0f680c78763d416dd","modified":1481091474772},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1481091474776},{"_id":"themes/yilia/source-src/css/footer.css","hash":"e2bc00a881300fc9022ee609a6aea98f21017d8a","modified":1481091474772},{"_id":"themes/yilia/source-src/css/global.css","hash":"f483b4918a1ac5aae36b72df0d70bf10cb43a43e","modified":1481091474776},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1481091474776},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"3307ee36c64cb48959ab124351d9e3b9d8110962","modified":1481091474776},{"_id":"themes/yilia/source-src/css/highlight.css","hash":"61c4772ab1463d783f5171896d7bee9d906d7c74","modified":1481091474776},{"_id":"themes/yilia/source-src/css/grid.css","hash":"786ac1c1f8c644960ae40324a107531b87cecf0c","modified":1481091474776},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1481091474776},{"_id":"themes/yilia/source-src/css/left.css","hash":"f2c5f0839c4fee3d45fa0ce75737ae1ba77fc929","modified":1481091474780},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0df34a24bcd5db6e7b0271185b917898d77aa6be","modified":1481091474780},{"_id":"themes/yilia/source-src/css/main.css","hash":"e686e713755da69751cb908fe9ee4ba0416b1b78","modified":1481091474780},{"_id":"themes/yilia/source-src/css/main.scss","hash":"5ffabb8323ff8cd26be466c7e02a6affc0f08da7","modified":1481091474780},{"_id":"themes/yilia/source-src/css/mobile-slider.css","hash":"655764993a4aa0cd1d33b2bc38bd9a087d92747b","modified":1481091474780},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"2112638e04babc404ad2a392d94d4fbe3eb94ff2","modified":1481091474780},{"_id":"themes/yilia/source-src/css/mobile.css","hash":"bd0bb3688a352cb43d98988748eb3db36bf3fae3","modified":1481091474780},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"c170329ef2e7c2dcec58b1134793beac521133d4","modified":1481091474780},{"_id":"themes/yilia/source-src/css/page.css","hash":"adf5b5b33891b738de5399d2bc4ea10f88368870","modified":1481091474780},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1481091474780},{"_id":"themes/yilia/source-src/css/scroll.css","hash":"65a1436b9e3e6f15ae056380071299bd73e21895","modified":1481091474780},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1481091474780},{"_id":"themes/yilia/source-src/css/social.css","hash":"2bd957ff3de13a045eeeb3685f0e614c76744953","modified":1481091474784},{"_id":"themes/yilia/source-src/css/social.scss","hash":"5b4a2cfd8a26687dc7bc44a4fa55ebb7d1ffe363","modified":1481091474784},{"_id":"themes/yilia/source-src/css/switch.css","hash":"6a59e2c955c5341a6c707f45b9def5e658e6ff72","modified":1481091474784},{"_id":"themes/yilia/source-src/css/style.js","hash":"6c4cb072d0d5cbbb5291aa255dee31c7b13cfe66","modified":1481091474784},{"_id":"themes/yilia/source-src/css/switch.scss","hash":"795b0d1ad5ff278933409a1ab7451483fe6ceae5","modified":1481091474784},{"_id":"themes/yilia/source-src/css/tags-cloud.css","hash":"206dfb8f26b8d4bb8ac0b4dda51080cf8c9538f7","modified":1481091474784},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"79d3fad4fcda15210410774089b0ee7fe8d58810","modified":1481091474784},{"_id":"themes/yilia/source-src/css/tags.css","hash":"2fa0817092390d838a4bfdf14c05bcd624ead6d4","modified":1481091474784},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"c92aa91195696d1f2e5280a8db358593068e5e76","modified":1481091474784},{"_id":"themes/yilia/source-src/css/tools.css","hash":"79915c09f9b1e63d27638914d099ef90c4c1531e","modified":1481091474784},{"_id":"source/img/football-no-lines.png","hash":"63470b7b7d9c010e572585a2dcc9e6155c9c9e31","modified":1481091571200},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1481091474784},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.js","hash":"ff9e3cc58b44a61144a9e211503755b170c24e91","modified":1481091474792},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"62cde65a4ab7aef85a4390308bc7608f59463e02","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"2ab4308d013dcb1f0898cf112e3f75573e597e33","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"d9fa04c06319510bd088ca9c286af947da3cfb38","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"a59c83e46aaccb053b60bb41369dfcd6848cbd69","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"3a44b657ebdeed1764d90f81b43e91e5a8f25c21","modified":1481091474764},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1481091474764},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.css","hash":"430b1ae8e23bfbf3f6ed7accc2ceebb2bd3cb6e3","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"91f44576a5f5ccff4740ff5020656bd2f00ca13c","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1481091474792},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1481091474792},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"6f44ec8ff32515280c0b7ea8ad7e4cb5f4dfcd84","modified":1481091474772},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1481091474772},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1481091474772},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"dc89a3b360881584838cdd9b95fe88aae6518e50","modified":1481091474772},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"19290f4d31d48351a9fbb8ddb1c7da7240743ae6","modified":1481091474772},{"_id":"themes/yilia/source-src/css/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1481091474772},{"_id":"themes/yilia/source-src/css/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1481091474772},{"_id":"themes/yilia/source-src/css/fonts/icomoon.svg","hash":"56ba63db8bfe20347e0457b4c583dd18e29ca701","modified":1481091474772},{"_id":"themes/yilia/source-src/css/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1481091474772},{"_id":"themes/yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1481091474780},{"_id":"themes/yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1481091474776},{"_id":"themes/yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1481091474780},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1481091474780},{"_id":"themes/yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1481091474780},{"_id":"themes/yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1481091474780},{"_id":"themes/yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1481091474780},{"_id":"themes/yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1481091474780},{"_id":"themes/yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1481091474776},{"_id":"themes/yilia/source-src/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1481091474788},{"_id":"themes/yilia/source-src/img/bg.jpg","hash":"26c57e7d92c6f909c80f18c53f61271088dcbf31","modified":1481091474788},{"_id":"public/content.json","hash":"966f2e7c07010801c2f36b4d17704367556762fa","modified":1481094664371},{"_id":"public/instagram/index.html","hash":"7c5d3f95b0ba8bf462bee96392b1bf473c5f407a","modified":1481094665026},{"_id":"public/2016/12/07/hello-world/index.html","hash":"b531a7234acea543500263c51254be4c5c8ac70d","modified":1481094665026},{"_id":"public/2016/12/05/2016-12-05/index.html","hash":"bca420304a87607cc7314db0fa92b718b95cabfd","modified":1481094665026},{"_id":"public/2016/12/01/2016-12-01/index.html","hash":"87ee4988ab680bb37c0287de8946ee80b30856d4","modified":1481094665026},{"_id":"public/2016/11/30/2016-11-30-2/index.html","hash":"d41ae558de36b7694c459abeacac2c41069594b2","modified":1481094665026},{"_id":"public/2016/11/23/2016-11-23-1/index.html","hash":"c8612c376b30956b213c62febefdf714d6ed4b25","modified":1481094665026},{"_id":"public/2016/11/08/2016-11-08/index.html","hash":"0d16c7b927c5eed953a8c68e46b1e1efe874c2c4","modified":1481094665026},{"_id":"public/2016/11/09/2016-11-23-2/index.html","hash":"3e6c21d9b03784c23986cffd289b7029c6dcb265","modified":1481094665027},{"_id":"public/2016/10/25/2016-10-25/index.html","hash":"66dfd97ff6b0394fea8928a4083e7c41a582c9bb","modified":1481094665027},{"_id":"public/2016/10/21/2016-10-21/index.html","hash":"9fae2538719c327fdb0ff69703095373bebce406","modified":1481094665027},{"_id":"public/2016/02/16/2016-10-19/index.html","hash":"179ed98a918384a58acff56f9b5186ec77f06514","modified":1481094665027},{"_id":"public/archives/2016/02/index.html","hash":"f7f77b0cdf920165d211e629f39383b572300424","modified":1481094665027},{"_id":"public/archives/2016/07/index.html","hash":"d54fba827d09e9f2de1158f7e3da0961ff0f4925","modified":1481094665027},{"_id":"public/archives/2016/09/index.html","hash":"2fdd13dd67d27e83603bbb01ab3836a874ddd2a9","modified":1481094665027},{"_id":"public/archives/2016/10/index.html","hash":"e587990a05750f7e87148b169a5d155b973db677","modified":1481094665027},{"_id":"public/archives/2016/12/index.html","hash":"f77346ec251b358456175e135cf34283d7ee4e26","modified":1481094665027},{"_id":"public/tags/Editor/index.html","hash":"b016ca8681cb5d48201d7f4cc34f79e2d415b611","modified":1481094665027},{"_id":"public/tags/note/index.html","hash":"f05d9fdf1e33eea471d61f3e6271bf3c42d9176c","modified":1481094665027},{"_id":"public/tags/npm/index.html","hash":"4a826c1ea638014b0d59a41568f41144695dea06","modified":1481094665027},{"_id":"public/tags/node/index.html","hash":"737674fed4f3b0017338cb572252c42ef6f89574","modified":1481094665027},{"_id":"public/tags/nvm/index.html","hash":"38b35cdf8887a7ff7ce739861bad2116147476dd","modified":1481094665027},{"_id":"public/tags/博客/index.html","hash":"66db25a99332508a65a947a9366ed59e4059ed7a","modified":1481094665027},{"_id":"public/tags/经验/index.html","hash":"dadb94c741b6538337a5942ed409437e20a648a0","modified":1481094665027},{"_id":"public/tags/GIT/index.html","hash":"5e17629fca520cbed8a4435fafa269cae1924ebe","modified":1481094665027},{"_id":"public/tags/SSH/index.html","hash":"0d4d8776ecb4e4092991073be22b2519522a3fd0","modified":1481094665028},{"_id":"public/tags/笔记/index.html","hash":"e56ecddc0da4f3a0e0e2fe2713c057b0d4334b0f","modified":1481094665028},{"_id":"public/tags/框架搭建/index.html","hash":"e2651f5c54dd9c038c534d4c96aa46bb40dd6ad4","modified":1481094665028},{"_id":"public/tags/html-webpack-plugin/index.html","hash":"f4348b23c22dce0c3dba83973547c5d5d21e4659","modified":1481094665028},{"_id":"public/tags/angular基础/index.html","hash":"bcb36215481aff4d5f1cd5aabc3b00c89a4f116a","modified":1481094665028},{"_id":"public/tags/数据绑定/index.html","hash":"6d0f7ca169787ee810ba2ec16bffdb09de8bb7c2","modified":1481094665028},{"_id":"public/tags/Angular-Material/index.html","hash":"7c1270e9ef2f7dec233f7f1c177703e0d6b299f6","modified":1481094665028},{"_id":"public/tags/Dynamic-Themes/index.html","hash":"3bf3f1d006c5948f974a6d92feead9f325431d12","modified":1481094665029},{"_id":"public/tags/Themes/index.html","hash":"4da5c1f27a0c2c9397e8b4851de5172776cc0b9c","modified":1481094665029},{"_id":"public/tags/ES6/index.html","hash":"a8ee8bbf3c6e44d26917f86fab841a7c541de0d4","modified":1481094665029},{"_id":"public/tags/Bootstrap/index.html","hash":"2624f0f058ff134f5aa4961f81c29097c2de592f","modified":1481094665029},{"_id":"public/tags/ngController/index.html","hash":"0400a693c88c9494eb44ec58bd35e1c627f77aac","modified":1481094665029},{"_id":"public/tags/ui-router/index.html","hash":"e5d9187eec8cfbaa113872fec9aaaca3a7f59fd7","modified":1481094665029},{"_id":"public/tags/HTML5/index.html","hash":"7da5e72f68d1eeafa86ad509907926bb586a4a1c","modified":1481094665029},{"_id":"public/404.html","hash":"1bc3b0ea1eee31dc2bbea3e70dae5f600640fa7d","modified":1481094665029},{"_id":"public/2016/12/06/2016-12-06/index.html","hash":"12ff1d473e7cde40602207a44b8939b3936ab050","modified":1481094665029},{"_id":"public/2016/12/02/2016-12-02/index.html","hash":"9b39a2c9e9fb3563d77b9efc3b3d65f6b23d9c44","modified":1481094665029},{"_id":"public/2016/11/30/2016-11-30-1/index.html","hash":"e0ad5a651336a7ff63822b34d8aff2105fee11be","modified":1481094665029},{"_id":"public/2016/11/09/2016-11-09/index.html","hash":"761b445169729b8c8adab633d96c2af05988bf36","modified":1481094665029},{"_id":"public/2016/10/25/2016-10-25-1/index.html","hash":"ca2d10a7c815bdfea4efd010c16d3fc5860b181b","modified":1481094665029},{"_id":"public/2016/10/21/2016-10-21-1/index.html","hash":"f1af138b9cbd2712e7c35820e5a78702f3fa95c3","modified":1481094665029},{"_id":"public/2016/10/12/2016-10-17/index.html","hash":"43cd36016716fa292d1f765ebcd0308bbee49b59","modified":1481094665029},{"_id":"public/2016/09/12/2016-10-13/index.html","hash":"65d09ce92b5e4e05a39eaedd7739d58924aacec6","modified":1481094665030},{"_id":"public/2016/07/12/2016-10-17-1/index.html","hash":"9e1ed5f61d7de4803a0d395b975ec64ba6fd4175","modified":1481094665030},{"_id":"public/2016/02/17/2016-10-17-2/index.html","hash":"a701f75bff7ef51bcb5e5972c0f088941dfbf201","modified":1481094665030},{"_id":"public/2016/02/17/hello-world/index.html","hash":"0fdda2d83b420bfd96363dbff072f569806f1bbf","modified":1481094665030},{"_id":"public/archives/index.html","hash":"2b15d1eb74a75c82fa1cfc91f25f86fb87a98f2e","modified":1481094665030},{"_id":"public/archives/2016/index.html","hash":"0abd32a072befbbe87842daa234364288981622a","modified":1481094665030},{"_id":"public/archives/2016/11/index.html","hash":"eb683a3293fa8b1b698461a4c76b9eb11a162dbd","modified":1481094665030},{"_id":"public/index.html","hash":"051f161e70e1d92b73d6449fda8c1de69f052789","modified":1481094665030},{"_id":"public/page/2/index.html","hash":"141381a9ef820a96729905688b84467fbce79e31","modified":1481094665030},{"_id":"public/page/3/index.html","hash":"a58d342e1cce611b8b1b6996b9a2dc4b247c8fb1","modified":1481094665030},{"_id":"public/tags/前段/index.html","hash":"ab76ef98185bbbcef4327c29d35fa43b8a9cad87","modified":1481094665030},{"_id":"public/tags/webpack/index.html","hash":"e9a8b56cc825c2b723af3ea613238b7bfb43fdf7","modified":1481094665030},{"_id":"public/tags/Angular/index.html","hash":"49c19407e1350bace9b8db48e863d2a1fcecacd8","modified":1481094665030},{"_id":"public/CNAME","hash":"ba92a2b1bafeb7027e00b88faa52687a713b0864","modified":1481094665042},{"_id":"public/favicon.ico","hash":"e2f951540913c5fe254209eaa73af16a17e9d9cf","modified":1481094665042},{"_id":"public/avatar/avatar1.jpg","hash":"6e5e6a79ee6b237cb2b0b188550464960c72c343","modified":1481094665042},{"_id":"public/img/2016-10-21-2.png","hash":"1388d495c8c5d3b927107a8a05e944cf6ba29ab7","modified":1481094665042},{"_id":"public/avatar/avatar.jpg","hash":"fe90c70901709bec0287e4150844685998eacb7a","modified":1481094665042},{"_id":"public/img/2016-10-21.png","hash":"3e8b8843a73c99878bed0dd0dc79c60284efccda","modified":1481094665043},{"_id":"public/img/3px-tile.png","hash":"9e0edb051b8944b0d1cf2e53f4e0a27b08f23570","modified":1481094665043},{"_id":"public/img/2016-11-30.png","hash":"d4d7572b0ed4641734d42715d75ff68244ae83eb","modified":1481094665043},{"_id":"public/img/2016-10-21-1.png","hash":"c30c828eca3074417014ed4e513b61b02d8f05c1","modified":1481094665043},{"_id":"public/img/2016-10-21-3.png","hash":"9f00032f96397da7a2a169acac3dbefeaa9b6789","modified":1481094665043},{"_id":"public/img/concepts-startup.png","hash":"f64b6d171216c0bdb51bf89850927475bdf46319","modified":1481094665043},{"_id":"public/2favicon.ico","hash":"a1e455366b08099bad871f6e9b0b78ec2f1061dd","modified":1481094665049},{"_id":"public/main.js","hash":"591b5266281ba1840ac4e64b24e371449145d57c","modified":1481094665060},{"_id":"public/style.js","hash":"8fb389e6d3cb5e823729af8006079c92aeaf8c3b","modified":1481094665060},{"_id":"public/img/football-no-lines.png","hash":"63470b7b7d9c010e572585a2dcc9e6155c9c9e31","modified":1481094665065}],"Category":[],"Data":[],"Page":[{"_content":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","source":"404.html","raw":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","date":"2016-12-07T06:19:31.200Z","updated":"2016-12-07T06:19:31.200Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciweliqeh0000n0c582syg2qa","content":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","excerpt":"","more":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n\theight: 600px;\n}\ncanvas {\n    padding:0;\n    margin:0;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n    \n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n    \n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0, \n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n    \n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n    \n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n    \n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n    \n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n    \n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n    \n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n    \n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n    \n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n    \n    if(r > rstop) discard;\n    \n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n    \n    col = mix(fadeCol, col, distancefade);\n    \n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n    \n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n    \n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n    \n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n    \n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n    \n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n    \n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n    \n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n    \n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n    \n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n    \n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n    \n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n    \n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    \n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n    \n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n    \n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    \n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\t\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\t\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n    \n    if(vsh == null || fsh == null) {\n        return null;\n    }\n    \n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n    \n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n    \n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n    \n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n    \n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n    \n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n    \n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n    \n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n    \n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n    \n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n    \n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n    \n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    \n    unuseShader(pointFlower.program);\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n    \n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n    \n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n        \n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n        \n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n        \n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n        \n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n        \n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n    \n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n        \n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n        \n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n    \n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n    \n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n    \n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    \n    var prog = pointFlower.program;\n    useShader(prog);\n    \n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    \n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    \n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n        \n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n    \n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n    \n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n    \n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n    \n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n    \n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    \n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n        \n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n    \n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n    \n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n    \n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n    \n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n    \n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n    \n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n    \n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n    \n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n        \n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n    \n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n    \n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n    \n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n    \n    gl.enable(gl.DEPTH_TEST);\n    \n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n    \n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    \n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n    \n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n    \n    window.addEventListener('resize', onResize);\n    \n    setViewports();\n    createScene();\n    initScene();\n    \n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n"},{"layout":"post","slug":"instagram","title":"相册","noDate":"true","comments":0,"_content":"\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n","source":"instagram/index.ejs","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: false\n---\n\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n","date":"2016-12-07T06:19:31.200Z","updated":"2016-12-07T06:19:31.200Z","path":"instagram/index.html","_id":"ciweliqg00002n0c55ur9xfpg","content":"\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n","excerpt":"","more":"\n<div class=\"instagram\" data-client-id=\"54dd6dbe94ea4f9b9792586ff30be4d3\">\n\t<a href=\"http://instagram.com/my_ray\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n"}],"Post":[{"title":"Editor","date":"2016-09-12T00:55:00.000Z","_content":"# Editor.md\nmd示例～\n\n<!-- more -->\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2               \n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n\n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id]\n\n[anchor-id]: http://www.this-anchor-link.com/\n\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\n\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n\n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test() {\n\tconsole.log(\"Hello world!\");\n}\n\n(function(){\n    var box = function() {\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str) {\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str) {\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n\n    box.fn.init.prototype = box.fn;\n\n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML 代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\n        <title>Hello world!</title>\n        <style type=\"text/css\">\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\n            ul{list-style: none;}\n            img{border:none;vertical-align: middle;}\n        </style>\n    </head>\n    <body>\n        <h1 class=\"text-xxl\">Hello world!</h1>\n        <p class=\"text-green\">Plain text</p>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n\n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n\n- 列表一\n- 列表二\n- 列表三\n\n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n\n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n\n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n\n----\n\n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n\n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;\n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n[========]\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao;\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n\n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n\n[========]\n\n### 科学公式 TeX(KaTeX)\n\n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$x > y$$\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle\n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        }\n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n### 分页符 Page break\n\n> Print Test: Ctrl + P\n\n[========]\n\n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[========]\n\n### 绘制序列图 Sequence Diagram\n\n```seq\nAndrew->China: Says Hello\nNote right of China: China thinks\\nabout it\nChina-->Andrew: How are you?\nAndrew->>China: I am good thanks!\n```\n\n### End\n","source":"_posts/2016-10-13.md","raw":"---\ntitle: Editor\ndate: 2016-09-12 08:55\ntags:\n- Editor\n---\n# Editor.md\nmd示例～\n\n<!-- more -->\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2               \n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n\n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id]\n\n[anchor-id]: http://www.this-anchor-link.com/\n\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\n\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n\n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test() {\n\tconsole.log(\"Hello world!\");\n}\n\n(function(){\n    var box = function() {\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str) {\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str) {\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n\n    box.fn.init.prototype = box.fn;\n\n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML 代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\n        <title>Hello world!</title>\n        <style type=\"text/css\">\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\n            ul{list-style: none;}\n            img{border:none;vertical-align: middle;}\n        </style>\n    </head>\n    <body>\n        <h1 class=\"text-xxl\">Hello world!</h1>\n        <p class=\"text-green\">Plain text</p>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n\n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n\n- 列表一\n- 列表二\n- 列表三\n\n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n\n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n\n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n\n----\n\n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n\n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;\n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n[========]\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao;\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n\n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n\n[========]\n\n### 科学公式 TeX(KaTeX)\n\n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$x > y$$\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle\n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        }\n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n### 分页符 Page break\n\n> Print Test: Ctrl + P\n\n[========]\n\n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[========]\n\n### 绘制序列图 Sequence Diagram\n\n```seq\nAndrew->China: Says Hello\nNote right of China: China thinks\\nabout it\nChina-->Andrew: How are you?\nAndrew->>China: I am good thanks!\n```\n\n### End\n","slug":"2016-10-13","published":1,"updated":"2016-12-07T06:18:27.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciweliqfw0001n0c5weqhjkzf","content":"<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p>md示例～</p>\n<a id=\"more\"></a>\n<p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\" alt=\"\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\" alt=\"\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\" target=\"_blank\" rel=\"external\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\" target=\"_blank\" rel=\"external\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\" target=\"_blank\" rel=\"external\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\" target=\"_blank\" rel=\"external\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\" target=\"_blank\" rel=\"external\">锚点链接</a></p>\n<p><a href=\"mailto:test.test@gmail.com\" target=\"_blank\" rel=\"external\">mailto:test.test@gmail.com</a></p>\n<p>GFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com</p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre><p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre><h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码　\"></a>JS代码　</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> box.fn.init();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.prototype = box.fn = &#123;</div><div class=\"line\">        <span class=\"attr\">init</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'box.init()'</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"add\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">remove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"remove\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.fn.init.prototype = box.fn;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">window</span>.box =box;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testBox = box();</div><div class=\"line\">testBox.add(<span class=\"string\">\"jQuery\"</span>).remove(<span class=\"string\">\"jQuery\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"HTML-代码-HTML-codes\"><a href=\"#HTML-代码-HTML-codes\" class=\"headerlink\" title=\"HTML 代码 HTML codes\"></a>HTML 代码 HTML codes</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Editor.md, Markdown, Editor\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">            body&#123;font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;&#125;</div><div class=\"line\">            ul&#123;list-style: none;&#125;</div><div class=\"line\">            img&#123;border:none;vertical-align: middle;&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-xxl\"</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-green\"</span>&gt;</span>Plain text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\" alt=\"\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\" target=\"_blank\" rel=\"external\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\" alt=\"\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li>[x] GFM task list 1</li>\n<li>[x] GFM task list 2</li>\n<li>[ ] GFM task list 3<ul>\n<li>[ ] GFM task list 3-1</li>\n<li>[ ] GFM task list 3-2</li>\n<li>[ ] GFM task list 3-3</li>\n</ul>\n</li>\n<li>[ ] GFM task list 4<ul>\n<li>[ ] GFM task list 4-1</li>\n<li>[ ] GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th style=\"text-align:right\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p>\n<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>\n<p>18&ordm;C  &quot;  &apos;</p>\n<p>[========]</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 :smiley:</h3><blockquote>\n<p>Blockquotes :star:</p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li>[x] :smiley: @mentions, :smiley: #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li>[x] [ ] :smiley: this is a complete item :smiley:;</li>\n<li>[ ] []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao;</li>\n<li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li>[ ] :smiley: this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<p>[========]</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>\n<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>\n<p>$$x &gt; y$$</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2</div><div class=\"line\">\\leq</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">    \\frac&#123;1&#125;&#123;</div><div class=\"line\">        \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;</div><div class=\"line\">        \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;</div><div class=\"line\">        1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;</div><div class=\"line\">        &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125;</div><div class=\"line\">         &#123;1+\\cdots&#125; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f(x) = \\int_&#123;-\\infty&#125;^\\infty</div><div class=\"line\">    \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125;</div><div class=\"line\">    \\,d\\xi</div></pre></td></tr></table></figure>\n<h3 id=\"分页符-Page-break\"><a href=\"#分页符-Page-break\" class=\"headerlink\" title=\"分页符 Page break\"></a>分页符 Page break</h3><blockquote>\n<p>Print Test: Ctrl + P</p>\n</blockquote>\n<p>[========]</p>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 用户登陆</div><div class=\"line\">op=&gt;operation: 登陆操作</div><div class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</div><div class=\"line\">e=&gt;end: 进入后台</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<p>[========]</p>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Andrew-&gt;China: Says Hello</div><div class=\"line\">Note right of China: China thinks\\nabout it</div><div class=\"line\">China--&gt;Andrew: How are you?</div><div class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>","excerpt":"<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p>md示例～</p>","more":"<p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\" alt=\"\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\" alt=\"\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\">锚点链接</a></p>\n<p><a href=\"mailto:test.test@gmail.com\">mailto:test.test@gmail.com</a></p>\n<p>GFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com</p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre><p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre><h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码　\"></a>JS代码　</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> box.fn.init();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.prototype = box.fn = &#123;</div><div class=\"line\">        <span class=\"attr\">init</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'box.init()'</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"add\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"attr\">remove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">\t\t\talert(<span class=\"string\">\"remove\"</span>, str);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    box.fn.init.prototype = box.fn;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">window</span>.box =box;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testBox = box();</div><div class=\"line\">testBox.add(<span class=\"string\">\"jQuery\"</span>).remove(<span class=\"string\">\"jQuery\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"HTML-代码-HTML-codes\"><a href=\"#HTML-代码-HTML-codes\" class=\"headerlink\" title=\"HTML 代码 HTML codes\"></a>HTML 代码 HTML codes</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Editor.md, Markdown, Editor\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">            body&#123;font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;&#125;</div><div class=\"line\">            ul&#123;list-style: none;&#125;</div><div class=\"line\">            img&#123;border:none;vertical-align: middle;&#125;</div><div class=\"line\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-xxl\"</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-green\"</span>&gt;</span>Plain text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\" alt=\"\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\" alt=\"\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li>[x] GFM task list 1</li>\n<li>[x] GFM task list 2</li>\n<li>[ ] GFM task list 3<ul>\n<li>[ ] GFM task list 3-1</li>\n<li>[ ] GFM task list 3-2</li>\n<li>[ ] GFM task list 3-3</li>\n</ul>\n</li>\n<li>[ ] GFM task list 4<ul>\n<li>[ ] GFM task list 4-1</li>\n<li>[ ] GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th style=\"text-align:right\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot;</p>\n<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>\n<p>18&ordm;C  &quot;  &apos;</p>\n<p>[========]</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 :smiley:</h3><blockquote>\n<p>Blockquotes :star:</p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li>[x] :smiley: @mentions, :smiley: #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li>[x] [ ] :smiley: this is a complete item :smiley:;</li>\n<li>[ ] []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao;</li>\n<li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li>[ ] :smiley: this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<p>[========]</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>\n<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>\n<p>$$x &gt; y$$</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2</div><div class=\"line\">\\leq</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)</div><div class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right)</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\displaystyle</div><div class=\"line\">    \\frac&#123;1&#125;&#123;</div><div class=\"line\">        \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;</div><div class=\"line\">        \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;</div><div class=\"line\">        1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;</div><div class=\"line\">        &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125;</div><div class=\"line\">         &#123;1+\\cdots&#125; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f(x) = \\int_&#123;-\\infty&#125;^\\infty</div><div class=\"line\">    \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125;</div><div class=\"line\">    \\,d\\xi</div></pre></td></tr></table></figure>\n<h3 id=\"分页符-Page-break\"><a href=\"#分页符-Page-break\" class=\"headerlink\" title=\"分页符 Page break\"></a>分页符 Page break</h3><blockquote>\n<p>Print Test: Ctrl + P</p>\n</blockquote>\n<p>[========]</p>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 用户登陆</div><div class=\"line\">op=&gt;operation: 登陆操作</div><div class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</div><div class=\"line\">e=&gt;end: 进入后台</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<p>[========]</p>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Andrew-&gt;China: Says Hello</div><div class=\"line\">Note right of China: China thinks\\nabout it</div><div class=\"line\">China--&gt;Andrew: How are you?</div><div class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>"},{"layout":"post","title":"npm","date":"2016-02-17T00:55:00.000Z","comments":1,"_content":"\n### 淘宝镜像：\n> --registry=https://registry.npm.taobao.org\n\n<!-- more -->\n\n镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:\n\n##### 1.通过config命令\n>npm config set registry https://registry.npm.taobao.org\n>npm info underscore （如果上面配置正确这个命令会有字符串response）\n\n##### 2.命令行指定\n>npm --registry https://registry.npm.taobao.org info underscore\n\n##### 3.编辑 ~/.npmrc 加入下面内容\n>registry = https://registry.npm.taobao.org\n\n### 命令\n\n##### 安装包，默认会安装最新的版本\n>npm install gulp\n\n##### 安装指定版本\n>npm install gulp@3.9.1\n\n##### -S, --save 安装包信息将加入到dependencies（生产阶段的依赖）\n>npm install gulp --save 或 npm install gulp -S\n\n##### package.json 文件的 dependencies 字段：\n```\n\"dependencies\": {\n    \"gulp\": \"^3.9.1\"\n}\n```\n##### -D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\n>npm install gulp --save-dev 或 npm install gulp -D\npackage.json 文件的 devDependencies字段：\n```\n\"devDependencies\": {\n    \"gulp\": \"^3.9.1\"\n}\n```\n##### -O, --save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）\n\n>npm install gulp --save-optional 或 npm install gulp -O\npackage.json 文件的optionalDependencies字段：\n```\n\"optionalDependencies\": {\n    \"gulp\": \"^3.9.1\"\n}\n```\n##### -E, --save-exact 精确安装指定模块版本\n\n>npm install gulp --save-exact 或 npm install gulp -E\n输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了\n```\n\"dependencies\": {\n    \"gulp\": \"3.9.1\"\n}\n```\n模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包\n>npm install\n\n##### 本地安装（local）\n>npm install gulp\n\n##### 全局安装（global）,使用 -g 或 --global\n>npm install gulp -g\n>npm uninstall 卸载模块\n\n##### 基础语法\n>npm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|-D|--save-dev|-O|--save-optional]\n>aliases: remove, rm, r, un, unlink\n\n##### 如卸载开发版本的模块\n>npm uninstall gulp --save-dev\n","source":"_posts/2016-10-17-2.md","raw":"---\nlayout: post\ntitle:  npm\ndate: 2016-02-17 08:55\ncomments: true\ntags:\n- 前段\n- note\n- npm\n---\n\n### 淘宝镜像：\n> --registry=https://registry.npm.taobao.org\n\n<!-- more -->\n\n镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:\n\n##### 1.通过config命令\n>npm config set registry https://registry.npm.taobao.org\n>npm info underscore （如果上面配置正确这个命令会有字符串response）\n\n##### 2.命令行指定\n>npm --registry https://registry.npm.taobao.org info underscore\n\n##### 3.编辑 ~/.npmrc 加入下面内容\n>registry = https://registry.npm.taobao.org\n\n### 命令\n\n##### 安装包，默认会安装最新的版本\n>npm install gulp\n\n##### 安装指定版本\n>npm install gulp@3.9.1\n\n##### -S, --save 安装包信息将加入到dependencies（生产阶段的依赖）\n>npm install gulp --save 或 npm install gulp -S\n\n##### package.json 文件的 dependencies 字段：\n```\n\"dependencies\": {\n    \"gulp\": \"^3.9.1\"\n}\n```\n##### -D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\n>npm install gulp --save-dev 或 npm install gulp -D\npackage.json 文件的 devDependencies字段：\n```\n\"devDependencies\": {\n    \"gulp\": \"^3.9.1\"\n}\n```\n##### -O, --save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）\n\n>npm install gulp --save-optional 或 npm install gulp -O\npackage.json 文件的optionalDependencies字段：\n```\n\"optionalDependencies\": {\n    \"gulp\": \"^3.9.1\"\n}\n```\n##### -E, --save-exact 精确安装指定模块版本\n\n>npm install gulp --save-exact 或 npm install gulp -E\n输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了\n```\n\"dependencies\": {\n    \"gulp\": \"3.9.1\"\n}\n```\n模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包\n>npm install\n\n##### 本地安装（local）\n>npm install gulp\n\n##### 全局安装（global）,使用 -g 或 --global\n>npm install gulp -g\n>npm uninstall 卸载模块\n\n##### 基础语法\n>npm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|-D|--save-dev|-O|--save-optional]\n>aliases: remove, rm, r, un, unlink\n\n##### 如卸载开发版本的模块\n>npm uninstall gulp --save-dev\n","slug":"2016-10-17-2","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqg40003n0c5gc7qwq6b","content":"<h3 id=\"淘宝镜像：\"><a href=\"#淘宝镜像：\" class=\"headerlink\" title=\"淘宝镜像：\"></a>淘宝镜像：</h3><blockquote>\n<p>–registry=<a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"external\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>\n<h5 id=\"1-通过config命令\"><a href=\"#1-通过config命令\" class=\"headerlink\" title=\"1.通过config命令\"></a>1.通过config命令</h5><blockquote>\n<p>npm config set registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"external\">https://registry.npm.taobao.org</a><br>npm info underscore （如果上面配置正确这个命令会有字符串response）</p>\n</blockquote>\n<h5 id=\"2-命令行指定\"><a href=\"#2-命令行指定\" class=\"headerlink\" title=\"2.命令行指定\"></a>2.命令行指定</h5><blockquote>\n<p>npm –registry <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"external\">https://registry.npm.taobao.org</a> info underscore</p>\n</blockquote>\n<h5 id=\"3-编辑-npmrc-加入下面内容\"><a href=\"#3-编辑-npmrc-加入下面内容\" class=\"headerlink\" title=\"3.编辑 ~/.npmrc 加入下面内容\"></a>3.编辑 ~/.npmrc 加入下面内容</h5><blockquote>\n<p>registry = <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"external\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><h5 id=\"安装包，默认会安装最新的版本\"><a href=\"#安装包，默认会安装最新的版本\" class=\"headerlink\" title=\"安装包，默认会安装最新的版本\"></a>安装包，默认会安装最新的版本</h5><blockquote>\n<p>npm install gulp</p>\n</blockquote>\n<h5 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h5><blockquote>\n<p>npm install gulp@3.9.1</p>\n</blockquote>\n<h5 id=\"S-–save-安装包信息将加入到dependencies（生产阶段的依赖）\"><a href=\"#S-–save-安装包信息将加入到dependencies（生产阶段的依赖）\" class=\"headerlink\" title=\"-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）\"></a>-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）</h5><blockquote>\n<p>npm install gulp –save 或 npm install gulp -S</p>\n</blockquote>\n<h5 id=\"package-json-文件的-dependencies-字段：\"><a href=\"#package-json-文件的-dependencies-字段：\" class=\"headerlink\" title=\"package.json 文件的 dependencies 字段：\"></a>package.json 文件的 dependencies 字段：</h5><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"D-–save-dev-安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\"><a href=\"#D-–save-dev-安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\" class=\"headerlink\" title=\"-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\"></a>-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</h5><blockquote>\n<p>npm install gulp –save-dev 或 npm install gulp -D<br>package.json 文件的 devDependencies字段：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"O-–save-optional-安装包信息将加入到optionalDependencies（可选阶段的依赖）\"><a href=\"#O-–save-optional-安装包信息将加入到optionalDependencies（可选阶段的依赖）\" class=\"headerlink\" title=\"-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）\"></a>-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</h5><blockquote>\n<p>npm install gulp –save-optional 或 npm install gulp -O<br>package.json 文件的optionalDependencies字段：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"optionalDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"E-–save-exact-精确安装指定模块版本\"><a href=\"#E-–save-exact-精确安装指定模块版本\" class=\"headerlink\" title=\"-E, –save-exact 精确安装指定模块版本\"></a>-E, –save-exact 精确安装指定模块版本</h5><blockquote>\n<p>npm install gulp –save-exact 或 npm install gulp -E<br>输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包</p>\n<blockquote>\n<p>npm install</p>\n</blockquote>\n<h5 id=\"本地安装（local）\"><a href=\"#本地安装（local）\" class=\"headerlink\" title=\"本地安装（local）\"></a>本地安装（local）</h5><blockquote>\n<p>npm install gulp</p>\n</blockquote>\n<h5 id=\"全局安装（global）-使用-g-或-–global\"><a href=\"#全局安装（global）-使用-g-或-–global\" class=\"headerlink\" title=\"全局安装（global）,使用 -g 或 –global\"></a>全局安装（global）,使用 -g 或 –global</h5><blockquote>\n<p>npm install gulp -g<br>npm uninstall 卸载模块</p>\n</blockquote>\n<h5 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h5><blockquote>\n<p>npm uninstall [&lt;@scope&gt;/]<pkg>[@<version>]… [-S|–save|-D|–save-dev|-O|–save-optional]<br>aliases: remove, rm, r, un, unlink</version></pkg></p>\n</blockquote>\n<h5 id=\"如卸载开发版本的模块\"><a href=\"#如卸载开发版本的模块\" class=\"headerlink\" title=\"如卸载开发版本的模块\"></a>如卸载开发版本的模块</h5><blockquote>\n<p>npm uninstall gulp –save-dev</p>\n</blockquote>\n","excerpt":"<h3 id=\"淘宝镜像：\"><a href=\"#淘宝镜像：\" class=\"headerlink\" title=\"淘宝镜像：\"></a>淘宝镜像：</h3><blockquote>\n<p>–registry=<a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a></p>\n</blockquote>","more":"<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>\n<h5 id=\"1-通过config命令\"><a href=\"#1-通过config命令\" class=\"headerlink\" title=\"1.通过config命令\"></a>1.通过config命令</h5><blockquote>\n<p>npm config set registry <a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a><br>npm info underscore （如果上面配置正确这个命令会有字符串response）</p>\n</blockquote>\n<h5 id=\"2-命令行指定\"><a href=\"#2-命令行指定\" class=\"headerlink\" title=\"2.命令行指定\"></a>2.命令行指定</h5><blockquote>\n<p>npm –registry <a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a> info underscore</p>\n</blockquote>\n<h5 id=\"3-编辑-npmrc-加入下面内容\"><a href=\"#3-编辑-npmrc-加入下面内容\" class=\"headerlink\" title=\"3.编辑 ~/.npmrc 加入下面内容\"></a>3.编辑 ~/.npmrc 加入下面内容</h5><blockquote>\n<p>registry = <a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a></p>\n</blockquote>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><h5 id=\"安装包，默认会安装最新的版本\"><a href=\"#安装包，默认会安装最新的版本\" class=\"headerlink\" title=\"安装包，默认会安装最新的版本\"></a>安装包，默认会安装最新的版本</h5><blockquote>\n<p>npm install gulp</p>\n</blockquote>\n<h5 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h5><blockquote>\n<p>npm install gulp@3.9.1</p>\n</blockquote>\n<h5 id=\"S-–save-安装包信息将加入到dependencies（生产阶段的依赖）\"><a href=\"#S-–save-安装包信息将加入到dependencies（生产阶段的依赖）\" class=\"headerlink\" title=\"-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）\"></a>-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）</h5><blockquote>\n<p>npm install gulp –save 或 npm install gulp -S</p>\n</blockquote>\n<h5 id=\"package-json-文件的-dependencies-字段：\"><a href=\"#package-json-文件的-dependencies-字段：\" class=\"headerlink\" title=\"package.json 文件的 dependencies 字段：\"></a>package.json 文件的 dependencies 字段：</h5><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"D-–save-dev-安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\"><a href=\"#D-–save-dev-安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\" class=\"headerlink\" title=\"-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它\"></a>-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它</h5><blockquote>\n<p>npm install gulp –save-dev 或 npm install gulp -D<br>package.json 文件的 devDependencies字段：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"O-–save-optional-安装包信息将加入到optionalDependencies（可选阶段的依赖）\"><a href=\"#O-–save-optional-安装包信息将加入到optionalDependencies（可选阶段的依赖）\" class=\"headerlink\" title=\"-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）\"></a>-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</h5><blockquote>\n<p>npm install gulp –save-optional 或 npm install gulp -O<br>package.json 文件的optionalDependencies字段：<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"optionalDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"^3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"E-–save-exact-精确安装指定模块版本\"><a href=\"#E-–save-exact-精确安装指定模块版本\" class=\"headerlink\" title=\"-E, –save-exact 精确安装指定模块版本\"></a>-E, –save-exact 精确安装指定模块版本</h5><blockquote>\n<p>npm install gulp –save-exact 或 npm install gulp -E<br>输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了<br><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"gulp\"</span>: <span class=\"string\">\"3.9.1\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包</p>\n<blockquote>\n<p>npm install</p>\n</blockquote>\n<h5 id=\"本地安装（local）\"><a href=\"#本地安装（local）\" class=\"headerlink\" title=\"本地安装（local）\"></a>本地安装（local）</h5><blockquote>\n<p>npm install gulp</p>\n</blockquote>\n<h5 id=\"全局安装（global）-使用-g-或-–global\"><a href=\"#全局安装（global）-使用-g-或-–global\" class=\"headerlink\" title=\"全局安装（global）,使用 -g 或 –global\"></a>全局安装（global）,使用 -g 或 –global</h5><blockquote>\n<p>npm install gulp -g<br>npm uninstall 卸载模块</p>\n</blockquote>\n<h5 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h5><blockquote>\n<p>npm uninstall [&lt;@scope&gt;/]<pkg>[@<version>]… [-S|–save|-D|–save-dev|-O|–save-optional]<br>aliases: remove, rm, r, un, unlink</p>\n</blockquote>\n<h5 id=\"如卸载开发版本的模块\"><a href=\"#如卸载开发版本的模块\" class=\"headerlink\" title=\"如卸载开发版本的模块\"></a>如卸载开发版本的模块</h5><blockquote>\n<p>npm uninstall gulp –save-dev</p>\n</blockquote>"},{"layout":"post","title":"node 安装","date":"2016-07-12T00:55:00.000Z","comments":1,"_content":"\n\n### 卸载node\n>$  nvm uninstall --lts\n>$  sudo apt-get remove nodejs\n>$  apt-get autoremove nodejs\n\n<!-- more -->\n\n### 删除node\n>$  sudo find ~/ -name <查找的文件名字>\n### 删除npm\n\n### 安装nvm\n>$  curl -o- https:###raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n\n### 将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n### 应用源文件\n>$  source 　/.bashrc, ~/.profile, or ~/.zshrc\n\n### 验证安装是否成功\n>$  command -v nvm\n\n### 查看所有的node版本\n>$  nvm ls-remote\n\n### 安装node版本\n>$  nvm install --lts　　\n\n### 查看安装是否成功\n>$  node -v\n>$  npm -v\n\n### 安装hexo\n>$  npm install -g hexo-cli\n\n### 初始化博客信息\n>$  hexo init <folder>\n>$  cd <folder>\n\n### 安装博客需要的插件\n>$  npm install\n\n### 生成静态页面\n>$ hexo generate（hexo g也可以）\n\n### 本地启动\n>$  hexo server\n>Hexo is running at http://localhost:4000/. Press `Ctrl+C` to stop.\n\n### 建立Repository\n>gedit  _config.yml\n\n```\ndeploy:\n     type: git\n     repo: git@github.com:myoneray/myoneray.github.com.git\n     branch: master\n```\n### 然后执行命令：\n> npm install hexo-deployer-git --save\n\n### 设置当前node版本\n>nvm use --delete-prefix v6.0.0\n\n### 设置当前默认的node版本\nnvm alias default v6.0.0\n\n### 获取npm 安装的路径\nnpm config get prefix\n\n### 查看当前PATH\necho  $PATH\n\n### 安装tree\nsudo apt-get install tree\n\n### 显示所有的npm　默认配置\nnpm config ls -l\n\n### 显示npm配置\nnpm config list\n\n### npm找不到\nn=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local\n","source":"_posts/2016-10-17-1.md","raw":"---\nlayout: post\ntitle:  node 安装\ndate: 2016-07-12 08:55\ncomments: true\ntags:\n- 前段\n- node\n- nvm\n- npm\n---\n\n\n### 卸载node\n>$  nvm uninstall --lts\n>$  sudo apt-get remove nodejs\n>$  apt-get autoremove nodejs\n\n<!-- more -->\n\n### 删除node\n>$  sudo find ~/ -name <查找的文件名字>\n### 删除npm\n\n### 安装nvm\n>$  curl -o- https:###raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash\n\n### 将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中\n```\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n### 应用源文件\n>$  source 　/.bashrc, ~/.profile, or ~/.zshrc\n\n### 验证安装是否成功\n>$  command -v nvm\n\n### 查看所有的node版本\n>$  nvm ls-remote\n\n### 安装node版本\n>$  nvm install --lts　　\n\n### 查看安装是否成功\n>$  node -v\n>$  npm -v\n\n### 安装hexo\n>$  npm install -g hexo-cli\n\n### 初始化博客信息\n>$  hexo init <folder>\n>$  cd <folder>\n\n### 安装博客需要的插件\n>$  npm install\n\n### 生成静态页面\n>$ hexo generate（hexo g也可以）\n\n### 本地启动\n>$  hexo server\n>Hexo is running at http://localhost:4000/. Press `Ctrl+C` to stop.\n\n### 建立Repository\n>gedit  _config.yml\n\n```\ndeploy:\n     type: git\n     repo: git@github.com:myoneray/myoneray.github.com.git\n     branch: master\n```\n### 然后执行命令：\n> npm install hexo-deployer-git --save\n\n### 设置当前node版本\n>nvm use --delete-prefix v6.0.0\n\n### 设置当前默认的node版本\nnvm alias default v6.0.0\n\n### 获取npm 安装的路径\nnpm config get prefix\n\n### 查看当前PATH\necho  $PATH\n\n### 安装tree\nsudo apt-get install tree\n\n### 显示所有的npm　默认配置\nnpm config ls -l\n\n### 显示npm配置\nnpm config list\n\n### npm找不到\nn=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local\n","slug":"2016-10-17-1","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqga0005n0c54mion7wy","content":"<h3 id=\"卸载node\"><a href=\"#卸载node\" class=\"headerlink\" title=\"卸载node\"></a>卸载node</h3><blockquote>\n<p>$  nvm uninstall –lts<br>$  sudo apt-get remove nodejs<br>$  apt-get autoremove nodejs</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"删除node\"><a href=\"#删除node\" class=\"headerlink\" title=\"删除node\"></a>删除node</h3><blockquote>\n<p>$  sudo find ~/ -name &lt;查找的文件名字&gt;</p>\n<h3 id=\"删除npm\"><a href=\"#删除npm\" class=\"headerlink\" title=\"删除npm\"></a>删除npm</h3></blockquote>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><blockquote>\n<p>$  curl -o- https:###raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</p>\n</blockquote>\n<h3 id=\"将这些信息复制到-bashrc-profile-or-zshrc中\"><a href=\"#将这些信息复制到-bashrc-profile-or-zshrc中\" class=\"headerlink\" title=\"将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中\"></a>将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></div></pre></td></tr></table></figure>\n<h3 id=\"应用源文件\"><a href=\"#应用源文件\" class=\"headerlink\" title=\"应用源文件\"></a>应用源文件</h3><blockquote>\n<p>$  source 　/.bashrc, ~/.profile, or ~/.zshrc</p>\n</blockquote>\n<h3 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h3><blockquote>\n<p>$  command -v nvm</p>\n</blockquote>\n<h3 id=\"查看所有的node版本\"><a href=\"#查看所有的node版本\" class=\"headerlink\" title=\"查看所有的node版本\"></a>查看所有的node版本</h3><blockquote>\n<p>$  nvm ls-remote</p>\n</blockquote>\n<h3 id=\"安装node版本\"><a href=\"#安装node版本\" class=\"headerlink\" title=\"安装node版本\"></a>安装node版本</h3><blockquote>\n<p>$  nvm install –lts　　</p>\n</blockquote>\n<h3 id=\"查看安装是否成功\"><a href=\"#查看安装是否成功\" class=\"headerlink\" title=\"查看安装是否成功\"></a>查看安装是否成功</h3><blockquote>\n<p>$  node -v<br>$  npm -v</p>\n</blockquote>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><blockquote>\n<p>$  npm install -g hexo-cli</p>\n</blockquote>\n<h3 id=\"初始化博客信息\"><a href=\"#初始化博客信息\" class=\"headerlink\" title=\"初始化博客信息\"></a>初始化博客信息</h3><blockquote>\n<p>$  hexo init <folder><br>$  cd <folder></folder></folder></p>\n</blockquote>\n<h3 id=\"安装博客需要的插件\"><a href=\"#安装博客需要的插件\" class=\"headerlink\" title=\"安装博客需要的插件\"></a>安装博客需要的插件</h3><blockquote>\n<p>$  npm install</p>\n</blockquote>\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><blockquote>\n<p>$ hexo generate（hexo g也可以）</p>\n</blockquote>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><blockquote>\n<p>$  hexo server<br>Hexo is running at <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>. Press <code>Ctrl+C</code> to stop.</p>\n</blockquote>\n<h3 id=\"建立Repository\"><a href=\"#建立Repository\" class=\"headerlink\" title=\"建立Repository\"></a>建立Repository</h3><blockquote>\n<p>gedit  _config.yml</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">     <span class=\"attribute\">type</span>: git</div><div class=\"line\">     <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:myoneray/myoneray.github.com.git</div><div class=\"line\">     <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<h3 id=\"然后执行命令：\"><a href=\"#然后执行命令：\" class=\"headerlink\" title=\"然后执行命令：\"></a>然后执行命令：</h3><blockquote>\n<p>npm install hexo-deployer-git –save</p>\n</blockquote>\n<h3 id=\"设置当前node版本\"><a href=\"#设置当前node版本\" class=\"headerlink\" title=\"设置当前node版本\"></a>设置当前node版本</h3><blockquote>\n<p>nvm use –delete-prefix v6.0.0</p>\n</blockquote>\n<h3 id=\"设置当前默认的node版本\"><a href=\"#设置当前默认的node版本\" class=\"headerlink\" title=\"设置当前默认的node版本\"></a>设置当前默认的node版本</h3><p>nvm alias default v6.0.0</p>\n<h3 id=\"获取npm-安装的路径\"><a href=\"#获取npm-安装的路径\" class=\"headerlink\" title=\"获取npm 安装的路径\"></a>获取npm 安装的路径</h3><p>npm config get prefix</p>\n<h3 id=\"查看当前PATH\"><a href=\"#查看当前PATH\" class=\"headerlink\" title=\"查看当前PATH\"></a>查看当前PATH</h3><p>echo  $PATH</p>\n<h3 id=\"安装tree\"><a href=\"#安装tree\" class=\"headerlink\" title=\"安装tree\"></a>安装tree</h3><p>sudo apt-get install tree</p>\n<h3 id=\"显示所有的npm-默认配置\"><a href=\"#显示所有的npm-默认配置\" class=\"headerlink\" title=\"显示所有的npm　默认配置\"></a>显示所有的npm　默认配置</h3><p>npm config ls -l</p>\n<h3 id=\"显示npm配置\"><a href=\"#显示npm配置\" class=\"headerlink\" title=\"显示npm配置\"></a>显示npm配置</h3><p>npm config list</p>\n<h3 id=\"npm找不到\"><a href=\"#npm找不到\" class=\"headerlink\" title=\"npm找不到\"></a>npm找不到</h3><p>n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local</p>\n","excerpt":"<h3 id=\"卸载node\"><a href=\"#卸载node\" class=\"headerlink\" title=\"卸载node\"></a>卸载node</h3><blockquote>\n<p>$  nvm uninstall –lts<br>$  sudo apt-get remove nodejs<br>$  apt-get autoremove nodejs</p>\n</blockquote>","more":"<h3 id=\"删除node\"><a href=\"#删除node\" class=\"headerlink\" title=\"删除node\"></a>删除node</h3><blockquote>\n<p>$  sudo find ~/ -name &lt;查找的文件名字&gt;</p>\n<h3 id=\"删除npm\"><a href=\"#删除npm\" class=\"headerlink\" title=\"删除npm\"></a>删除npm</h3></blockquote>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><blockquote>\n<p>$  curl -o- https:###raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash</p>\n</blockquote>\n<h3 id=\"将这些信息复制到-bashrc-profile-or-zshrc中\"><a href=\"#将这些信息复制到-bashrc-profile-or-zshrc中\" class=\"headerlink\" title=\"将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中\"></a>将这些信息复制到~/.bashrc, ~/.profile, or ~/.zshrc中</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></div></pre></td></tr></table></figure>\n<h3 id=\"应用源文件\"><a href=\"#应用源文件\" class=\"headerlink\" title=\"应用源文件\"></a>应用源文件</h3><blockquote>\n<p>$  source 　/.bashrc, ~/.profile, or ~/.zshrc</p>\n</blockquote>\n<h3 id=\"验证安装是否成功\"><a href=\"#验证安装是否成功\" class=\"headerlink\" title=\"验证安装是否成功\"></a>验证安装是否成功</h3><blockquote>\n<p>$  command -v nvm</p>\n</blockquote>\n<h3 id=\"查看所有的node版本\"><a href=\"#查看所有的node版本\" class=\"headerlink\" title=\"查看所有的node版本\"></a>查看所有的node版本</h3><blockquote>\n<p>$  nvm ls-remote</p>\n</blockquote>\n<h3 id=\"安装node版本\"><a href=\"#安装node版本\" class=\"headerlink\" title=\"安装node版本\"></a>安装node版本</h3><blockquote>\n<p>$  nvm install –lts　　</p>\n</blockquote>\n<h3 id=\"查看安装是否成功\"><a href=\"#查看安装是否成功\" class=\"headerlink\" title=\"查看安装是否成功\"></a>查看安装是否成功</h3><blockquote>\n<p>$  node -v<br>$  npm -v</p>\n</blockquote>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><blockquote>\n<p>$  npm install -g hexo-cli</p>\n</blockquote>\n<h3 id=\"初始化博客信息\"><a href=\"#初始化博客信息\" class=\"headerlink\" title=\"初始化博客信息\"></a>初始化博客信息</h3><blockquote>\n<p>$  hexo init <folder><br>$  cd <folder></p>\n</blockquote>\n<h3 id=\"安装博客需要的插件\"><a href=\"#安装博客需要的插件\" class=\"headerlink\" title=\"安装博客需要的插件\"></a>安装博客需要的插件</h3><blockquote>\n<p>$  npm install</p>\n</blockquote>\n<h3 id=\"生成静态页面\"><a href=\"#生成静态页面\" class=\"headerlink\" title=\"生成静态页面\"></a>生成静态页面</h3><blockquote>\n<p>$ hexo generate（hexo g也可以）</p>\n</blockquote>\n<h3 id=\"本地启动\"><a href=\"#本地启动\" class=\"headerlink\" title=\"本地启动\"></a>本地启动</h3><blockquote>\n<p>$  hexo server<br>Hexo is running at <a href=\"http://localhost:4000/\">http://localhost:4000/</a>. Press <code>Ctrl+C</code> to stop.</p>\n</blockquote>\n<h3 id=\"建立Repository\"><a href=\"#建立Repository\" class=\"headerlink\" title=\"建立Repository\"></a>建立Repository</h3><blockquote>\n<p>gedit  _config.yml</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">     <span class=\"attribute\">type</span>: git</div><div class=\"line\">     <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:myoneray/myoneray.github.com.git</div><div class=\"line\">     <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure>\n<h3 id=\"然后执行命令：\"><a href=\"#然后执行命令：\" class=\"headerlink\" title=\"然后执行命令：\"></a>然后执行命令：</h3><blockquote>\n<p>npm install hexo-deployer-git –save</p>\n</blockquote>\n<h3 id=\"设置当前node版本\"><a href=\"#设置当前node版本\" class=\"headerlink\" title=\"设置当前node版本\"></a>设置当前node版本</h3><blockquote>\n<p>nvm use –delete-prefix v6.0.0</p>\n</blockquote>\n<h3 id=\"设置当前默认的node版本\"><a href=\"#设置当前默认的node版本\" class=\"headerlink\" title=\"设置当前默认的node版本\"></a>设置当前默认的node版本</h3><p>nvm alias default v6.0.0</p>\n<h3 id=\"获取npm-安装的路径\"><a href=\"#获取npm-安装的路径\" class=\"headerlink\" title=\"获取npm 安装的路径\"></a>获取npm 安装的路径</h3><p>npm config get prefix</p>\n<h3 id=\"查看当前PATH\"><a href=\"#查看当前PATH\" class=\"headerlink\" title=\"查看当前PATH\"></a>查看当前PATH</h3><p>echo  $PATH</p>\n<h3 id=\"安装tree\"><a href=\"#安装tree\" class=\"headerlink\" title=\"安装tree\"></a>安装tree</h3><p>sudo apt-get install tree</p>\n<h3 id=\"显示所有的npm-默认配置\"><a href=\"#显示所有的npm-默认配置\" class=\"headerlink\" title=\"显示所有的npm　默认配置\"></a>显示所有的npm　默认配置</h3><p>npm config ls -l</p>\n<h3 id=\"显示npm配置\"><a href=\"#显示npm配置\" class=\"headerlink\" title=\"显示npm配置\"></a>显示npm配置</h3><p>npm config list</p>\n<h3 id=\"npm找不到\"><a href=\"#npm找不到\" class=\"headerlink\" title=\"npm找不到\"></a>npm找不到</h3><p>n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local</p>"},{"layout":"post","title":"webpack","date":"2016-02-16T00:55:00.000Z","comments":1,"_content":"Webpack！\n<!-- more -->\n\n### 安装\nWebpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。\n\n```\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n### 正式使用Webpack前的准备\n","source":"_posts/2016-10-19.md","raw":"---\nlayout: post\ntitle: webpack\ndate: 2016-02-16 08:55\ncomments: true\ntags:\n- 前段\n- 博客\n- 经验\n- webpack\n---\nWebpack！\n<!-- more -->\n\n### 安装\nWebpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。\n\n```\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n### 正式使用Webpack前的准备\n","slug":"2016-10-19","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgb0006n0c5flc21wpw","content":"<p>Webpack！<br><a id=\"more\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//全局安装</span></div><div class=\"line\">npm install -g webpack</div><div class=\"line\"><span class=\"comment\">//安装到你的项目目录</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack</div></pre></td></tr></table></figure>\n<h3 id=\"正式使用Webpack前的准备\"><a href=\"#正式使用Webpack前的准备\" class=\"headerlink\" title=\"正式使用Webpack前的准备\"></a>正式使用Webpack前的准备</h3>","excerpt":"<p>Webpack！<br>","more":"</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample progect），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//全局安装</span></div><div class=\"line\">npm install -g webpack</div><div class=\"line\"><span class=\"comment\">//安装到你的项目目录</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack</div></pre></td></tr></table></figure>\n<h3 id=\"正式使用Webpack前的准备\"><a href=\"#正式使用Webpack前的准备\" class=\"headerlink\" title=\"正式使用Webpack前的准备\"></a>正式使用Webpack前的准备</h3>"},{"layout":"post","title":"博客主题修改部署问题","date":"2016-10-12T00:55:00.000Z","comments":1,"_content":"\n\n原博客主题修改完成后报错，及其决绝办法！\n<!-- more -->\n\n原博客主题修改完成后报以下错：\n\n```\nupsmart@upsmart-pc:~/myone$ hexo s\nINFO  Start processing\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nError: watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC\n    at exports._errnoException (util.js:896:11)\n    at FSWatcher.start (fs.js:1423:19)\n    at Object.fs.watch (fs.js:1450:11)\n    at createFsWatchInstance (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:37:15)\n    at setFsWatchListener (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:80:15)\n    at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:228:14)\n    at FSWatcher.NodeFsHandler._handleFile (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:255:21)\n    at FSWatcher.<anonymous> (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:473:21)\n    at FSReqWrap.oncomplete (fs.js:117:15)\nFATAL watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC\nError: watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC\n    at exports._errnoException (util.js:896:11)\n    at FSWatcher.start (fs.js:1423:19)\n    at Object.fs.watch (fs.js:1450:11)\n    at createFsWatchInstance (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:37:15)\n    at setFsWatchListener (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:80:15)\n    at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:228:14)\n    at FSWatcher.NodeFsHandler._handleFile (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:255:21)\n    at FSWatcher.<anonymous> (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:473:21)\n    at FSReqWrap.oncomplete (fs.js:117:15)\n\n```\n\n看出是node_modules 里面的文件出错，但实际部署不需要，使用命令移除：\n```\nrimraf node_modules\n```\n 安装rimraf\n```\nsudo apt-get install node-rimraf\n```\n","source":"_posts/2016-10-17.md","raw":"---\nlayout: post\ntitle: 博客主题修改部署问题\ndate: 2016-10-12 08:55\ncomments: true\ntags:\n- 前段\n- 博客\n- 经验\n---\n\n\n原博客主题修改完成后报错，及其决绝办法！\n<!-- more -->\n\n原博客主题修改完成后报以下错：\n\n```\nupsmart@upsmart-pc:~/myone$ hexo s\nINFO  Start processing\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nError: watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC\n    at exports._errnoException (util.js:896:11)\n    at FSWatcher.start (fs.js:1423:19)\n    at Object.fs.watch (fs.js:1450:11)\n    at createFsWatchInstance (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:37:15)\n    at setFsWatchListener (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:80:15)\n    at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:228:14)\n    at FSWatcher.NodeFsHandler._handleFile (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:255:21)\n    at FSWatcher.<anonymous> (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:473:21)\n    at FSReqWrap.oncomplete (fs.js:117:15)\nFATAL watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC\nError: watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC\n    at exports._errnoException (util.js:896:11)\n    at FSWatcher.start (fs.js:1423:19)\n    at Object.fs.watch (fs.js:1450:11)\n    at createFsWatchInstance (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:37:15)\n    at setFsWatchListener (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:80:15)\n    at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:228:14)\n    at FSWatcher.NodeFsHandler._handleFile (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:255:21)\n    at FSWatcher.<anonymous> (/home/upsmart/myone/node_modules/chokidar/lib/nodefs-handler.js:473:21)\n    at FSReqWrap.oncomplete (fs.js:117:15)\n\n```\n\n看出是node_modules 里面的文件出错，但实际部署不需要，使用命令移除：\n```\nrimraf node_modules\n```\n 安装rimraf\n```\nsudo apt-get install node-rimraf\n```\n","slug":"2016-10-17","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgd0007n0c5ehw8vh12","content":"<p>原博客主题修改完成后报错，及其决绝办法！<br><a id=\"more\"></a></p>\n<p>原博客主题修改完成后报以下错：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">upsmart@upsmart-<span class=\"symbol\">pc:</span>~<span class=\"regexp\">/myone$ hexo s</span></div><div class=\"line\">INFO  Start processing</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http:/<span class=\"regexp\">/hexo.io/docs</span><span class=\"regexp\">/troubleshooting.html</span></div><div class=\"line\">Error: watch /home<span class=\"regexp\">/upsmart/myone</span><span class=\"regexp\">/themes/yilia</span><span class=\"regexp\">/node_modules/sass</span>-loader/node_modules/lodash/pull.js ENOSPC</div><div class=\"line\">    at exports._errnoException (util.<span class=\"symbol\">js:</span><span class=\"number\">896</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at FSWatcher.start (fs.<span class=\"symbol\">js:</span><span class=\"number\">1423</span>:<span class=\"number\">19</span>)</div><div class=\"line\">    at Object.fs.watch (fs.<span class=\"symbol\">js:</span><span class=\"number\">1450</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at createFsWatchInstance (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:37:15)</span></div><div class=\"line\">    at setFsWatchListener (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:80:15)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._watchWithNodeFs (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:228:14)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._handleFile (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:255:21)</span></div><div class=\"line\">    at FSWatcher.&lt;anonymous&gt; (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:473:21)</span></div><div class=\"line\">    at FSReqWrap.oncomplete (fs.<span class=\"symbol\">js:</span><span class=\"number\">117</span>:<span class=\"number\">15</span>)</div><div class=\"line\">FATAL watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC</div><div class=\"line\"><span class=\"symbol\">Error:</span> watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC</div><div class=\"line\">    at exports._errnoException (util.<span class=\"symbol\">js:</span><span class=\"number\">896</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at FSWatcher.start (fs.<span class=\"symbol\">js:</span><span class=\"number\">1423</span>:<span class=\"number\">19</span>)</div><div class=\"line\">    at Object.fs.watch (fs.<span class=\"symbol\">js:</span><span class=\"number\">1450</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at createFsWatchInstance (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:37:15)</span></div><div class=\"line\">    at setFsWatchListener (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:80:15)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._watchWithNodeFs (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:228:14)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._handleFile (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:255:21)</span></div><div class=\"line\">    at FSWatcher.&lt;anonymous&gt; (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:473:21)</span></div><div class=\"line\">    at FSReqWrap.oncomplete (fs.<span class=\"symbol\">js:</span><span class=\"number\">117</span>:<span class=\"number\">15</span>)</div></pre></td></tr></table></figure>\n<p>看出是node_modules 里面的文件出错，但实际部署不需要，使用命令移除：<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">rimraf</span> node_modules</div></pre></td></tr></table></figure></p>\n<p> 安装rimraf<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install <span class=\"keyword\">node</span><span class=\"title\">-rimraf</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>原博客主题修改完成后报错，及其决绝办法！<br>","more":"</p>\n<p>原博客主题修改完成后报以下错：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">upsmart@upsmart-<span class=\"symbol\">pc:</span>~<span class=\"regexp\">/myone$ hexo s</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">FATAL Something's wrong. Maybe you can find the solution here: http:/</span><span class=\"regexp\">/hexo.io/docs</span><span class=\"regexp\">/troubleshooting.html</div><div class=\"line\">Error: watch /home</span><span class=\"regexp\">/upsmart/myone</span><span class=\"regexp\">/themes/yilia</span><span class=\"regexp\">/node_modules/sass</span>-loader/node_modules/lodash/pull.js ENOSPC</div><div class=\"line\">    at exports._errnoException (util.<span class=\"symbol\">js:</span><span class=\"number\">896</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at FSWatcher.start (fs.<span class=\"symbol\">js:</span><span class=\"number\">1423</span>:<span class=\"number\">19</span>)</div><div class=\"line\">    at Object.fs.watch (fs.<span class=\"symbol\">js:</span><span class=\"number\">1450</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at createFsWatchInstance (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:37:15)</span></div><div class=\"line\">    at setFsWatchListener (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:80:15)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._watchWithNodeFs (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:228:14)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._handleFile (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:255:21)</span></div><div class=\"line\">    at FSWatcher.&lt;anonymous&gt; (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:473:21)</span></div><div class=\"line\">    at FSReqWrap.oncomplete (fs.<span class=\"symbol\">js:</span><span class=\"number\">117</span>:<span class=\"number\">15</span>)</div><div class=\"line\">FATAL watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC</div><div class=\"line\"><span class=\"symbol\">Error:</span> watch /home/upsmart/myone/themes/yilia/node_modules/sass-loader/node_modules/lodash/pull.js ENOSPC</div><div class=\"line\">    at exports._errnoException (util.<span class=\"symbol\">js:</span><span class=\"number\">896</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at FSWatcher.start (fs.<span class=\"symbol\">js:</span><span class=\"number\">1423</span>:<span class=\"number\">19</span>)</div><div class=\"line\">    at Object.fs.watch (fs.<span class=\"symbol\">js:</span><span class=\"number\">1450</span>:<span class=\"number\">11</span>)</div><div class=\"line\">    at createFsWatchInstance (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:37:15)</span></div><div class=\"line\">    at setFsWatchListener (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:80:15)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._watchWithNodeFs (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:228:14)</span></div><div class=\"line\">    at FSWatcher.NodeFsHandler._handleFile (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:255:21)</span></div><div class=\"line\">    at FSWatcher.&lt;anonymous&gt; (<span class=\"regexp\">/home/upsmart</span><span class=\"regexp\">/myone/node</span>_modules/chokidar/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">nodefs</span>-<span class=\"title\">handler</span>.<span class=\"title\">js</span>:473:21)</span></div><div class=\"line\">    at FSReqWrap.oncomplete (fs.<span class=\"symbol\">js:</span><span class=\"number\">117</span>:<span class=\"number\">15</span>)</div></pre></td></tr></table></figure>\n<p>看出是node_modules 里面的文件出错，但实际部署不需要，使用命令移除：<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">rimraf</span> node_modules</div></pre></td></tr></table></figure></p>\n<p> 安装rimraf<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install <span class=\"keyword\">node</span><span class=\"title\">-rimraf</span></div></pre></td></tr></table></figure></p>"},{"layout":"post","title":"GIT同时配置两个SSH","date":"2016-10-21T03:24:00.000Z","comments":1,"_content":"\n个人需要配置一个公司的GitLab以及一个Github两个SSH!\n\n<!-- more -->\n* 先按照[GitLab ](https://github.com/settings/keys) 官网配置github的SSH。\n* 之后添加公司SSH.\n执行一下命令：\n```\nssh-keygen -t rsa -C 'myusername@mycompanyname.com'\n# 然后会让你输入文件名，可以输入 `id_rsa_mycompanyname`\n# 然后一路回车就行\n```\n* 将生成的两个文件  `id_rsa_mycompanyname`  和 `id_rsa_mycompanyname.pub` 拷贝到目录 `\\.ssh` 下。\n* 在目录` .ssh` 下找到文件 `config` ，如果没有这个文件，则新建一个，切记，这个文件没有后缀名！\n* 在 `config` 里加入如下内容：\n\n```\n#默认github  github user(myusername@mygithubMail.com)\nHost github\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa\n\n# 公司gitLab 修改HostName  user(myusername@mycompanyname.com)\nHost git.myone.com\n    HostName git.myone.com\n    User git\n    Port 22\n    IdentityFile ~/.ssh/id_rsa_mycompanyname\n\n```\n\n* 将这个生成的 `id_rsa_mycompanyname.pub` 的内容加入到 gitlab上的SSH上后，即可使用！\n此时，github和gitlab 都可正常使用。如果有其他的网站，也可以按照这种方法继续处理。每一个 ssh的生成都要对应站点使用的email 。\n","source":"_posts/2016-10-21.md","raw":"---\nlayout: post\ntitle: GIT同时配置两个SSH\ndate: 2016-10-21 11:24\ncomments: true\ntags:\n- 前段\n- GIT\n- SSH\n---\n\n个人需要配置一个公司的GitLab以及一个Github两个SSH!\n\n<!-- more -->\n* 先按照[GitLab ](https://github.com/settings/keys) 官网配置github的SSH。\n* 之后添加公司SSH.\n执行一下命令：\n```\nssh-keygen -t rsa -C 'myusername@mycompanyname.com'\n# 然后会让你输入文件名，可以输入 `id_rsa_mycompanyname`\n# 然后一路回车就行\n```\n* 将生成的两个文件  `id_rsa_mycompanyname`  和 `id_rsa_mycompanyname.pub` 拷贝到目录 `\\.ssh` 下。\n* 在目录` .ssh` 下找到文件 `config` ，如果没有这个文件，则新建一个，切记，这个文件没有后缀名！\n* 在 `config` 里加入如下内容：\n\n```\n#默认github  github user(myusername@mygithubMail.com)\nHost github\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa\n\n# 公司gitLab 修改HostName  user(myusername@mycompanyname.com)\nHost git.myone.com\n    HostName git.myone.com\n    User git\n    Port 22\n    IdentityFile ~/.ssh/id_rsa_mycompanyname\n\n```\n\n* 将这个生成的 `id_rsa_mycompanyname.pub` 的内容加入到 gitlab上的SSH上后，即可使用！\n此时，github和gitlab 都可正常使用。如果有其他的网站，也可以按照这种方法继续处理。每一个 ssh的生成都要对应站点使用的email 。\n","slug":"2016-10-21","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgh000an0c5qqt9nzg3","content":"<p>个人需要配置一个公司的GitLab以及一个Github两个SSH!</p>\n<a id=\"more\"></a>\n<ul>\n<li>先按照<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"external\">GitLab </a> 官网配置github的SSH。</li>\n<li><p>之后添加公司SSH.<br>执行一下命令：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">'myusername@mycompanyname.com'</span></div><div class=\"line\"># 然后会让你输入文件名，可以输入 `id_rsa_mycompanyname`</div><div class=\"line\"># 然后一路回车就行</div></pre></td></tr></table></figure>\n</li>\n<li><p>将生成的两个文件  <code>id_rsa_mycompanyname</code>  和 <code>id_rsa_mycompanyname.pub</code> 拷贝到目录 <code>\\.ssh</code> 下。</p>\n</li>\n<li>在目录<code>.ssh</code> 下找到文件 <code>config</code> ，如果没有这个文件，则新建一个，切记，这个文件没有后缀名！</li>\n<li>在 <code>config</code> 里加入如下内容：</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#默认<span class=\"selector-tag\">github</span>  <span class=\"selector-tag\">github</span> <span class=\"selector-tag\">user</span>(myusername<span class=\"variable\">@mygithubMail</span>.com)</div><div class=\"line\"><span class=\"selector-tag\">Host</span> <span class=\"selector-tag\">github</span></div><div class=\"line\">    <span class=\"selector-tag\">HostName</span> <span class=\"selector-tag\">github</span><span class=\"selector-class\">.com</span></div><div class=\"line\">    <span class=\"selector-tag\">User</span> <span class=\"selector-tag\">git</span></div><div class=\"line\">    <span class=\"selector-tag\">IdentityFile</span> ~/<span class=\"selector-class\">.ssh</span>/<span class=\"selector-tag\">id_rsa</span></div><div class=\"line\"></div><div class=\"line\"># 公司<span class=\"selector-tag\">gitLab</span> 修改<span class=\"selector-tag\">HostName</span>  <span class=\"selector-tag\">user</span>(myusername<span class=\"variable\">@mycompanyname</span>.com)</div><div class=\"line\"><span class=\"selector-tag\">Host</span> <span class=\"selector-tag\">git</span><span class=\"selector-class\">.myone</span><span class=\"selector-class\">.com</span></div><div class=\"line\">    <span class=\"selector-tag\">HostName</span> <span class=\"selector-tag\">git</span><span class=\"selector-class\">.myone</span><span class=\"selector-class\">.com</span></div><div class=\"line\">    <span class=\"selector-tag\">User</span> <span class=\"selector-tag\">git</span></div><div class=\"line\">    <span class=\"selector-tag\">Port</span> <span class=\"selector-tag\">22</span></div><div class=\"line\">    <span class=\"selector-tag\">IdentityFile</span> ~/<span class=\"selector-class\">.ssh</span>/<span class=\"selector-tag\">id_rsa_mycompanyname</span></div></pre></td></tr></table></figure>\n<ul>\n<li>将这个生成的 <code>id_rsa_mycompanyname.pub</code> 的内容加入到 gitlab上的SSH上后，即可使用！<br>此时，github和gitlab 都可正常使用。如果有其他的网站，也可以按照这种方法继续处理。每一个 ssh的生成都要对应站点使用的email 。</li>\n</ul>\n","excerpt":"<p>个人需要配置一个公司的GitLab以及一个Github两个SSH!</p>","more":"<ul>\n<li>先按照<a href=\"https://github.com/settings/keys\">GitLab </a> 官网配置github的SSH。</li>\n<li><p>之后添加公司SSH.<br>执行一下命令：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">'myusername@mycompanyname.com'</span></div><div class=\"line\"># 然后会让你输入文件名，可以输入 `id_rsa_mycompanyname`</div><div class=\"line\"># 然后一路回车就行</div></pre></td></tr></table></figure>\n</li>\n<li><p>将生成的两个文件  <code>id_rsa_mycompanyname</code>  和 <code>id_rsa_mycompanyname.pub</code> 拷贝到目录 <code>\\.ssh</code> 下。</p>\n</li>\n<li>在目录<code>.ssh</code> 下找到文件 <code>config</code> ，如果没有这个文件，则新建一个，切记，这个文件没有后缀名！</li>\n<li>在 <code>config</code> 里加入如下内容：</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#默认<span class=\"selector-tag\">github</span>  <span class=\"selector-tag\">github</span> <span class=\"selector-tag\">user</span>(myusername<span class=\"variable\">@mygithubMail</span>.com)</div><div class=\"line\"><span class=\"selector-tag\">Host</span> <span class=\"selector-tag\">github</span></div><div class=\"line\">    <span class=\"selector-tag\">HostName</span> <span class=\"selector-tag\">github</span><span class=\"selector-class\">.com</span></div><div class=\"line\">    <span class=\"selector-tag\">User</span> <span class=\"selector-tag\">git</span></div><div class=\"line\">    <span class=\"selector-tag\">IdentityFile</span> ~/<span class=\"selector-class\">.ssh</span>/<span class=\"selector-tag\">id_rsa</span></div><div class=\"line\"></div><div class=\"line\"># 公司<span class=\"selector-tag\">gitLab</span> 修改<span class=\"selector-tag\">HostName</span>  <span class=\"selector-tag\">user</span>(myusername<span class=\"variable\">@mycompanyname</span>.com)</div><div class=\"line\"><span class=\"selector-tag\">Host</span> <span class=\"selector-tag\">git</span><span class=\"selector-class\">.myone</span><span class=\"selector-class\">.com</span></div><div class=\"line\">    <span class=\"selector-tag\">HostName</span> <span class=\"selector-tag\">git</span><span class=\"selector-class\">.myone</span><span class=\"selector-class\">.com</span></div><div class=\"line\">    <span class=\"selector-tag\">User</span> <span class=\"selector-tag\">git</span></div><div class=\"line\">    <span class=\"selector-tag\">Port</span> <span class=\"selector-tag\">22</span></div><div class=\"line\">    <span class=\"selector-tag\">IdentityFile</span> ~/<span class=\"selector-class\">.ssh</span>/<span class=\"selector-tag\">id_rsa_mycompanyname</span></div></pre></td></tr></table></figure>\n<ul>\n<li>将这个生成的 <code>id_rsa_mycompanyname.pub</code> 的内容加入到 gitlab上的SSH上后，即可使用！<br>此时，github和gitlab 都可正常使用。如果有其他的网站，也可以按照这种方法继续处理。每一个 ssh的生成都要对应站点使用的email 。</li>\n</ul>"},{"layout":"post","title":"修改仓库地址","date":"2016-10-25T01:38:04.000Z","comments":1,"_content":"\n##### 修改仓库地址\n* 清除git项目仓库地址`git remote rm  origin`\n* 添加git项目仓库地址`git remote add origin http://example.git`\n<!-- more -->\n\n##### npm 常用包\n* 安装webpack : `npm install --save-dev webpack`\n* 安装webpack构建本地服务器 :`npm install --save-dev webpack-dev-server`\n* 安装babel : `npm install --save-dev babel-loader babel-core`\n* 安装样式加载模块：`npm install --save-dev style-loader css-loader`\n","source":"_posts/2016-10-25.md","raw":"---\nlayout: post\ntitle: 修改仓库地址\ndate: '2016-10-25 09:38:04'\ncomments: true\ntags:\n  - 前段\n  - 笔记\n  - 框架搭建\n  - webpack\n---\n\n##### 修改仓库地址\n* 清除git项目仓库地址`git remote rm  origin`\n* 添加git项目仓库地址`git remote add origin http://example.git`\n<!-- more -->\n\n##### npm 常用包\n* 安装webpack : `npm install --save-dev webpack`\n* 安装webpack构建本地服务器 :`npm install --save-dev webpack-dev-server`\n* 安装babel : `npm install --save-dev babel-loader babel-core`\n* 安装样式加载模块：`npm install --save-dev style-loader css-loader`\n","slug":"2016-10-25","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgj000bn0c5xy7jnwco","content":"<h5 id=\"修改仓库地址\"><a href=\"#修改仓库地址\" class=\"headerlink\" title=\"修改仓库地址\"></a>修改仓库地址</h5><ul>\n<li>清除git项目仓库地址<code>git remote rm  origin</code></li>\n<li>添加git项目仓库地址<code>git remote add origin http://example.git</code><a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"npm-常用包\"><a href=\"#npm-常用包\" class=\"headerlink\" title=\"npm 常用包\"></a>npm 常用包</h5><ul>\n<li>安装webpack : <code>npm install --save-dev webpack</code></li>\n<li>安装webpack构建本地服务器 :<code>npm install --save-dev webpack-dev-server</code></li>\n<li>安装babel : <code>npm install --save-dev babel-loader babel-core</code></li>\n<li>安装样式加载模块：<code>npm install --save-dev style-loader css-loader</code></li>\n</ul>\n","excerpt":"<h5 id=\"修改仓库地址\"><a href=\"#修改仓库地址\" class=\"headerlink\" title=\"修改仓库地址\"></a>修改仓库地址</h5><ul>\n<li>清除git项目仓库地址<code>git remote rm  origin</code></li>\n<li>添加git项目仓库地址<code>git remote add origin http://example.git</code>","more":"</li>\n</ul>\n<h5 id=\"npm-常用包\"><a href=\"#npm-常用包\" class=\"headerlink\" title=\"npm 常用包\"></a>npm 常用包</h5><ul>\n<li>安装webpack : <code>npm install --save-dev webpack</code></li>\n<li>安装webpack构建本地服务器 :<code>npm install --save-dev webpack-dev-server</code></li>\n<li>安装babel : <code>npm install --save-dev babel-loader babel-core</code></li>\n<li>安装样式加载模块：<code>npm install --save-dev style-loader css-loader</code></li>\n</ul>"},{"layout":"post","title":"html-webpack-plugin","date":"2016-10-25T01:38:04.000Z","comments":1,"_content":"\n webpack 插件： html-webpack-plugin\n\n>这个插件用来简化创建服务于 webpack bundle 的 HTML 文件，尤其是对于在文件名中包含了 hash 值，而这个值在每次编译的时候都发生变化的情况。你既可以让这个插件来帮助你自动生成 HTML 文件，也可以使用 lodash 模板加载生成的 bundles，或者自己加载这些 bundles。\n\n <!-- more -->\n 插件地址：https://www.npmjs.com/package/html-webpack-plugin\n\n* 使用 npm 安装这个插件: `$ npm install html-webpack-plugin@2 --save-dev`\n* webpack 配置\n```\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\nvar webpackConfig = {\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'index_bundle.js'\n  },\n  plugins: [new HtmlWebpackPlugin()]\n}\n```\n* 这将会自动在 dist 目录中生成一个名为 index.html 的文件，内容如下：\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Webpack App</title>\n  </head>\n  <body>\n    <script src=\"index_bundle.js\"></script>\n  </body>\n</html>\n```\n如果你有多个 webpack 入口点，它们都会被包含在生成的 script 元素中。\n\n如果有任何的 CSS 资源包含在 webpack 输出中（例如，使用 ExtractTextPlugin 提炼出的 css ），这些将会使用 link 包含在 HTML 页面的 head 元素中。\n\n#### 详细配置\n* title: 用来生成页面的 title 元素\n* filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。\n* template: 模板文件路径，支持加载器，比如 html!./index.html\n* inject: true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。\n* favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。\n* minify: {} | false , 传递 html-minifier 选项给 minify 输出\n* hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。\n* cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。\n* showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中\n* chunks: 允许只添加某些块 (比如，仅仅 unit test 块)\n* chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：'none' | 'default' | {function}-default:'auto'\n* excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块)\n\n>下面的示例演示了如何使用这些配置。\n```\n{\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'index_bundle.js',\n    hash: true\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'My App',\n      filename: 'assets/admin.html'\n    })\n  ]\n}\n```\n\n#### 生成多个 HTML 文件\n通过在配置文件中添加多次这个插件，来生成多个 HTML 文件。\n```\n{\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'index_bundle.js'\n  },\n  plugins: [\n    new HtmlWebpackPlugin(), // Generates default index.html\n    new HtmlWebpackPlugin({  // Also generate a test.html\n      filename: 'test.html',\n      template: 'src/assets/test.html'\n    })\n  ]\n}\n```\n\n#### 编写自定义模板\n如果默认生成的 HTML 文件不适合你的需要看，可以创建自己定义的模板。方便的方式是通过 inject 选项，然后传递给定制的 HTML 文件。html-webpack-plugin 将会自动注入所有需要的 CSS, js, manifest 和 favicon 文件到标记中。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    title: 'Custom template',\n    template: 'my-index.html', // Load a custom template\n    inject: 'body' // Inject all scripts into the body\n  })\n]\n```\nmy-index.html 文件\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n  </body>\n</html>\n```\n如果你有模板加载器，可以使用它来解析这个模板。\n```\nmodule: {\n  loaders: [\n    { test: /\\.hbs$/, loader: \"handlebars\" }\n  ]\n},\nplugins: [\n  new HtmlWebpackPlugin({\n    title: 'Custom template using Handlebars',\n    template: 'my-index.hbs',\n    inject: 'body'\n  })\n]\n```\n另外，如果你的模式是一个字符串，可以使用 templateContent 传递它。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    inject: true,\n    templateContent: templateContentString\n  })\n]\n```\n如果 inject 特性不适合你的需要，你希望完全控制资源放置。 可以直接使用 lodash 语法，使用  default template 作为起点创建自己的模板。\n\ntemplateContent 选项也可以是一个函数，以便使用其它语言，比如 jade：\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    templateContent: function(templateParams, compilation) {\n      // Return your template content synchronously here\n      return '..';\n    }\n  })\n]\n```\n或者异步版本\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    templateContent: function(templateParams, compilation, callback) {\n      // Return your template content asynchronously here\n      callback(null, '..');\n    }\n  })\n]\n```\n>注意，如果同时使用 template 和 templateContent ，插件会抛出错误。\n\n* htmlWebpackPlugin: 这个插件的相关数据\n* htmlWebpackPlugin.files: 资源的块名，来自 webpack 的 stats 对象，包含来自 entry 的从 entry point name 到 bundle 文件名映射。\n```\n\"htmlWebpackPlugin\": {\n  \"files\": {\n    \"css\": [ \"main.css\" ],\n    \"js\": [ \"assets/head_bundle.js\", \"assets/main_bundle.js\"],\n    \"chunks\": {\n      \"head\": {\n        \"entry\": \"assets/head_bundle.js\",\n        \"css\": [ \"main.css\" ]\n      },\n      \"main\": {\n        \"entry\": \"assets/main_bundle.js\",\n        \"css\": []\n      },\n    }\n  }\n}\n```\n如果在 webpack 配置文件中，你配置了 publicPath，将会反射正确的资源\n\n* htmlWebpackPlugin.options: 传递给插件的配置。\n* webpack: webpack 的 stats 对象。\n* webpackConfig: webpack 配置信息。\n\n#### 过滤块\n可以使用 chunks 来限定特定的块。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    chunks: ['app']\n  })\n]\n```\n还可以使用 excludeChunks 来排除特定块。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    excludeChunks: ['dev-helper']\n  })\n]\n```\n#### 事件\n通过事件允许其它插件来扩展 HTML。\n* html-webpack-plugin-before-html-processing\n* html-webpack-plugin-after-html-processing\n* html-webpack-plugin-after-emit\n使用方式：\n```\ncompilation.plugin('html-webpack-plugin-before-html-processing', function(htmlPluginData, callback) {\n  htmlPluginData.html += 'The magic footer';\n  callback();\n});\n```\n#### 完整的插件代码如下所示。\n```\nfunction MyPlugin(options) {\nthis.options = options;\n}\n\nMyPlugin.prototype.apply = function(compiler) {\n    var paths = this.options.paths;\n    compiler.plugin('compilation', function(compilation, options) {\n        compilation.plugin('html-webpack-plugin-before-html-processing', function(htmlPluginData, callback) {\n            for (var i = paths.length - 1; i >= 0; i--) {\n                htmlPluginData.assets.js.unshift(paths[i]);\n            }\n            callback(null, htmlPluginData);\n        });\n    });\n};\n\nmodule.exports = MyPlugin;\n```\n最后一行是导出我们的插件。\n","source":"_posts/2016-10-25-1.md","raw":"---\nlayout: post\ntitle:  html-webpack-plugin\ndate: '2016-10-25 09:38:04'\ncomments: true\ntags:\n  - 前段\n  - 笔记\n  - 框架搭建\n  - webpack\n  -  html-webpack-plugin\n---\n\n webpack 插件： html-webpack-plugin\n\n>这个插件用来简化创建服务于 webpack bundle 的 HTML 文件，尤其是对于在文件名中包含了 hash 值，而这个值在每次编译的时候都发生变化的情况。你既可以让这个插件来帮助你自动生成 HTML 文件，也可以使用 lodash 模板加载生成的 bundles，或者自己加载这些 bundles。\n\n <!-- more -->\n 插件地址：https://www.npmjs.com/package/html-webpack-plugin\n\n* 使用 npm 安装这个插件: `$ npm install html-webpack-plugin@2 --save-dev`\n* webpack 配置\n```\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\nvar webpackConfig = {\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'index_bundle.js'\n  },\n  plugins: [new HtmlWebpackPlugin()]\n}\n```\n* 这将会自动在 dist 目录中生成一个名为 index.html 的文件，内容如下：\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Webpack App</title>\n  </head>\n  <body>\n    <script src=\"index_bundle.js\"></script>\n  </body>\n</html>\n```\n如果你有多个 webpack 入口点，它们都会被包含在生成的 script 元素中。\n\n如果有任何的 CSS 资源包含在 webpack 输出中（例如，使用 ExtractTextPlugin 提炼出的 css ），这些将会使用 link 包含在 HTML 页面的 head 元素中。\n\n#### 详细配置\n* title: 用来生成页面的 title 元素\n* filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。\n* template: 模板文件路径，支持加载器，比如 html!./index.html\n* inject: true | 'head' | 'body' | false  ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，'head' 将放置到 head 元素中。\n* favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。\n* minify: {} | false , 传递 html-minifier 选项给 minify 输出\n* hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。\n* cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。\n* showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中\n* chunks: 允许只添加某些块 (比如，仅仅 unit test 块)\n* chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：'none' | 'default' | {function}-default:'auto'\n* excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块)\n\n>下面的示例演示了如何使用这些配置。\n```\n{\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'index_bundle.js',\n    hash: true\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'My App',\n      filename: 'assets/admin.html'\n    })\n  ]\n}\n```\n\n#### 生成多个 HTML 文件\n通过在配置文件中添加多次这个插件，来生成多个 HTML 文件。\n```\n{\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'index_bundle.js'\n  },\n  plugins: [\n    new HtmlWebpackPlugin(), // Generates default index.html\n    new HtmlWebpackPlugin({  // Also generate a test.html\n      filename: 'test.html',\n      template: 'src/assets/test.html'\n    })\n  ]\n}\n```\n\n#### 编写自定义模板\n如果默认生成的 HTML 文件不适合你的需要看，可以创建自己定义的模板。方便的方式是通过 inject 选项，然后传递给定制的 HTML 文件。html-webpack-plugin 将会自动注入所有需要的 CSS, js, manifest 和 favicon 文件到标记中。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    title: 'Custom template',\n    template: 'my-index.html', // Load a custom template\n    inject: 'body' // Inject all scripts into the body\n  })\n]\n```\nmy-index.html 文件\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n  </body>\n</html>\n```\n如果你有模板加载器，可以使用它来解析这个模板。\n```\nmodule: {\n  loaders: [\n    { test: /\\.hbs$/, loader: \"handlebars\" }\n  ]\n},\nplugins: [\n  new HtmlWebpackPlugin({\n    title: 'Custom template using Handlebars',\n    template: 'my-index.hbs',\n    inject: 'body'\n  })\n]\n```\n另外，如果你的模式是一个字符串，可以使用 templateContent 传递它。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    inject: true,\n    templateContent: templateContentString\n  })\n]\n```\n如果 inject 特性不适合你的需要，你希望完全控制资源放置。 可以直接使用 lodash 语法，使用  default template 作为起点创建自己的模板。\n\ntemplateContent 选项也可以是一个函数，以便使用其它语言，比如 jade：\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    templateContent: function(templateParams, compilation) {\n      // Return your template content synchronously here\n      return '..';\n    }\n  })\n]\n```\n或者异步版本\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    templateContent: function(templateParams, compilation, callback) {\n      // Return your template content asynchronously here\n      callback(null, '..');\n    }\n  })\n]\n```\n>注意，如果同时使用 template 和 templateContent ，插件会抛出错误。\n\n* htmlWebpackPlugin: 这个插件的相关数据\n* htmlWebpackPlugin.files: 资源的块名，来自 webpack 的 stats 对象，包含来自 entry 的从 entry point name 到 bundle 文件名映射。\n```\n\"htmlWebpackPlugin\": {\n  \"files\": {\n    \"css\": [ \"main.css\" ],\n    \"js\": [ \"assets/head_bundle.js\", \"assets/main_bundle.js\"],\n    \"chunks\": {\n      \"head\": {\n        \"entry\": \"assets/head_bundle.js\",\n        \"css\": [ \"main.css\" ]\n      },\n      \"main\": {\n        \"entry\": \"assets/main_bundle.js\",\n        \"css\": []\n      },\n    }\n  }\n}\n```\n如果在 webpack 配置文件中，你配置了 publicPath，将会反射正确的资源\n\n* htmlWebpackPlugin.options: 传递给插件的配置。\n* webpack: webpack 的 stats 对象。\n* webpackConfig: webpack 配置信息。\n\n#### 过滤块\n可以使用 chunks 来限定特定的块。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    chunks: ['app']\n  })\n]\n```\n还可以使用 excludeChunks 来排除特定块。\n```\nplugins: [\n  new HtmlWebpackPlugin({\n    excludeChunks: ['dev-helper']\n  })\n]\n```\n#### 事件\n通过事件允许其它插件来扩展 HTML。\n* html-webpack-plugin-before-html-processing\n* html-webpack-plugin-after-html-processing\n* html-webpack-plugin-after-emit\n使用方式：\n```\ncompilation.plugin('html-webpack-plugin-before-html-processing', function(htmlPluginData, callback) {\n  htmlPluginData.html += 'The magic footer';\n  callback();\n});\n```\n#### 完整的插件代码如下所示。\n```\nfunction MyPlugin(options) {\nthis.options = options;\n}\n\nMyPlugin.prototype.apply = function(compiler) {\n    var paths = this.options.paths;\n    compiler.plugin('compilation', function(compilation, options) {\n        compilation.plugin('html-webpack-plugin-before-html-processing', function(htmlPluginData, callback) {\n            for (var i = paths.length - 1; i >= 0; i--) {\n                htmlPluginData.assets.js.unshift(paths[i]);\n            }\n            callback(null, htmlPluginData);\n        });\n    });\n};\n\nmodule.exports = MyPlugin;\n```\n最后一行是导出我们的插件。\n","slug":"2016-10-25-1","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgk000dn0c58wciv9h8","content":"<p> webpack 插件： html-webpack-plugin</p>\n<blockquote>\n<p>这个插件用来简化创建服务于 webpack bundle 的 HTML 文件，尤其是对于在文件名中包含了 hash 值，而这个值在每次编译的时候都发生变化的情况。你既可以让这个插件来帮助你自动生成 HTML 文件，也可以使用 lodash 模板加载生成的 bundles，或者自己加载这些 bundles。</p>\n</blockquote>\n <a id=\"more\"></a>\n<p> 插件地址：<a href=\"https://www.npmjs.com/package/html-webpack-plugin\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/html-webpack-plugin</a></p>\n<ul>\n<li>使用 npm 安装这个插件: <code>$ npm install html-webpack-plugin@2 --save-dev</code></li>\n<li><p>webpack 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'dist'</span>,</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">'index_bundle.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> HtmlWebpackPlugin()]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>这将会自动在 dist 目录中生成一个名为 index.html 的文件，内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index_bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果你有多个 webpack 入口点，它们都会被包含在生成的 script 元素中。</p>\n<p>如果有任何的 CSS 资源包含在 webpack 输出中（例如，使用 ExtractTextPlugin 提炼出的 css ），这些将会使用 link 包含在 HTML 页面的 head 元素中。</p>\n<h4 id=\"详细配置\"><a href=\"#详细配置\" class=\"headerlink\" title=\"详细配置\"></a>详细配置</h4><ul>\n<li>title: 用来生成页面的 title 元素</li>\n<li>filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</li>\n<li>template: 模板文件路径，支持加载器，比如 html!./index.html</li>\n<li>inject: true | ‘head’ | ‘body’ | false  ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，’head’ 将放置到 head 元素中。</li>\n<li>favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。</li>\n<li>minify: {} | false , 传递 html-minifier 选项给 minify 输出</li>\n<li>hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。</li>\n<li>cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</li>\n<li>showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</li>\n<li>chunks: 允许只添加某些块 (比如，仅仅 unit test 块)</li>\n<li>chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’</li>\n<li>excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块)</li>\n</ul>\n<blockquote>\n<p>下面的示例演示了如何使用这些配置。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">entry</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">  <span class=\"attribute\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">path</span>: <span class=\"string\">'dist'</span>,</div><div class=\"line\">    <span class=\"attribute\">filename</span>: <span class=\"string\">'index_bundle.js'</span>,</div><div class=\"line\">    <span class=\"attribute\">hash</span>: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attribute\">plugins</span>: [</div><div class=\"line\">    new HtmlWebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attribute\">title</span>: <span class=\"string\">'My App'</span>,</div><div class=\"line\">      <span class=\"attribute\">filename</span>: <span class=\"string\">'assets/admin.html'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"生成多个-HTML-文件\"><a href=\"#生成多个-HTML-文件\" class=\"headerlink\" title=\"生成多个 HTML 文件\"></a>生成多个 HTML 文件</h4><p>通过在配置文件中添加多次这个插件，来生成多个 HTML 文件。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">entry</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">  <span class=\"attribute\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">path</span>: <span class=\"string\">'dist'</span>,</div><div class=\"line\">    <span class=\"attribute\">filename</span>: <span class=\"string\">'index_bundle.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attribute\">plugins</span>: [</div><div class=\"line\">    new HtmlWebpackPlugin(), <span class=\"comment\">// Generates default index.html</span></div><div class=\"line\">    new HtmlWebpackPlugin(&#123;  <span class=\"comment\">// Also generate a test.html</span></div><div class=\"line\">      <span class=\"attribute\">filename</span>: <span class=\"string\">'test.html'</span>,</div><div class=\"line\">      <span class=\"attribute\">template</span>: <span class=\"string\">'src/assets/test.html'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"编写自定义模板\"><a href=\"#编写自定义模板\" class=\"headerlink\" title=\"编写自定义模板\"></a>编写自定义模板</h4><p>如果默认生成的 HTML 文件不适合你的需要看，可以创建自己定义的模板。方便的方式是通过 inject 选项，然后传递给定制的 HTML 文件。html-webpack-plugin 将会自动注入所有需要的 CSS, js, manifest 和 favicon 文件到标记中。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">plugins</span>: [</div><div class=\"line\">  new HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attribute\">title</span>: <span class=\"string\">'Custom template'</span>,</div><div class=\"line\">    <span class=\"attribute\">template</span>: <span class=\"string\">'my-index.html'</span>, <span class=\"comment\">// Load a custom template</span></div><div class=\"line\">    <span class=\"attribute\">inject</span>: <span class=\"string\">'body'</span> <span class=\"comment\">// Inject all scripts into the body</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>my-index.html 文件<br><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span><span class=\"ruby\"> htmlWebpackPlugin.options.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果你有模板加载器，可以使用它来解析这个模板。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">module:</span> &#123;</div><div class=\"line\"><span class=\"symbol\">  loaders:</span> [</div><div class=\"line\">    &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.hbs$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">\"handlebars\"</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"string\">plugins:</span> [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\"><span class=\"symbol\">    title:</span> <span class=\"string\">'Custom template using Handlebars'</span>,</div><div class=\"line\"><span class=\"symbol\">    template:</span> <span class=\"string\">'my-index.hbs'</span>,</div><div class=\"line\"><span class=\"symbol\">    inject:</span> <span class=\"string\">'body'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>另外，如果你的模式是一个字符串，可以使用 templateContent 传递它。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">plugins:</span> [</div><div class=\"line\">  new HtmlWebpackPlugin(&#123;</div><div class=\"line\"><span class=\"attr\">    inject:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    templateContent:</span> templateContentString</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>如果 inject 特性不适合你的需要，你希望完全控制资源放置。 可以直接使用 lodash 语法，使用  default template 作为起点创建自己的模板。</p>\n<p>templateContent 选项也可以是一个函数，以便使用其它语言，比如 jade：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">templateContent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">templateParams, compilation</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Return your template content synchronously here</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'..'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>或者异步版本<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">templateContent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">templateParams, compilation, callback</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Return your template content asynchronously here</span></div><div class=\"line\">      callback(<span class=\"literal\">null</span>, <span class=\"string\">'..'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意，如果同时使用 template 和 templateContent ，插件会抛出错误。</p>\n</blockquote>\n<ul>\n<li>htmlWebpackPlugin: 这个插件的相关数据</li>\n<li>htmlWebpackPlugin.files: 资源的块名，来自 webpack 的 stats 对象，包含来自 entry 的从 entry point name 到 bundle 文件名映射。<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"htmlWebpackPlugin\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"files\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"css\"</span>: [ <span class=\"string\">\"main.css\"</span> ],</div><div class=\"line\">    <span class=\"string\">\"js\"</span>: [ <span class=\"string\">\"assets/head_bundle.js\"</span>, <span class=\"string\">\"assets/main_bundle.js\"</span>],</div><div class=\"line\">    <span class=\"string\">\"chunks\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"head\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"entry\"</span>: <span class=\"string\">\"assets/head_bundle.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"css\"</span>: [ <span class=\"string\">\"main.css\"</span> ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"string\">\"main\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"entry\"</span>: <span class=\"string\">\"assets/main_bundle.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"css\"</span>: []</div><div class=\"line\">      &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果在 webpack 配置文件中，你配置了 publicPath，将会反射正确的资源</p>\n<ul>\n<li>htmlWebpackPlugin.options: 传递给插件的配置。</li>\n<li>webpack: webpack 的 stats 对象。</li>\n<li>webpackConfig: webpack 配置信息。</li>\n</ul>\n<h4 id=\"过滤块\"><a href=\"#过滤块\" class=\"headerlink\" title=\"过滤块\"></a>过滤块</h4><p>可以使用 chunks 来限定特定的块。<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span> [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    chunk<span class=\"variable\">s:</span> [<span class=\"string\">'app'</span>]</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>还可以使用 excludeChunks 来排除特定块。<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span> [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    excludeChunk<span class=\"variable\">s:</span> [<span class=\"string\">'dev-helper'</span>]</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><p>通过事件允许其它插件来扩展 HTML。</p>\n<ul>\n<li>html-webpack-plugin-before-html-processing</li>\n<li>html-webpack-plugin-after-html-processing</li>\n<li>html-webpack-plugin-after-emit<br>使用方式：<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">compilation.plugin(<span class=\"string\">'html-webpack-plugin-before-html-processing'</span>, <span class=\"function\"><span class=\"keyword\">function</span></span>(htmlPluginData, <span class=\"keyword\">callback</span>) &#123;</div><div class=\"line\">  htmlPluginData.html += <span class=\"string\">'The magic footer'</span>;</div><div class=\"line\">  <span class=\"keyword\">callback</span>();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"完整的插件代码如下所示。\"><a href=\"#完整的插件代码如下所示。\" class=\"headerlink\" title=\"完整的插件代码如下所示。\"></a>完整的插件代码如下所示。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.options = options;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> paths = <span class=\"keyword\">this</span>.options.paths;</div><div class=\"line\">    compiler.plugin(<span class=\"string\">'compilation'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, options</span>) </span>&#123;</div><div class=\"line\">        compilation.plugin(<span class=\"string\">'html-webpack-plugin-before-html-processing'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">htmlPluginData, callback</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = paths.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">                htmlPluginData.assets.js.unshift(paths[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback(<span class=\"literal\">null</span>, htmlPluginData);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = MyPlugin;</div></pre></td></tr></table></figure>\n<p>最后一行是导出我们的插件。</p>\n","excerpt":"<p> webpack 插件： html-webpack-plugin</p>\n<blockquote>\n<p>这个插件用来简化创建服务于 webpack bundle 的 HTML 文件，尤其是对于在文件名中包含了 hash 值，而这个值在每次编译的时候都发生变化的情况。你既可以让这个插件来帮助你自动生成 HTML 文件，也可以使用 lodash 模板加载生成的 bundles，或者自己加载这些 bundles。</p>\n</blockquote>","more":"<p> 插件地址：<a href=\"https://www.npmjs.com/package/html-webpack-plugin\">https://www.npmjs.com/package/html-webpack-plugin</a></p>\n<ul>\n<li>使用 npm 安装这个插件: <code>$ npm install html-webpack-plugin@2 --save-dev</code></li>\n<li><p>webpack 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> webpackConfig = &#123;</div><div class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">  <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'dist'</span>,</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">'index_bundle.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> HtmlWebpackPlugin()]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>这将会自动在 dist 目录中生成一个名为 index.html 的文件，内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index_bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果你有多个 webpack 入口点，它们都会被包含在生成的 script 元素中。</p>\n<p>如果有任何的 CSS 资源包含在 webpack 输出中（例如，使用 ExtractTextPlugin 提炼出的 css ），这些将会使用 link 包含在 HTML 页面的 head 元素中。</p>\n<h4 id=\"详细配置\"><a href=\"#详细配置\" class=\"headerlink\" title=\"详细配置\"></a>详细配置</h4><ul>\n<li>title: 用来生成页面的 title 元素</li>\n<li>filename: 输出的 HTML 文件名，默认是 index.html, 也可以直接配置带有子目录。</li>\n<li>template: 模板文件路径，支持加载器，比如 html!./index.html</li>\n<li>inject: true | ‘head’ | ‘body’ | false  ,注入所有的资源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元素的底部，’head’ 将放置到 head 元素中。</li>\n<li>favicon: 添加特定的 favicon 路径到输出的 HTML 文件中。</li>\n<li>minify: {} | false , 传递 html-minifier 选项给 minify 输出</li>\n<li>hash: true | false, 如果为 true, 将添加一个唯一的 webpack 编译 hash 到所有包含的脚本和 CSS 文件，对于解除 cache 很有用。</li>\n<li>cache: true | false，如果为 true, 这是默认值，仅仅在文件修改之后才会发布文件。</li>\n<li>showErrors: true | false, 如果为 true, 这是默认值，错误信息会写入到 HTML 页面中</li>\n<li>chunks: 允许只添加某些块 (比如，仅仅 unit test 块)</li>\n<li>chunksSortMode: 允许控制块在添加到页面之前的排序方式，支持的值：’none’ | ‘default’ | {function}-default:’auto’</li>\n<li>excludeChunks: 允许跳过某些块，(比如，跳过单元测试的块)</li>\n</ul>\n<blockquote>\n<p>下面的示例演示了如何使用这些配置。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">entry</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">  <span class=\"attribute\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">path</span>: <span class=\"string\">'dist'</span>,</div><div class=\"line\">    <span class=\"attribute\">filename</span>: <span class=\"string\">'index_bundle.js'</span>,</div><div class=\"line\">    <span class=\"attribute\">hash</span>: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attribute\">plugins</span>: [</div><div class=\"line\">    new HtmlWebpackPlugin(&#123;</div><div class=\"line\">      <span class=\"attribute\">title</span>: <span class=\"string\">'My App'</span>,</div><div class=\"line\">      <span class=\"attribute\">filename</span>: <span class=\"string\">'assets/admin.html'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"生成多个-HTML-文件\"><a href=\"#生成多个-HTML-文件\" class=\"headerlink\" title=\"生成多个 HTML 文件\"></a>生成多个 HTML 文件</h4><p>通过在配置文件中添加多次这个插件，来生成多个 HTML 文件。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attribute\">entry</span>: <span class=\"string\">'index.js'</span>,</div><div class=\"line\">  <span class=\"attribute\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attribute\">path</span>: <span class=\"string\">'dist'</span>,</div><div class=\"line\">    <span class=\"attribute\">filename</span>: <span class=\"string\">'index_bundle.js'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attribute\">plugins</span>: [</div><div class=\"line\">    new HtmlWebpackPlugin(), <span class=\"comment\">// Generates default index.html</span></div><div class=\"line\">    new HtmlWebpackPlugin(&#123;  <span class=\"comment\">// Also generate a test.html</span></div><div class=\"line\">      <span class=\"attribute\">filename</span>: <span class=\"string\">'test.html'</span>,</div><div class=\"line\">      <span class=\"attribute\">template</span>: <span class=\"string\">'src/assets/test.html'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"编写自定义模板\"><a href=\"#编写自定义模板\" class=\"headerlink\" title=\"编写自定义模板\"></a>编写自定义模板</h4><p>如果默认生成的 HTML 文件不适合你的需要看，可以创建自己定义的模板。方便的方式是通过 inject 选项，然后传递给定制的 HTML 文件。html-webpack-plugin 将会自动注入所有需要的 CSS, js, manifest 和 favicon 文件到标记中。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">plugins</span>: [</div><div class=\"line\">  new HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attribute\">title</span>: <span class=\"string\">'Custom template'</span>,</div><div class=\"line\">    <span class=\"attribute\">template</span>: <span class=\"string\">'my-index.html'</span>, <span class=\"comment\">// Load a custom template</span></div><div class=\"line\">    <span class=\"attribute\">inject</span>: <span class=\"string\">'body'</span> <span class=\"comment\">// Inject all scripts into the body</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>my-index.html 文件<br><figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\"> htmlWebpackPlugin.options.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>如果你有模板加载器，可以使用它来解析这个模板。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">module:</span> &#123;</div><div class=\"line\"><span class=\"symbol\">  loaders:</span> [</div><div class=\"line\">    &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.hbs$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">\"handlebars\"</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"string\">plugins:</span> [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\"><span class=\"symbol\">    title:</span> <span class=\"string\">'Custom template using Handlebars'</span>,</div><div class=\"line\"><span class=\"symbol\">    template:</span> <span class=\"string\">'my-index.hbs'</span>,</div><div class=\"line\"><span class=\"symbol\">    inject:</span> <span class=\"string\">'body'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>另外，如果你的模式是一个字符串，可以使用 templateContent 传递它。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">plugins:</span> [</div><div class=\"line\">  new HtmlWebpackPlugin(&#123;</div><div class=\"line\"><span class=\"attr\">    inject:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    templateContent:</span> templateContentString</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>如果 inject 特性不适合你的需要，你希望完全控制资源放置。 可以直接使用 lodash 语法，使用  default template 作为起点创建自己的模板。</p>\n<p>templateContent 选项也可以是一个函数，以便使用其它语言，比如 jade：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">templateContent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">templateParams, compilation</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Return your template content synchronously here</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'..'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>或者异步版本<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins: [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    <span class=\"attr\">templateContent</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">templateParams, compilation, callback</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// Return your template content asynchronously here</span></div><div class=\"line\">      callback(<span class=\"literal\">null</span>, <span class=\"string\">'..'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意，如果同时使用 template 和 templateContent ，插件会抛出错误。</p>\n</blockquote>\n<ul>\n<li>htmlWebpackPlugin: 这个插件的相关数据</li>\n<li>htmlWebpackPlugin.files: 资源的块名，来自 webpack 的 stats 对象，包含来自 entry 的从 entry point name 到 bundle 文件名映射。<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"htmlWebpackPlugin\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"files\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"css\"</span>: [ <span class=\"string\">\"main.css\"</span> ],</div><div class=\"line\">    <span class=\"string\">\"js\"</span>: [ <span class=\"string\">\"assets/head_bundle.js\"</span>, <span class=\"string\">\"assets/main_bundle.js\"</span>],</div><div class=\"line\">    <span class=\"string\">\"chunks\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"head\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"entry\"</span>: <span class=\"string\">\"assets/head_bundle.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"css\"</span>: [ <span class=\"string\">\"main.css\"</span> ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"string\">\"main\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"entry\"</span>: <span class=\"string\">\"assets/main_bundle.js\"</span>,</div><div class=\"line\">        <span class=\"string\">\"css\"</span>: []</div><div class=\"line\">      &#125;,</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果在 webpack 配置文件中，你配置了 publicPath，将会反射正确的资源</p>\n<ul>\n<li>htmlWebpackPlugin.options: 传递给插件的配置。</li>\n<li>webpack: webpack 的 stats 对象。</li>\n<li>webpackConfig: webpack 配置信息。</li>\n</ul>\n<h4 id=\"过滤块\"><a href=\"#过滤块\" class=\"headerlink\" title=\"过滤块\"></a>过滤块</h4><p>可以使用 chunks 来限定特定的块。<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span> [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    chunk<span class=\"variable\">s:</span> [<span class=\"string\">'app'</span>]</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>还可以使用 excludeChunks 来排除特定块。<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span> [</div><div class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">    excludeChunk<span class=\"variable\">s:</span> [<span class=\"string\">'dev-helper'</span>]</div><div class=\"line\">  &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><p>通过事件允许其它插件来扩展 HTML。</p>\n<ul>\n<li>html-webpack-plugin-before-html-processing</li>\n<li>html-webpack-plugin-after-html-processing</li>\n<li>html-webpack-plugin-after-emit<br>使用方式：<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">compilation.plugin(<span class=\"string\">'html-webpack-plugin-before-html-processing'</span>, <span class=\"function\"><span class=\"keyword\">function</span></span>(htmlPluginData, <span class=\"keyword\">callback</span>) &#123;</div><div class=\"line\">  htmlPluginData.html += <span class=\"string\">'The magic footer'</span>;</div><div class=\"line\">  <span class=\"keyword\">callback</span>();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"完整的插件代码如下所示。\"><a href=\"#完整的插件代码如下所示。\" class=\"headerlink\" title=\"完整的插件代码如下所示。\"></a>完整的插件代码如下所示。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPlugin</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.options = options;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyPlugin.prototype.apply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compiler</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> paths = <span class=\"keyword\">this</span>.options.paths;</div><div class=\"line\">    compiler.plugin(<span class=\"string\">'compilation'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">compilation, options</span>) </span>&#123;</div><div class=\"line\">        compilation.plugin(<span class=\"string\">'html-webpack-plugin-before-html-processing'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">htmlPluginData, callback</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = paths.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">                htmlPluginData.assets.js.unshift(paths[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback(<span class=\"literal\">null</span>, htmlPluginData);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = MyPlugin;</div></pre></td></tr></table></figure>\n<p>最后一行是导出我们的插件。</p>"},{"layout":"post","title":"Angular指令数据绑定","date":"2016-11-23T00:55:00.000Z","comments":1,"_content":"\n\n> 准备项目示例\n 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\n <!-- more -->\n\n* Angular数据绑定有几种类型?\n*  Angular如何修改内联绑定符  `{{XXXX}}` ?\n* Angular如何隐藏模板标记?\n* Angular scope如何工作?\n* Angular ng-bind 与 ng-bind-template区别?\n        ```\n                 <div>\n                      There are <span ng-bind=\"todos.length\"></span> items\n                  </div>\n                  <div ng-bind-template=\n                       \"First: {{todos[0].action}}. Second: {{todos[1].action}}\">\n                  </div>\n        ```\n        说明：`ng-bind` 只能处理单个数据绑定表达式， `ng-bind-template`可以处理多个数据绑定。所以一般用内联绑定符   {{  和 }}  （双括号，草拟娘的，hexo编译会自动屏蔽双大括号这个符号，MB~）  绑定数据。 傻子才会用这两个。O(∩_∩)O~\n\n* asd\n","source":"_posts/2016-11-23-1.md","raw":"---\nlayout: post\ntitle: Angular指令数据绑定\ndate: 2016-11-23 08:55\ncomments: true\ntags:\n  - Angular\n  - angular基础\n  - 数据绑定\n---\n\n\n> 准备项目示例\n 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\n <!-- more -->\n\n* Angular数据绑定有几种类型?\n*  Angular如何修改内联绑定符  `{{XXXX}}` ?\n* Angular如何隐藏模板标记?\n* Angular scope如何工作?\n* Angular ng-bind 与 ng-bind-template区别?\n        ```\n                 <div>\n                      There are <span ng-bind=\"todos.length\"></span> items\n                  </div>\n                  <div ng-bind-template=\n                       \"First: {{todos[0].action}}. Second: {{todos[1].action}}\">\n                  </div>\n        ```\n        说明：`ng-bind` 只能处理单个数据绑定表达式， `ng-bind-template`可以处理多个数据绑定。所以一般用内联绑定符   {{  和 }}  （双括号，草拟娘的，hexo编译会自动屏蔽双大括号这个符号，MB~）  绑定数据。 傻子才会用这两个。O(∩_∩)O~\n\n* asd\n","slug":"2016-11-23-1","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgl000en0c5vg17x7yi","content":"<blockquote>\n<p>准备项目示例<br> 参考源码： <a href=\"https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\" target=\"_blank\" rel=\"external\">https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html</a><br> <a id=\"more\"></a></p>\n</blockquote>\n<ul>\n<li>Angular数据绑定有几种类型?</li>\n<li>Angular如何修改内联绑定符  <code></code> ?</li>\n<li>Angular如何隐藏模板标记?</li>\n<li>Angular scope如何工作?</li>\n<li><p>Angular ng-bind 与 ng-bind-template区别?</p>\n<pre><code><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">     There are <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"todos.length\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> items</div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-template</span>=</span></div><div class=\"line\">      <span class=\"string\">\"First: </span><span class=\"template-variable\">&#123;&#123;todos[0].<span class=\"builtin-name\">action</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">. Second: </span></span></span><span class=\"template-variable\">&#123;&#123;todos[1].<span class=\"builtin-name\">action</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n\n说明：`ng-bind` 只能处理单个数据绑定表达式， `ng-bind-template`可以处理多个数据绑定。所以一般用内联绑定符   {{  和 }}  （双括号，草拟娘的，hexo编译会自动屏蔽双大括号这个符号，MB~）  绑定数据。 傻子才会用这两个。O(∩_∩)O~\n</code></pre></li>\n<li><p>asd</p>\n</li>\n</ul>\n","excerpt":"<blockquote>\n<p>准备项目示例<br> 参考源码： <a href=\"https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\">https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html</a><br>","more":"</p>\n</blockquote>\n<ul>\n<li>Angular数据绑定有几种类型?</li>\n<li>Angular如何修改内联绑定符  <code></code> ?</li>\n<li>Angular如何隐藏模板标记?</li>\n<li>Angular scope如何工作?</li>\n<li><p>Angular ng-bind 与 ng-bind-template区别?</p>\n<pre><code><figure class=\"highlight handlebars\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">     There are <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"todos.length\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> items</div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-bind-template</span>=</div><div class=\"line\">      <span class=\"string\">\"First: </span></span></span><span class=\"template-variable\">&#123;&#123;todos[0].<span class=\"builtin-name\">action</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">. Second: </span></span></span><span class=\"template-variable\">&#123;&#123;todos[1].<span class=\"builtin-name\">action</span>&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n\n说明：`ng-bind` 只能处理单个数据绑定表达式， `ng-bind-template`可以处理多个数据绑定。所以一般用内联绑定符   {{  和 }}  （双括号，草拟娘的，hexo编译会自动屏蔽双大括号这个符号，MB~）  绑定数据。 傻子才会用这两个。O(∩_∩)O~\n</code></pre></li>\n<li><p>asd</p>\n</li>\n</ul>"},{"layout":"post","title":"Material设置当前字体为主题默认颜色","date":"2016-11-08T07:06:41.000Z","comments":1,"_content":"```  \nmd-colors=\"{color:'primary'}\"\n```\n<!-- more -->\n*  Angular Material 默认不支持字体颜色，如下方法可以设置当前字体为主题默认颜色：\n`<h2  md-colors=\"{color:'primary'}\"> 账号系统 <small class=\"md-caption\">/ 账户管理</small></h2>`\n\n   see: http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top\n\n* angular验证：\n <md-input-container class=\"md-block\" flex-gt-sm>\n       <label>账号</label>\n       <input ng-model=\"ctrl.account\" name=\"account\" ng-pattern=\"/^[A-Za-z0-9]{1,10}$/\">\n       <div ng-messages=\"表单名.输入框名.$error\" role=\"alert\" multiple>\n           <div ng-message=\"pattern\" class=\"my-message\">请输入十个字符以内的数字字母\n           </div>\n       </div>\n   </md-input-container>\n","source":"_posts/2016-11-08.md","raw":"---\nlayout: post\ntitle:  Material设置当前字体为主题默认颜色\ndate:  2016-11-08 15:06:41\ncomments: true\ntags:\n  - Angular Material\n---\n```  \nmd-colors=\"{color:'primary'}\"\n```\n<!-- more -->\n*  Angular Material 默认不支持字体颜色，如下方法可以设置当前字体为主题默认颜色：\n`<h2  md-colors=\"{color:'primary'}\"> 账号系统 <small class=\"md-caption\">/ 账户管理</small></h2>`\n\n   see: http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top\n\n* angular验证：\n <md-input-container class=\"md-block\" flex-gt-sm>\n       <label>账号</label>\n       <input ng-model=\"ctrl.account\" name=\"account\" ng-pattern=\"/^[A-Za-z0-9]{1,10}$/\">\n       <div ng-messages=\"表单名.输入框名.$error\" role=\"alert\" multiple>\n           <div ng-message=\"pattern\" class=\"my-message\">请输入十个字符以内的数字字母\n           </div>\n       </div>\n   </md-input-container>\n","slug":"2016-11-08","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgo000gn0c5yzuu7k40","content":"<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">md-colors</span>=<span class=\"string\">\"&#123;color:'primary'&#125;\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li><p>Angular Material 默认不支持字体颜色，如下方法可以设置当前字体为主题默认颜色：<br><code>&lt;h2  md-colors=&quot;{color:&#39;primary&#39;}&quot;&gt; 账号系统 &lt;small class=&quot;md-caption&quot;&gt;/ 账户管理&lt;/small&gt;&lt;/h2&gt;</code></p>\n<p>see: <a href=\"http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top</a></p>\n</li>\n<li><p>angular验证：<br><md-input-container class=\"md-block\" flex-gt-sm=\"\"></md-input-container></p>\n<pre><code>&lt;label&gt;账号&lt;/label&gt;\n&lt;input ng-model=&quot;ctrl.account&quot; name=&quot;account&quot; ng-pattern=&quot;/^[A-Za-z0-9]{1,10}$/&quot;&gt;\n&lt;div ng-messages=&quot;表单名.输入框名.$error&quot; role=&quot;alert&quot; multiple&gt;\n    &lt;div ng-message=&quot;pattern&quot; class=&quot;my-message&quot;&gt;请输入十个字符以内的数字字母\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p> </p>\n</li>\n</ul>\n","excerpt":"<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">md-colors</span>=<span class=\"string\">\"&#123;color:'primary'&#125;\"</span></div></pre></td></tr></table></figure>","more":"<ul>\n<li><p>Angular Material 默认不支持字体颜色，如下方法可以设置当前字体为主题默认颜色：<br><code>&lt;h2  md-colors=&quot;{color:&#39;primary&#39;}&quot;&gt; 账号系统 &lt;small class=&quot;md-caption&quot;&gt;/ 账户管理&lt;/small&gt;&lt;/h2&gt;</code></p>\n<p>see: <a href=\"http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top\">http://stackoverflow.com/questions/28487327/how-to-set-text-color-in-angular-material?answertab=active#tab-top</a></p>\n</li>\n<li><p>angular验证：<br><md-input-container class=\"md-block\" flex-gt-sm></p>\n<pre><code>&lt;label&gt;账号&lt;/label&gt;\n&lt;input ng-model=&quot;ctrl.account&quot; name=&quot;account&quot; ng-pattern=&quot;/^[A-Za-z0-9]{1,10}$/&quot;&gt;\n&lt;div ng-messages=&quot;表单名.输入框名.$error&quot; role=&quot;alert&quot; multiple&gt;\n    &lt;div ng-message=&quot;pattern&quot; class=&quot;my-message&quot;&gt;请输入十个字符以内的数字字母\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p> </md-input-container></p>\n</li>\n</ul>"},{"layout":"post","title":"Angular Material Dynamic Themes | 动态主题","date":"2016-11-09T00:55:00.000Z","comments":1,"_content":"\n先看效果： http://codepen.io/myoneray/pen/RoWGmp?editors=1010\n\nangular Material 主题的修改主要围绕 `$mdThemingProvider`服务展开：\n\n<!-- more -->\n\n* 提供程序配置`$ mdTheming`服务\n\n#### 默认主题\n` $mdThemingProvider`默认使用一下配置:\n```\nPrimary Palette: Primary\nAccent Palette: Pink\nWarn Palette: Deep-Orange\nBackground Palette: Grey\n```\n\n#### 修改默认主题\n如果你不想在元素本身使用`md-theme`指令，覆盖默认主题。\n你可以使用下面的方式：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  $mdThemingProvider\n    .theme('default')\n    .primaryPalette('blue')\n    .accentPalette('teal')\n    .warnPalette('red')\n    .backgroundPalette('grey');\n});\n```\n#### 动态主题\n默认情况下，如果在运行时更改主题，`$ mdTheming`服务将不会检测到这些更改。\n如果你有一个应用程序，在运行时更改其主题，你必须启用主题监测：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Enable theme watching.\n  $mdThemingProvider.alwaysWatchTheme(true);\n});\n```\n#### 自定义主题样式\n有时你可能想要为自定义组件使用自己的主题。\n你可以使用以下标记注册您自己的样式：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Register our custom stylesheet into the theming provider.\n  $mdThemingProvider.registerStyles(STYLESHEET);\n});\n```\n`registerStyles`方法只接受字符串作为值，所以你实际上不能将外部样式表文件加载到`$ mdThemingProvider`。\n如果需要加载外部样式表，我们建议使用打包工具，它支持包括原始内容，如`webpack`的`raw-loader`：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Register your custom stylesheet into the theming provider.\n  $mdThemingProvider.registerStyles(require('../styles/my-component.theme.css'));\n});\n```\n#### 浏览器颜色\n启用浏览器标题着色更多信息请访问：\nhttps://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color\n\n选项参数：\n`theme` - 通过`$ mdThemeProvider`定义的主题来使用调色板。默认为默认主题。\n`palette`- 可以是基本材质设计调色板，扩展定义调色板和 'primary', 'accent', 'background' 和 'warn'中的任何一个。默认值为primary。\n`hue` - 来自所选调色板的色调。默认值为800\n\n例如一下配置：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Enable browser color\n  $mdThemingProvider.enableBrowserColor({\n    theme: 'myTheme', // Default is 'default'\n    palette: 'accent', // Default is 'primary', any basic material palette and extended palettes are available\n    hue: '200' // Default is '800'\n  });\n});\n```\n### 方法\n*  `$mdThemingProvider.registerStyles(styles);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\nstyles|\tstring\t|Angular Material的内置主题css中的样式。\n\n*  `$mdThemingProvider.setNonce(nonceValue);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n  nonceValue|\tstring|要作为属性添加到主题样式标签的随机数。设置值允许使用CSP策略，而不使用unsafe-inline指令。\n\n*  `$mdThemingProvider.setDefaultTheme(themeName);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n  themeName|\tstring\t| 要应用于元素的默认主题名称。默认值为default。\n\n*  `  $mdThemingProvider.alwaysWatchTheme(watch);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n watch\t|boolean | 是否总是观察主题的变化和重新应用类，当他们改变。默认值为false。启用可能会降低性能。\n\n*  ` $mdThemingProvider.enableBrowserColor([options]);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n options\t|Object| `theme` - 通过`$ mdThemeProvider`定义的主题来使用调色板。默认为默认主题。`palette`- 可以是基本材质设计调色板，扩展定义调色板和 'primary', 'accent', 'background' 和 'warn'中的任何一个。默认值为primary。`hue` - 来自所选调色板的色调。默认值为800\n\n 返回值|\t描述\n ------------- | -------------\n Function |删除浏览器颜色的功能\n\n注：\n本文主要围绕解释阐述主题配置的，详细配置可以参考：https://material.angularjs.org/latest/Theming/01_introduction\n","source":"_posts/2016-11-09.md","raw":"---\nlayout: post\ntitle:  Angular Material Dynamic Themes | 动态主题\ndate: 2016-11-09 08:55\ncomments: true\ntags:\n  - Angular Material\n  - Dynamic Themes\n  - Themes\n---\n\n先看效果： http://codepen.io/myoneray/pen/RoWGmp?editors=1010\n\nangular Material 主题的修改主要围绕 `$mdThemingProvider`服务展开：\n\n<!-- more -->\n\n* 提供程序配置`$ mdTheming`服务\n\n#### 默认主题\n` $mdThemingProvider`默认使用一下配置:\n```\nPrimary Palette: Primary\nAccent Palette: Pink\nWarn Palette: Deep-Orange\nBackground Palette: Grey\n```\n\n#### 修改默认主题\n如果你不想在元素本身使用`md-theme`指令，覆盖默认主题。\n你可以使用下面的方式：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  $mdThemingProvider\n    .theme('default')\n    .primaryPalette('blue')\n    .accentPalette('teal')\n    .warnPalette('red')\n    .backgroundPalette('grey');\n});\n```\n#### 动态主题\n默认情况下，如果在运行时更改主题，`$ mdTheming`服务将不会检测到这些更改。\n如果你有一个应用程序，在运行时更改其主题，你必须启用主题监测：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Enable theme watching.\n  $mdThemingProvider.alwaysWatchTheme(true);\n});\n```\n#### 自定义主题样式\n有时你可能想要为自定义组件使用自己的主题。\n你可以使用以下标记注册您自己的样式：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Register our custom stylesheet into the theming provider.\n  $mdThemingProvider.registerStyles(STYLESHEET);\n});\n```\n`registerStyles`方法只接受字符串作为值，所以你实际上不能将外部样式表文件加载到`$ mdThemingProvider`。\n如果需要加载外部样式表，我们建议使用打包工具，它支持包括原始内容，如`webpack`的`raw-loader`：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Register your custom stylesheet into the theming provider.\n  $mdThemingProvider.registerStyles(require('../styles/my-component.theme.css'));\n});\n```\n#### 浏览器颜色\n启用浏览器标题着色更多信息请访问：\nhttps://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color\n\n选项参数：\n`theme` - 通过`$ mdThemeProvider`定义的主题来使用调色板。默认为默认主题。\n`palette`- 可以是基本材质设计调色板，扩展定义调色板和 'primary', 'accent', 'background' 和 'warn'中的任何一个。默认值为primary。\n`hue` - 来自所选调色板的色调。默认值为800\n\n例如一下配置：\n```\nmyAppModule.config(function($mdThemingProvider) {\n  // Enable browser color\n  $mdThemingProvider.enableBrowserColor({\n    theme: 'myTheme', // Default is 'default'\n    palette: 'accent', // Default is 'primary', any basic material palette and extended palettes are available\n    hue: '200' // Default is '800'\n  });\n});\n```\n### 方法\n*  `$mdThemingProvider.registerStyles(styles);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\nstyles|\tstring\t|Angular Material的内置主题css中的样式。\n\n*  `$mdThemingProvider.setNonce(nonceValue);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n  nonceValue|\tstring|要作为属性添加到主题样式标签的随机数。设置值允许使用CSP策略，而不使用unsafe-inline指令。\n\n*  `$mdThemingProvider.setDefaultTheme(themeName);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n  themeName|\tstring\t| 要应用于元素的默认主题名称。默认值为default。\n\n*  `  $mdThemingProvider.alwaysWatchTheme(watch);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n watch\t|boolean | 是否总是观察主题的变化和重新应用类，当他们改变。默认值为false。启用可能会降低性能。\n\n*  ` $mdThemingProvider.enableBrowserColor([options]);`\n\n参数\t|类型|\t描述\n------------- | ------|-------\n options\t|Object| `theme` - 通过`$ mdThemeProvider`定义的主题来使用调色板。默认为默认主题。`palette`- 可以是基本材质设计调色板，扩展定义调色板和 'primary', 'accent', 'background' 和 'warn'中的任何一个。默认值为primary。`hue` - 来自所选调色板的色调。默认值为800\n\n 返回值|\t描述\n ------------- | -------------\n Function |删除浏览器颜色的功能\n\n注：\n本文主要围绕解释阐述主题配置的，详细配置可以参考：https://material.angularjs.org/latest/Theming/01_introduction\n","slug":"2016-11-09","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgr000hn0c5wyvkh9ao","content":"<p>先看效果： <a href=\"http://codepen.io/myoneray/pen/RoWGmp?editors=1010\" target=\"_blank\" rel=\"external\">http://codepen.io/myoneray/pen/RoWGmp?editors=1010</a></p>\n<p>angular Material 主题的修改主要围绕 <code>$mdThemingProvider</code>服务展开：</p>\n<a id=\"more\"></a>\n<ul>\n<li>提供程序配置<code>$ mdTheming</code>服务</li>\n</ul>\n<h4 id=\"默认主题\"><a href=\"#默认主题\" class=\"headerlink\" title=\"默认主题\"></a>默认主题</h4><p><code>$mdThemingProvider</code>默认使用一下配置:<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Primary <span class=\"string\">Palette:</span> Primary</div><div class=\"line\">Accent <span class=\"string\">Palette:</span> Pink</div><div class=\"line\">Warn <span class=\"string\">Palette:</span> Deep-Orange</div><div class=\"line\">Background <span class=\"string\">Palette:</span> Grey</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改默认主题\"><a href=\"#修改默认主题\" class=\"headerlink\" title=\"修改默认主题\"></a>修改默认主题</h4><p>如果你不想在元素本身使用<code>md-theme</code>指令，覆盖默认主题。<br>你可以使用下面的方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">myAppModule</span><span class=\"selector-class\">.config</span>(function($mdThemingProvider) &#123;</div><div class=\"line\">  $<span class=\"selector-tag\">mdThemingProvider</span></div><div class=\"line\">    <span class=\"selector-class\">.theme</span>(<span class=\"string\">'default'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.primaryPalette</span>(<span class=\"string\">'blue'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.accentPalette</span>(<span class=\"string\">'teal'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.warnPalette</span>(<span class=\"string\">'red'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.backgroundPalette</span>(<span class=\"string\">'grey'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"动态主题\"><a href=\"#动态主题\" class=\"headerlink\" title=\"动态主题\"></a>动态主题</h4><p>默认情况下，如果在运行时更改主题，<code>$ mdTheming</code>服务将不会检测到这些更改。<br>如果你有一个应用程序，在运行时更改其主题，你必须启用主题监测：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($mdThemingProvider)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Enable theme watching.</span></div><div class=\"line\">  $mdThemingProvider.alwaysWatchTheme(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"自定义主题样式\"><a href=\"#自定义主题样式\" class=\"headerlink\" title=\"自定义主题样式\"></a>自定义主题样式</h4><p>有时你可能想要为自定义组件使用自己的主题。<br>你可以使用以下标记注册您自己的样式：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($mdThemingProvider)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Register our custom stylesheet into the theming provider.</span></div><div class=\"line\">  $mdThemingProvider.registerStyles(STYLESHEET);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>registerStyles</code>方法只接受字符串作为值，所以你实际上不能将外部样式表文件加载到<code>$ mdThemingProvider</code>。<br>如果需要加载外部样式表，我们建议使用打包工具，它支持包括原始内容，如<code>webpack</code>的<code>raw-loader</code>：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($mdThemingProvider)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Register your custom stylesheet into the theming provider.</span></div><div class=\"line\">  $mdThemingProvider.registerStyles(<span class=\"keyword\">require</span>(<span class=\"string\">'../styles/my-component.theme.css'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"浏览器颜色\"><a href=\"#浏览器颜色\" class=\"headerlink\" title=\"浏览器颜色\"></a>浏览器颜色</h4><p>启用浏览器标题着色更多信息请访问：<br><a href=\"https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color\" target=\"_blank\" rel=\"external\">https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color</a></p>\n<p>选项参数：<br><code>theme</code> - 通过<code>$ mdThemeProvider</code>定义的主题来使用调色板。默认为默认主题。<br><code>palette</code>- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。<br><code>hue</code> - 来自所选调色板的色调。默认值为800</p>\n<p>例如一下配置：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"keyword\">function</span>(<span class=\"variable\">$mdThemingProvider</span>) &#123;</div><div class=\"line\">  <span class=\"regexp\">//</span> Enable browser color</div><div class=\"line\">  <span class=\"variable\">$mdThemingProvider</span>.enableBrowserColor(&#123;</div><div class=\"line\">    theme: <span class=\"string\">'myTheme'</span>, <span class=\"regexp\">//</span> Default is <span class=\"string\">'default'</span></div><div class=\"line\">    palette: <span class=\"string\">'accent'</span>, <span class=\"regexp\">//</span> Default is <span class=\"string\">'primary'</span>, any basic material palette and extended palettes are available</div><div class=\"line\">    hue: <span class=\"string\">'200'</span> <span class=\"regexp\">//</span> Default is <span class=\"string\">'800'</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li><code>$mdThemingProvider.registerStyles(styles);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>styles</td>\n<td>string</td>\n<td>Angular Material的内置主题css中的样式。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.setNonce(nonceValue);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  nonceValue</td>\n<td>string</td>\n<td>要作为属性添加到主题样式标签的随机数。设置值允许使用CSP策略，而不使用unsafe-inline指令。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.setDefaultTheme(themeName);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  themeName</td>\n<td>string</td>\n<td>要应用于元素的默认主题名称。默认值为default。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.alwaysWatchTheme(watch);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> watch</td>\n<td>boolean</td>\n<td>是否总是观察主题的变化和重新应用类，当他们改变。默认值为false。启用可能会降低性能。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.enableBrowserColor([options]);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> options</td>\n<td>Object</td>\n<td><code>theme</code> - 通过<code>$ mdThemeProvider</code>定义的主题来使用调色板。默认为默认主题。<code>palette</code>- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。<code>hue</code> - 来自所选调色板的色调。默认值为800</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> Function</td>\n<td>删除浏览器颜色的功能</td>\n</tr>\n</tbody>\n</table>\n<p>注：<br>本文主要围绕解释阐述主题配置的，详细配置可以参考：<a href=\"https://material.angularjs.org/latest/Theming/01_introduction\" target=\"_blank\" rel=\"external\">https://material.angularjs.org/latest/Theming/01_introduction</a></p>\n","excerpt":"<p>先看效果： <a href=\"http://codepen.io/myoneray/pen/RoWGmp?editors=1010\">http://codepen.io/myoneray/pen/RoWGmp?editors=1010</a></p>\n<p>angular Material 主题的修改主要围绕 <code>$mdThemingProvider</code>服务展开：</p>","more":"<ul>\n<li>提供程序配置<code>$ mdTheming</code>服务</li>\n</ul>\n<h4 id=\"默认主题\"><a href=\"#默认主题\" class=\"headerlink\" title=\"默认主题\"></a>默认主题</h4><p><code>$mdThemingProvider</code>默认使用一下配置:<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Primary <span class=\"string\">Palette:</span> Primary</div><div class=\"line\">Accent <span class=\"string\">Palette:</span> Pink</div><div class=\"line\">Warn <span class=\"string\">Palette:</span> Deep-Orange</div><div class=\"line\">Background <span class=\"string\">Palette:</span> Grey</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改默认主题\"><a href=\"#修改默认主题\" class=\"headerlink\" title=\"修改默认主题\"></a>修改默认主题</h4><p>如果你不想在元素本身使用<code>md-theme</code>指令，覆盖默认主题。<br>你可以使用下面的方式：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">myAppModule</span><span class=\"selector-class\">.config</span>(function($mdThemingProvider) &#123;</div><div class=\"line\">  $<span class=\"selector-tag\">mdThemingProvider</span></div><div class=\"line\">    <span class=\"selector-class\">.theme</span>(<span class=\"string\">'default'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.primaryPalette</span>(<span class=\"string\">'blue'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.accentPalette</span>(<span class=\"string\">'teal'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.warnPalette</span>(<span class=\"string\">'red'</span>)</div><div class=\"line\">    <span class=\"selector-class\">.backgroundPalette</span>(<span class=\"string\">'grey'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"动态主题\"><a href=\"#动态主题\" class=\"headerlink\" title=\"动态主题\"></a>动态主题</h4><p>默认情况下，如果在运行时更改主题，<code>$ mdTheming</code>服务将不会检测到这些更改。<br>如果你有一个应用程序，在运行时更改其主题，你必须启用主题监测：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($mdThemingProvider)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Enable theme watching.</span></div><div class=\"line\">  $mdThemingProvider.alwaysWatchTheme(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"自定义主题样式\"><a href=\"#自定义主题样式\" class=\"headerlink\" title=\"自定义主题样式\"></a>自定义主题样式</h4><p>有时你可能想要为自定义组件使用自己的主题。<br>你可以使用以下标记注册您自己的样式：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($mdThemingProvider)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Register our custom stylesheet into the theming provider.</span></div><div class=\"line\">  $mdThemingProvider.registerStyles(STYLESHEET);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>registerStyles</code>方法只接受字符串作为值，所以你实际上不能将外部样式表文件加载到<code>$ mdThemingProvider</code>。<br>如果需要加载外部样式表，我们建议使用打包工具，它支持包括原始内容，如<code>webpack</code>的<code>raw-loader</code>：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($mdThemingProvider)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Register your custom stylesheet into the theming provider.</span></div><div class=\"line\">  $mdThemingProvider.registerStyles(<span class=\"keyword\">require</span>(<span class=\"string\">'../styles/my-component.theme.css'</span>));</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h4 id=\"浏览器颜色\"><a href=\"#浏览器颜色\" class=\"headerlink\" title=\"浏览器颜色\"></a>浏览器颜色</h4><p>启用浏览器标题着色更多信息请访问：<br><a href=\"https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color\">https://developers.google.com/web/fundamentals/design-and-ui/browser-customization/theme-color</a></p>\n<p>选项参数：<br><code>theme</code> - 通过<code>$ mdThemeProvider</code>定义的主题来使用调色板。默认为默认主题。<br><code>palette</code>- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。<br><code>hue</code> - 来自所选调色板的色调。默认值为800</p>\n<p>例如一下配置：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">myAppModule.config(<span class=\"keyword\">function</span>(<span class=\"variable\">$mdThemingProvider</span>) &#123;</div><div class=\"line\">  <span class=\"regexp\">//</span> Enable browser color</div><div class=\"line\">  <span class=\"variable\">$mdThemingProvider</span>.enableBrowserColor(&#123;</div><div class=\"line\">    theme: <span class=\"string\">'myTheme'</span>, <span class=\"regexp\">//</span> Default is <span class=\"string\">'default'</span></div><div class=\"line\">    palette: <span class=\"string\">'accent'</span>, <span class=\"regexp\">//</span> Default is <span class=\"string\">'primary'</span>, any basic material palette and extended palettes are available</div><div class=\"line\">    hue: <span class=\"string\">'200'</span> <span class=\"regexp\">//</span> Default is <span class=\"string\">'800'</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li><code>$mdThemingProvider.registerStyles(styles);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>styles</td>\n<td>string</td>\n<td>Angular Material的内置主题css中的样式。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.setNonce(nonceValue);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  nonceValue</td>\n<td>string</td>\n<td>要作为属性添加到主题样式标签的随机数。设置值允许使用CSP策略，而不使用unsafe-inline指令。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.setDefaultTheme(themeName);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  themeName</td>\n<td>string</td>\n<td>要应用于元素的默认主题名称。默认值为default。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.alwaysWatchTheme(watch);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> watch</td>\n<td>boolean</td>\n<td>是否总是观察主题的变化和重新应用类，当他们改变。默认值为false。启用可能会降低性能。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>$mdThemingProvider.enableBrowserColor([options]);</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> options</td>\n<td>Object</td>\n<td><code>theme</code> - 通过<code>$ mdThemeProvider</code>定义的主题来使用调色板。默认为默认主题。<code>palette</code>- 可以是基本材质设计调色板，扩展定义调色板和 ‘primary’, ‘accent’, ‘background’ 和 ‘warn’中的任何一个。默认值为primary。<code>hue</code> - 来自所选调色板的色调。默认值为800</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> Function</td>\n<td>删除浏览器颜色的功能</td>\n</tr>\n</tbody>\n</table>\n<p>注：<br>本文主要围绕解释阐述主题配置的，详细配置可以参考：<a href=\"https://material.angularjs.org/latest/Theming/01_introduction\">https://material.angularjs.org/latest/Theming/01_introduction</a></p>"},{"layout":"post","title":"前段框架搭建汇总-①","date":"2016-10-21T06:45:00.000Z","comments":1,"_content":"\n>框架搭建过程！\n\n<!-- more -->\n\n\n* 安装Webpack <br>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为ProjectName），在终端中转到该文件夹后执行下述指令就可以完成安装。\n```\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n* 初始化项目<br>\n  在上述练习文件夹中创建一个`package.json`文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用`npm init`命令可以自动创建这个`package.json`文件\n```\nmkdir ProjectName\ncd ProjectName\nnpm init //自动创建这个package.json\n```\n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在`npm`中发布你的模块，这些问题的答案都不重要，回车默认即可。\n\n* `package.json`文件已经就绪，我们在本项目中安装`Webpack`作为依赖包\n```\n// 安装Webpack\nnpm install --save-dev webpack\n```\n\n* 创建项目文件夹及其入口文件\n<br>回到之前的空文件夹，并在里面创建两个文件夹,`app`文件夹和`public`文件夹， <abbr title=\"\">`app`文件夹用来存放原始数据和我们将写的JavaScript模块</abbr>，<abbr title=\"\">`public`文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）</abbr>。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示\n```\nmkdir app  public\ncd app\ntouch  main.js  Greeter.js\ncd ../public\ntouch index.html\n```\n此时项目结构如下图所示\n![](/img/2016-10-21.png)\n\n>`index.html`文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（`bundle.js`）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n>`Greeter.js`只包括一个用来返回包含问候信息的`html`元素的函数。\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n\n>`main.js`用来把`Greeter`模块返回的节点插入页面。\n```\n//main.js\nvar greeter = require('./Greeter.js');\ndocument.getElementById('root').appendChild(greeter());\n```\n\n##### 正式使用Webpack\nwebpack可以在终端中使用，其最基础的命令是\n```\nwebpack {entry file/入口文件} {destination for bundled file/存放bundle.js的地方}\n```\n只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，\n不过需要注意的是 <abbr title=\"\">如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在`node_modules`中的地址</abbr>.\n* 继续上面的例子，在终端中属于如下命令:\n```\n//webpack非全局安装的情况\nnode_modules/.bin/webpack   app/main.js   public/bundle.js\n```\n结果如下\n![](/img/2016-10-21-1.png)  \n可以看出`webpack`同时编译了`main.js `和`Greeter.js`,\n现在打开`index.html`,可以看到如下结果\n![](/img/2016-10-21-2.png)\n有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。\n\n\n##### 通过配置文件来使用Webpack\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为`webpack.config.js`的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n```\n>注：`__dirname` 是node.js中的一个全局变量，它指向<abbr title=\"\">当前执行脚本所在的目录<abbr>。\n\n现在如果你需要打包文件只需要在终端里你运行`webpack`(非全局安装需使用`node_modules/.bin/webpack`)命令就可以了，这条命令会自动参考`webpack.config.js`文件中的配置选项打包你的项目。\n\n又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用`node_modules/.bin/webpack`)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。\n\n##### 更快捷的执行打包任务\n执行类似于`node_modules/.bin/webpack`这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。\n在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\"  //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.9\"\n  }\n}\n```\n>注：package.json中的脚本部分已经默认在命令前添加了`node_modules/.bin`路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`，以下是执行`npm start`后命令行的输出显示\n![](/img/2016-10-21-3.png)\n现在只需要使用`npm start`就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。\n\n##### Webpack的强大功能\n###### 生成Source Maps（使调试更容易）\n开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br>\n通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。<br>\n在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：\n\ndevtool选项  | 配置结果\n------------- | -------------\nsource-map  | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；\ncheap-module-source-map  | 在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；\neval-source-map | 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；\ncheap-module-eval-source-map  | 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和`eval-source-map`选项具有相似的缺点；\n\n正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。\n在学习阶段以及在小到中性的项目上，`eval-source-map`是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置\n```\nmodule.exports = {\n  devtool: 'eval-source-map',//配置生成Source Maps，选择合适的选项\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  }\n}\n```\n>`cheap-module-eval-source-map`方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。\n\n\n##### 使用webpack构建本地服务器\n想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖\n```\nnpm install --save-dev webpack-dev-server\n```\n* devserver作为webpack配置选项中的一项，具有以下配置选项\n\ndevserver配置选项\t|功能描述\n------------- | -------------\ncontentBase\t|默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public\"目录）\nport\t|设置默认监听端口，如果省略，默认为`8080`\ninline\t|设置为`true`，当源文件改变时会自动刷新页面\ncolors\t|设置为`true`，使终端输出的文件为彩色的\nhistoryApiFallback\t|在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n\n* 继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  devServer: {\n    contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n    colors: true,//终端中输出结果为彩色\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  }\n}\n```\n\n##### Loaders\n###### 鼎鼎大名的Loaders登场了！\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在`webpack.config.js`下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：\n* test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n* loader：loader的名称（必须）\n* include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n* query：为loaders提供额外的设置选项（可选）\n\n>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n```\n//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n```\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {//在配置文件里添加JSON loader\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n>创建带有问候信息的JSON文件(命名为config.json)\n```\n//config.json\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n>更新后的Greeter.js\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n```\n>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n\n##### Babel\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n*下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n*使用基于JavaScript进行了拓展的语言，比如React的JSX\n##### Babel的安装与配置\nBabel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n>我们先来一次性安装这些依赖包\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n```\n>在webpack中配置Babel的方法如下\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel',//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: ['es2015','react']\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n```\nnpm install --save react react-dom\n```\n>使用`ES6`的语法，更新Greeter.js并返回一个`React`组件\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n>使用ES6的模块定义和渲染Greeter模块\n```\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n##### Babel的配置选项\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：\n```\n// webpack.config.js\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n```\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n##### 一切皆模块\nWebpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。\n\n##### CSS\nwebpack提供两个工具处理样式表，`css-loader` 和`style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import `和` url(...)`的方法实现` require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入`webpack`打包后的JS文件中。\n>继续上面的例子\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n```\n//使用\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css'//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n>注：感叹号的作用在于使同一文件能够使用不同类型的loader\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n```\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n##### CSS module\n在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。\n不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。\n\n最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n>创建一个Greeter.css文件\n\n```\n.root {\n  background-color: #eee;\n  padding: 10px;\n  border: 3px solid #ccc;\n}\n```\n\n>导入.root到Greeter.js中\n\n```\nimport React, {Component} from 'react';\nimport config from './config.json';\nimport styles from './Greeter.css';//导入\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div className={styles.root}>//添加类名\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n>放心使用把，相同的类名也不会造成不同组件之间的污染。\n>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息\n\n\n##### CSS预处理器\nSass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，\n你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders\n* Less Loader\n* Sass Loader\n* Stylus Loader\n\n不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其CSS官方文档可了解更多相关知识。\n举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。\n\n>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）\n```\nnpm install --save-dev postcss-loader autoprefixer\n```\n>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。\n```\n//webpack配置文件\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry: __dirname + \"/app/main.js\",\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css?modules!postcss'\n      }\n    ]\n  },\n\n  postcss: [\n    require('autoprefixer')//调用autoprefixer插件\n  ],\n\n  devServer: {...}\n}\n```\n到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins\n\n##### 插件（Plugins）\n插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\nWebpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。\n\n##### 使用插件的方法\n要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。\n\n```\n//webpack.config.js\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry:  __dirname + \"/app/main.js\",\n  output: {...},\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: \"json\" },\n      { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n      { test: /\\.css$/, loader: 'style!css?modules!postcss' }//这里添加PostCSS\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new webpack.BannerPlugin(\"Copyright Flying Unicorns inc.\")//在这个数组中new一个就可以了\n  ],\n\n  devServer: {...}\n}\n```\n>打包后的JS文件`bundle.js`将会添加版本信息。\n知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件\n\n##### HtmlWebpackPlugin\n这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。\n* 安装\n```\nnpm install --save-dev html-webpack-plugin\n```\n这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：\n1. 移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。\n2.  在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码\n如下\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n  </body>\n</html>\n```\n3. 更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: \"json\" },\n      { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n      { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n    })\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n##### Hot Module Replacement\nHot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。\n在webpack中实现HMR也很简单，只需要做两项配置\n1. 在webpack配置文件中添加HMR插件；\n2. 在Webpack Dev Server中添加“hot”参数；\n\n不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。\n\n整理下我们的思路，具体实现方法如下\n* Babel和webpack是独立的工具\n* 二者可以一起工作\n* 二者都可以通过插件拓展功能\n*  HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；\n* Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；\n\n>更新我们的例子来实际看看如何配置\n```\n//webpack中的配置\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: \"json\" },\n      { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n      { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n    new webpack.HotModuleReplacementPlugin()//热加载插件\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true,\n    hot: true\n  }\n}\n```\n\n>安装react-transform-hmr\n```\nnpm install --save-dev babel-plugin-react-transform react-transform-hmr\n```\n>配置Babel\n```\n{\n  \"presets\": [\"react\", \"es2015\"],\n  \"env\": {\n    \"development\": {\n    \"plugins\": [[\"react-transform\", {\n       \"transforms\": [{\n         \"transform\": \"react-transform-hmr\",\n\n         \"imports\": [\"react\"],\n\n         \"locals\": [\"module\"]\n       }]\n     }]]\n    }\n  }\n}\n```\n>现在当你使用React时，可以热加载模块了\n\n##### 产品阶段的构建\n目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。\n\n对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下\n\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css?modules!postcss'\n      }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n  ],\n\n}\n```\n>package.json\n```\n//package.json\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --progress\",\n    \"build\": \"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"\n  },\n  \"author\": \"Cássio Zen\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {...},\n  \"dependencies\": {...}\n}\n```\n\n##### 优化插件\nwebpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能\n* OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n* UglifyJsPlugin：压缩JS代码；\n* ExtractTextPlugin：分离CSS和JS文件\n\n>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们\n```\nnpm install --save-dev extract-text-webpack-plugin\n```\n>在配置文件的plugins后引用它们\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n      }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(\"style.css\")\n  ]\n}\n```\n##### 缓存\n缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\nwebpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前\n\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"[name]-[hash].js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n      }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(\"[name]-[hash].css\")\n  ]\n}\n```\n>现在用户会有合理的缓存了。\n\n\n##### 总结\n这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到[本文的英文版Webpack for React](http://www.pro-react.com/materials/appendixA/#\"Heading link\")，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。\n\n<hr>\n点击查看 [本文的英文版Webpack for React](http://www.pro-react.com/materials/appendixA/#\"Heading link\")\n点击查看 [原本](http://www.jianshu.com/p/42e11515c10f#\"Heading link\")\n","source":"_posts/2016-10-21-1.md","raw":"---\nlayout: post\ntitle: 前段框架搭建汇总-①\ndate: '2016-10-21 14:45'\ncomments: true\ntags:\n  - 前段\n  - 笔记\n  - 框架搭建\n  - webpack\n---\n\n>框架搭建过程！\n\n<!-- more -->\n\n\n* 安装Webpack <br>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为ProjectName），在终端中转到该文件夹后执行下述指令就可以完成安装。\n```\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n* 初始化项目<br>\n  在上述练习文件夹中创建一个`package.json`文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用`npm init`命令可以自动创建这个`package.json`文件\n```\nmkdir ProjectName\ncd ProjectName\nnpm init //自动创建这个package.json\n```\n输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在`npm`中发布你的模块，这些问题的答案都不重要，回车默认即可。\n\n* `package.json`文件已经就绪，我们在本项目中安装`Webpack`作为依赖包\n```\n// 安装Webpack\nnpm install --save-dev webpack\n```\n\n* 创建项目文件夹及其入口文件\n<br>回到之前的空文件夹，并在里面创建两个文件夹,`app`文件夹和`public`文件夹， <abbr title=\"\">`app`文件夹用来存放原始数据和我们将写的JavaScript模块</abbr>，<abbr title=\"\">`public`文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）</abbr>。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示\n```\nmkdir app  public\ncd app\ntouch  main.js  Greeter.js\ncd ../public\ntouch index.html\n```\n此时项目结构如下图所示\n![](/img/2016-10-21.png)\n\n>`index.html`文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（`bundle.js`）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n>`Greeter.js`只包括一个用来返回包含问候信息的`html`元素的函数。\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n\n>`main.js`用来把`Greeter`模块返回的节点插入页面。\n```\n//main.js\nvar greeter = require('./Greeter.js');\ndocument.getElementById('root').appendChild(greeter());\n```\n\n##### 正式使用Webpack\nwebpack可以在终端中使用，其最基础的命令是\n```\nwebpack {entry file/入口文件} {destination for bundled file/存放bundle.js的地方}\n```\n只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，\n不过需要注意的是 <abbr title=\"\">如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在`node_modules`中的地址</abbr>.\n* 继续上面的例子，在终端中属于如下命令:\n```\n//webpack非全局安装的情况\nnode_modules/.bin/webpack   app/main.js   public/bundle.js\n```\n结果如下\n![](/img/2016-10-21-1.png)  \n可以看出`webpack`同时编译了`main.js `和`Greeter.js`,\n现在打开`index.html`,可以看到如下结果\n![](/img/2016-10-21-2.png)\n有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。\n\n\n##### 通过配置文件来使用Webpack\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为`webpack.config.js`的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n```\n>注：`__dirname` 是node.js中的一个全局变量，它指向<abbr title=\"\">当前执行脚本所在的目录<abbr>。\n\n现在如果你需要打包文件只需要在终端里你运行`webpack`(非全局安装需使用`node_modules/.bin/webpack`)命令就可以了，这条命令会自动参考`webpack.config.js`文件中的配置选项打包你的项目。\n\n又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用`node_modules/.bin/webpack`)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。\n\n##### 更快捷的执行打包任务\n执行类似于`node_modules/.bin/webpack`这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。\n在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\"  //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.9\"\n  }\n}\n```\n>注：package.json中的脚本部分已经默认在命令前添加了`node_modules/.bin`路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`，以下是执行`npm start`后命令行的输出显示\n![](/img/2016-10-21-3.png)\n现在只需要使用`npm start`就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。\n\n##### Webpack的强大功能\n###### 生成Source Maps（使调试更容易）\n开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br>\n通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。<br>\n在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：\n\ndevtool选项  | 配置结果\n------------- | -------------\nsource-map  | 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；\ncheap-module-source-map  | 在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；\neval-source-map | 使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；\ncheap-module-eval-source-map  | 这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和`eval-source-map`选项具有相似的缺点；\n\n正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。\n在学习阶段以及在小到中性的项目上，`eval-source-map`是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置\n```\nmodule.exports = {\n  devtool: 'eval-source-map',//配置生成Source Maps，选择合适的选项\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  }\n}\n```\n>`cheap-module-eval-source-map`方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。\n\n\n##### 使用webpack构建本地服务器\n想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖\n```\nnpm install --save-dev webpack-dev-server\n```\n* devserver作为webpack配置选项中的一项，具有以下配置选项\n\ndevserver配置选项\t|功能描述\n------------- | -------------\ncontentBase\t|默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public\"目录）\nport\t|设置默认监听端口，如果省略，默认为`8080`\ninline\t|设置为`true`，当源文件改变时会自动刷新页面\ncolors\t|设置为`true`，使终端输出的文件为彩色的\nhistoryApiFallback\t|在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html\n\n* 继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  devServer: {\n    contentBase: \"./public\",//本地服务器所加载的页面所在的目录\n    colors: true,//终端中输出结果为彩色\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  }\n}\n```\n\n##### Loaders\n###### 鼎鼎大名的Loaders登场了！\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在`webpack.config.js`下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：\n* test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n* loader：loader的名称（必须）\n* include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n* query：为loaders提供额外的设置选项（可选）\n\n>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n```\n//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n```\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {//在配置文件里添加JSON loader\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n>创建带有问候信息的JSON文件(命名为config.json)\n```\n//config.json\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n>更新后的Greeter.js\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n```\n>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n\n##### Babel\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n*下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n*使用基于JavaScript进行了拓展的语言，比如React的JSX\n##### Babel的安装与配置\nBabel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n>我们先来一次性安装这些依赖包\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n```\n>在webpack中配置Babel的方法如下\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel',//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: ['es2015','react']\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n```\nnpm install --save react react-dom\n```\n>使用`ES6`的语法，更新Greeter.js并返回一个`React`组件\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n>使用ES6的模块定义和渲染Greeter模块\n```\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n##### Babel的配置选项\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：\n```\n// webpack.config.js\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n```\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n##### 一切皆模块\nWebpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。\n\n##### CSS\nwebpack提供两个工具处理样式表，`css-loader` 和`style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import `和` url(...)`的方法实现` require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入`webpack`打包后的JS文件中。\n>继续上面的例子\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n```\n//使用\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css'//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n>注：感叹号的作用在于使同一文件能够使用不同类型的loader\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n```\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n##### CSS module\n在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。\n不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。\n\n最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n>创建一个Greeter.css文件\n\n```\n.root {\n  background-color: #eee;\n  padding: 10px;\n  border: 3px solid #ccc;\n}\n```\n\n>导入.root到Greeter.js中\n\n```\nimport React, {Component} from 'react';\nimport config from './config.json';\nimport styles from './Greeter.css';//导入\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div className={styles.root}>//添加类名\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n>放心使用把，相同的类名也不会造成不同组件之间的污染。\n>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息\n\n\n##### CSS预处理器\nSass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，\n你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders\n* Less Loader\n* Sass Loader\n* Stylus Loader\n\n不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其CSS官方文档可了解更多相关知识。\n举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。\n\n>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）\n```\nnpm install --save-dev postcss-loader autoprefixer\n```\n>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。\n```\n//webpack配置文件\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry: __dirname + \"/app/main.js\",\n  output: {...},\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css?modules!postcss'\n      }\n    ]\n  },\n\n  postcss: [\n    require('autoprefixer')//调用autoprefixer插件\n  ],\n\n  devServer: {...}\n}\n```\n到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins\n\n##### 插件（Plugins）\n插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\nWebpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。\n\n##### 使用插件的方法\n要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。\n\n```\n//webpack.config.js\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry:  __dirname + \"/app/main.js\",\n  output: {...},\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: \"json\" },\n      { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n      { test: /\\.css$/, loader: 'style!css?modules!postcss' }//这里添加PostCSS\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new webpack.BannerPlugin(\"Copyright Flying Unicorns inc.\")//在这个数组中new一个就可以了\n  ],\n\n  devServer: {...}\n}\n```\n>打包后的JS文件`bundle.js`将会添加版本信息。\n知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件\n\n##### HtmlWebpackPlugin\n这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。\n* 安装\n```\nnpm install --save-dev html-webpack-plugin\n```\n这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：\n1. 移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。\n2.  在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码\n如下\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n  </body>\n</html>\n```\n3. 更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: \"json\" },\n      { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n      { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"//new 一个这个插件的实例，并传入相关的参数\n    })\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n##### Hot Module Replacement\nHot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。\n在webpack中实现HMR也很简单，只需要做两项配置\n1. 在webpack配置文件中添加HMR插件；\n2. 在Webpack Dev Server中添加“hot”参数；\n\n不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。\n\n整理下我们的思路，具体实现方法如下\n* Babel和webpack是独立的工具\n* 二者可以一起工作\n* 二者都可以通过插件拓展功能\n*  HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；\n* Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；\n\n>更新我们的例子来实际看看如何配置\n```\n//webpack中的配置\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      { test: /\\.json$/, loader: \"json\" },\n      { test: /\\.js$/, exclude: /node_modules/, loader: 'babel' },\n      { test: /\\.css$/, loader: 'style!css?modules!postcss' }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n    new webpack.HotModuleReplacementPlugin()//热加载插件\n  ],\n\n  devServer: {\n    colors: true,\n    historyApiFallback: true,\n    inline: true,\n    hot: true\n  }\n}\n```\n\n>安装react-transform-hmr\n```\nnpm install --save-dev babel-plugin-react-transform react-transform-hmr\n```\n>配置Babel\n```\n{\n  \"presets\": [\"react\", \"es2015\"],\n  \"env\": {\n    \"development\": {\n    \"plugins\": [[\"react-transform\", {\n       \"transforms\": [{\n         \"transform\": \"react-transform-hmr\",\n\n         \"imports\": [\"react\"],\n\n         \"locals\": [\"module\"]\n       }]\n     }]]\n    }\n  }\n}\n```\n>现在当你使用React时，可以热加载模块了\n\n##### 产品阶段的构建\n目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。\n\n对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下\n\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style!css?modules!postcss'\n      }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n  ],\n\n}\n```\n>package.json\n```\n//package.json\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --progress\",\n    \"build\": \"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"\n  },\n  \"author\": \"Cássio Zen\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {...},\n  \"dependencies\": {...}\n}\n```\n\n##### 优化插件\nwebpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能\n* OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID\n* UglifyJsPlugin：压缩JS代码；\n* ExtractTextPlugin：分离CSS和JS文件\n\n>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们\n```\nnpm install --save-dev extract-text-webpack-plugin\n```\n>在配置文件的plugins后引用它们\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n      }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(\"style.css\")\n  ]\n}\n```\n##### 缓存\n缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）\n\nwebpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前\n\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  entry: __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"[name]-[hash].js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel'\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style', 'css?modules!postcss')\n      }\n    ]\n  },\n  postcss: [\n    require('autoprefixer')\n  ],\n\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: __dirname + \"/app/index.tmpl.html\"\n    }),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin(\"[name]-[hash].css\")\n  ]\n}\n```\n>现在用户会有合理的缓存了。\n\n\n##### 总结\n这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到[本文的英文版Webpack for React](http://www.pro-react.com/materials/appendixA/#\"Heading link\")，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。\n\n<hr>\n点击查看 [本文的英文版Webpack for React](http://www.pro-react.com/materials/appendixA/#\"Heading link\")\n点击查看 [原本](http://www.jianshu.com/p/42e11515c10f#\"Heading link\")\n","slug":"2016-10-21-1","published":1,"updated":"2016-12-07T06:18:27.532Z","photos":[],"link":"","_id":"ciweliqgt000jn0c5cp1cx4dh","content":"<blockquote>\n<p>框架搭建过程！</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li><p>安装Webpack <br>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为ProjectName），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//全局安装</span></div><div class=\"line\">npm install -g webpack</div><div class=\"line\"><span class=\"comment\">//安装到你的项目目录</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目<br><br>在上述练习文件夹中创建一个<code>package.json</code>文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个<code>package.json</code>文件</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">mkdir</span> ProjectName</div><div class=\"line\"><span class=\"keyword\">cd</span> ProjectName</div><div class=\"line\">npm init <span class=\"comment\">//自动创建这个package.json</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在<code>npm</code>中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>\n<ul>\n<li><p><code>package.json</code>文件已经就绪，我们在本项目中安装<code>Webpack</code>作为依赖包</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 安装Webpack</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目文件夹及其入口文件<br><br>回到之前的空文件夹，并在里面创建两个文件夹,<code>app</code>文件夹和<code>public</code>文件夹， <abbr title=\"\"><code>app</code>文件夹用来存放原始数据和我们将写的JavaScript模块</abbr>，<abbr title=\"\"><code>public</code>文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）</abbr>。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示</p>\n<figure class=\"highlight irpf90\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir app  <span class=\"keyword\">public</span></div><div class=\"line\">cd app</div><div class=\"line\"><span class=\"keyword\">touch</span>  main.js  Greeter.js</div><div class=\"line\">cd ../<span class=\"keyword\">public</span></div><div class=\"line\"><span class=\"keyword\">touch</span> <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时项目结构如下图所示<br><img src=\"/img/2016-10-21.png\" alt=\"\"></p>\n<blockquote>\n<p><code>index.html</code>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（<code>bundle.js</code>）<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>Greeter.js</code>只包括一个用来返回包含问候信息的<code>html</code>元素的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Greeter.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">  greet.textContent = <span class=\"string\">\"Hi there and greetings!\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>main.js</code>用来把<code>Greeter</code>模块返回的节点插入页面。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//main.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> greeter = <span class=\"built_in\">require</span>(<span class=\"string\">'./Greeter.js'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>).appendChild(greeter());</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h5><p>webpack可以在终端中使用，其最基础的命令是<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack &#123;entry <span class=\"built_in\">file</span>/入口文件&#125; &#123;destination <span class=\"keyword\">for</span> bundled <span class=\"built_in\">file</span>/存放bundle.js的地方&#125;</div></pre></td></tr></table></figure></p>\n<p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，<br>不过需要注意的是 <abbr title=\"\">如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在<code>node_modules</code>中的地址</abbr>.</p>\n<ul>\n<li>继续上面的例子，在终端中属于如下命令:<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span>webpack非全局安装的情况</div><div class=\"line\">node_modules<span class=\"regexp\">/.bin/</span>webpack   app<span class=\"regexp\">/main.js   public/</span>bundle.js</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果如下<br><img src=\"/img/2016-10-21-1.png\" alt=\"\"><br>可以看出<code>webpack</code>同时编译了<code>main.js</code>和<code>Greeter.js</code>,<br>现在打开<code>index.html</code>,可以看到如下结果<br><img src=\"/img/2016-10-21-2.png\" alt=\"\"><br>有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。</p>\n<h5 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h5><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为<code>webpack.config.js</code>的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\"><span class=\"symbol\">  entry:</span>  __dirname + <span class=\"string\">\"/app/main.js\"</span>,<span class=\"comment\">//已多次提及的唯一入口文件</span></div><div class=\"line\"><span class=\"symbol\">  output:</span> &#123;</div><div class=\"line\"><span class=\"symbol\">    path:</span> __dirname + <span class=\"string\">\"/public\"</span>,<span class=\"comment\">//打包后的文件存放的地方</span></div><div class=\"line\"><span class=\"symbol\">    filename:</span> <span class=\"string\">\"bundle.js\"</span><span class=\"comment\">//打包后输出文件的文件名</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：<code>__dirname</code> 是node.js中的一个全局变量，它指向<abbr title=\"\">当前执行脚本所在的目录<abbr>。</abbr></abbr></p>\n</blockquote>\n<p>现在如果你需要打包文件只需要在终端里你运行<code>webpack</code>(非全局安装需使用<code>node_modules/.bin/webpack</code>)命令就可以了，这条命令会自动参考<code>webpack.config.js</code>文件中的配置选项打包你的项目。</p>\n<p>又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用<code>node_modules/.bin/webpack</code>)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>\n<h5 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h5><p>执行类似于<code>node_modules/.bin/webpack</code>这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。<br>在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-sample-project\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Sample webpack project\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"webpack\"</span>  //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"zhang\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.12.9\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：package.json中的脚本部分已经默认在命令前添加了<code>node_modules/.bin</code>路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，以下是执行<code>npm start</code>后命令行的输出显示<br><img src=\"/img/2016-10-21-3.png\" alt=\"\"><br>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。</p>\n<h5 id=\"Webpack的强大功能\"><a href=\"#Webpack的强大功能\" class=\"headerlink\" title=\"Webpack的强大功能\"></a>Webpack的强大功能</h5><h6 id=\"生成Source-Maps（使调试更容易）\"><a href=\"#生成Source-Maps（使调试更容易）\" class=\"headerlink\" title=\"生成Source Maps（使调试更容易）\"></a>生成Source Maps（使调试更容易）</h6><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br><br>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。<br><br>在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>devtool选项</th>\n<th>配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source-map</td>\n<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和<code>eval-source-map</code>选项具有相似的缺点；</td>\n</tr>\n</tbody>\n</table>\n<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。<br>在学习阶段以及在小到中性的项目上，<code>eval-source-map</code>是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,<span class=\"comment\">//配置生成Source Maps，选择合适的选项</span></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。</p>\n</blockquote>\n<h5 id=\"使用webpack构建本地服务器\"><a href=\"#使用webpack构建本地服务器\" class=\"headerlink\" title=\"使用webpack构建本地服务器\"></a>使用webpack构建本地服务器</h5><p>想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack-<span class=\"built_in\">dev</span>-server</div></pre></td></tr></table></figure></p>\n<ul>\n<li>devserver作为webpack配置选项中的一项，具有以下配置选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>devserver配置选项</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>contentBase</td>\n<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td>\n</tr>\n<tr>\n<td>port</td>\n<td>设置默认监听端口，如果省略，默认为<code>8080</code></td>\n</tr>\n<tr>\n<td>inline</td>\n<td>设置为<code>true</code>，当源文件改变时会自动刷新页面</td>\n</tr>\n<tr>\n<td>colors</td>\n<td>设置为<code>true</code>，使终端输出的文件为彩色的</td>\n</tr>\n<tr>\n<td>historyApiFallback</td>\n<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: <span class=\"string\">\"./public\"</span>,<span class=\"comment\">//本地服务器所加载的页面所在的目录</span></div><div class=\"line\">    colors: <span class=\"keyword\">true</span>,<span class=\"comment\">//终端中输出结果为彩色</span></div><div class=\"line\">    historyApiFallback: <span class=\"keyword\">true</span>,<span class=\"comment\">//不跳转</span></div><div class=\"line\">    inline: <span class=\"keyword\">true</span><span class=\"comment\">//实时刷新</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h5><h6 id=\"鼎鼎大名的Loaders登场了！\"><a href=\"#鼎鼎大名的Loaders登场了！\" class=\"headerlink\" title=\"鼎鼎大名的Loaders登场了！\"></a>鼎鼎大名的Loaders登场了！</h6><p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li>test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li>loader：loader的名称（必须）</li>\n<li>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li>query：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<blockquote>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//安装可以装换JSON的loader</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> json-loader</div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\"><span class=\"attr\">  devtool:</span> <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  entry:</span>  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\"><span class=\"attr\">  output:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    path:</span> __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\"><span class=\"attr\">    filename:</span> <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  module:</span> &#123;//在配置文件里添加JSON loader</div><div class=\"line\"><span class=\"attr\">    loaders:</span> [</div><div class=\"line\">      &#123;</div><div class=\"line\"><span class=\"attr\">        test:</span> /\\.json$/,</div><div class=\"line\"><span class=\"attr\">        loader:</span> <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  devServer:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    contentBase:</span> <span class=\"string\">\"./public\"</span>,</div><div class=\"line\"><span class=\"attr\">    colors:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    historyApiFallback:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    inline:</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建带有问候信息的JSON文件(命名为config.json)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//config.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"greetText\"</span>: <span class=\"string\">\"Hi there and greetings from JSON!\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更新后的Greeter.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config.json'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">  greet.textContent = config.greetText;</div><div class=\"line\">  <span class=\"keyword\">return</span> greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n</blockquote>\n<h5 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h5><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：<br><em>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n</em>使用基于JavaScript进行了拓展的语言，比如React的JSX</p>\n<h5 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h5><p>Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<blockquote>\n<p>我们先来一次性安装这些依赖包<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</div><div class=\"line\"><span class=\"symbol\">npm</span> install --save-dev <span class=\"keyword\">babel-core </span><span class=\"keyword\">babel-loader </span><span class=\"keyword\">babel-preset-es2015 </span><span class=\"keyword\">babel-preset-react</span></div></pre></td></tr></table></figure></p>\n<p>在webpack中配置Babel的方法如下<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\"><span class=\"attr\">  devtool:</span> <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  entry:</span>  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\"><span class=\"attr\">  output:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    path:</span> __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\"><span class=\"attr\">    filename:</span> <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  module:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    loaders:</span> [</div><div class=\"line\">      &#123;</div><div class=\"line\"><span class=\"attr\">        test:</span> /\\.json$/,</div><div class=\"line\"><span class=\"attr\">        loader:</span> <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\"><span class=\"attr\">        test:</span> /\\.js$/,</div><div class=\"line\"><span class=\"attr\">        exclude:</span> /node_modules/,</div><div class=\"line\"><span class=\"attr\">        loader:</span> <span class=\"string\">'babel'</span>,//在webpack的module部分的loaders里进行配置即可</div><div class=\"line\"><span class=\"attr\">        query:</span> &#123;</div><div class=\"line\"><span class=\"attr\">          presets:</span> [<span class=\"string\">'es2015'</span>,<span class=\"string\">'react'</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  devServer:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    contentBase:</span> <span class=\"string\">\"./public\"</span>,</div><div class=\"line\"><span class=\"attr\">    colors:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    historyApiFallback:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    inline:</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save react react-dom</span></div></pre></td></tr></table></figure></p>\n<p>使用<code>ES6</code>的语法，更新Greeter.js并返回一个<code>React</code>组件<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Greeter,js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>&#125; from <span class=\"symbol\">'reac</span>t'</div><div class=\"line\"><span class=\"keyword\">import</span> config from './config.json';</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &#123;config.greetText&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">Greeter</span></div></pre></td></tr></table></figure></p>\n<p>使用ES6的模块定义和渲染Greeter模块<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Greeter <span class=\"keyword\">from</span> <span class=\"string\">'./Greeter'</span>;</div><div class=\"line\"></div><div class=\"line\">render(&lt;Greeter /&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h5><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: 'babel'</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span> // <span class=\"type\">Omitted</span> <span class=\"keyword\">for</span> brevity</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//.babelrc</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h5 id=\"一切皆模块\"><a href=\"#一切皆模块\" class=\"headerlink\" title=\"一切皆模块\"></a>一切皆模块</h5><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和<code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code>和<code>url(...)</code>的方法实现<code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入<code>webpack</code>打包后的JS文件中。</p>\n<blockquote>\n<p>继续上面的例子<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//安装</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> style-loader css-loader</div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'style!css'</span><span class=\"comment\">//添加对样式表的处理</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：感叹号的作用在于使同一文件能够使用不同类型的loader<br>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">  <span class=\"attribute\">-ms-text-size-adjust</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-text-size-adjust</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: inherit;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//main.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Greeter <span class=\"keyword\">from</span> <span class=\"string\">'./Greeter'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./main.css'</span>;<span class=\"comment\">//使用require导入css文件</span></div><div class=\"line\"></div><div class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。<br>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n</blockquote>\n<h5 id=\"CSS-module\"><a href=\"#CSS-module\" class=\"headerlink\" title=\"CSS module\"></a>CSS module</h5><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。<br>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p>\n<p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: 'babel'</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建一个Greeter.css文件</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.root</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>导入.root到Greeter.js中</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'./config.json'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./Greeter.css'</span>;<span class=\"comment\">//导入</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;styles.root&#125;</span>&gt;</span>//添加类名</span></div><div class=\"line\">        &#123;config.greetText&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Greeter</div></pre></td></tr></table></figure>\n<blockquote>\n<p>放心使用把，相同的类名也不会造成不同组件之间的污染。<br>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息</p>\n</blockquote>\n<h5 id=\"CSS预处理器\"><a href=\"#CSS预处理器\" class=\"headerlink\" title=\"CSS预处理器\"></a>CSS预处理器</h5><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p>\n<ul>\n<li>Less Loader</li>\n<li>Sass Loader</li>\n<li>Stylus Loader</li>\n</ul>\n<p>不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其CSS官方文档可了解更多相关知识。<br>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>\n<blockquote>\n<p>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> postcss-loader autoprefixer</div></pre></td></tr></table></figure></p>\n<p>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">//webpack配置文件</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: 'babel'</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: 'style!css?modules!postcss'</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  postcss: [</div><div class=\"line\">    require('autoprefixer')//调用autoprefixer插件</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins</p>\n<h5 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h5><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>\n<h5 id=\"使用插件的方法\"><a href=\"#使用插件的方法\" class=\"headerlink\" title=\"使用插件的方法\"></a>使用插件的方法</h5><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//webpack.config.js</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = require('webpack');</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123; test: /\\.json$/, loader: <span class=\"string\">\"json\"</span> &#125;,</div><div class=\"line\">      &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;,</div><div class=\"line\">      &#123; test: /\\.css$/, loader: 'style!css?modules!postcss' &#125;//这里添加<span class=\"type\">PostCSS</span></div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    require('autoprefixer')</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    new webpack.<span class=\"type\">BannerPlugin</span>(<span class=\"string\">\"Copyright Flying Unicorns inc.\"</span>)//在这个数组中new一个就可以了</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>打包后的JS文件<code>bundle.js</code>将会添加版本信息。<br>知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件</p>\n</blockquote>\n<h5 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h5><p>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>\n<ul>\n<li>安装<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> html-webpack-plugin</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p>\n<ol>\n<li>移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。</li>\n<li><p>在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码<br>如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.json$/</span>, loader: <span class=\"string\">\"json\"</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.js$/</span>, exclude: <span class=\"regexp\">/node_modules/</span>, loader: <span class=\"string\">'babel'</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: <span class=\"string\">'style!css?modules!postcss'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span><span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</div><div class=\"line\">    inline: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h5><p>Hot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。<br>在webpack中实现HMR也很简单，只需要做两项配置</p>\n<ol>\n<li>在webpack配置文件中添加HMR插件；</li>\n<li>在Webpack Dev Server中添加“hot”参数；</li>\n</ol>\n<p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p>\n<p>整理下我们的思路，具体实现方法如下</p>\n<ul>\n<li>Babel和webpack是独立的工具</li>\n<li>二者可以一起工作</li>\n<li>二者都可以通过插件拓展功能</li>\n<li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li>\n<li>Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</li>\n</ul>\n<blockquote>\n<p>更新我们的例子来实际看看如何配置<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//webpack中的配置</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.json$/</span>, loader: <span class=\"string\">\"json\"</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.js$/</span>, exclude: <span class=\"regexp\">/node_modules/</span>, loader: <span class=\"string\">'babel'</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: <span class=\"string\">'style!css?modules!postcss'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()<span class=\"comment\">//热加载插件</span></div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</div><div class=\"line\">    inline: <span class=\"literal\">true</span>,</div><div class=\"line\">    hot: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>安装react-transform-hmr<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-dev babel-plugin-react-<span class=\"built_in\">transform</span> react-<span class=\"built_in\">transform</span>-hmr</div></pre></td></tr></table></figure></p>\n<p>配置Babel<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"development\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [[<span class=\"string\">\"react-transform\"</span>, &#123;</div><div class=\"line\">       <span class=\"attr\">\"transforms\"</span>: [&#123;</div><div class=\"line\">         <span class=\"attr\">\"transform\"</span>: <span class=\"string\">\"react-transform-hmr\"</span>,</div><div class=\"line\"></div><div class=\"line\">         <span class=\"attr\">\"imports\"</span>: [<span class=\"string\">\"react\"</span>],</div><div class=\"line\"></div><div class=\"line\">         <span class=\"attr\">\"locals\"</span>: [<span class=\"string\">\"module\"</span>]</div><div class=\"line\">       &#125;]</div><div class=\"line\">     &#125;]]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在当你使用React时，可以热加载模块了</p>\n</blockquote>\n<h5 id=\"产品阶段的构建\"><a href=\"#产品阶段的构建\" class=\"headerlink\" title=\"产品阶段的构建\"></a>产品阶段的构建</h5><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>\n<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'style!css?modules!postcss'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>package.json<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//package.json</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-sample-project\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Sample webpack project\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --progress\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"Cássio Zen\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"优化插件\"><a href=\"#优化插件\" class=\"headerlink\" title=\"优化插件\"></a>优化插件</h5><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>\n<ul>\n<li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>\n<li>UglifyJsPlugin：压缩JS代码；</li>\n<li>ExtractTextPlugin：分离CSS和JS文件</li>\n</ul>\n<blockquote>\n<p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-dev extract-<span class=\"built_in\">text</span>-webpack-plugin</div></pre></td></tr></table></figure></p>\n<p>在配置文件的plugins后引用它们<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css?modules!postcss'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"style.css\"</span>)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"[name]-[hash].js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css?modules!postcss'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"[name]-[hash].css\"</span>)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>现在用户会有合理的缓存了。</p>\n</blockquote>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到<a href=\"http://www.pro-react.com/materials/appendixA/#&quot;Heading link&quot;\" target=\"_blank\" rel=\"external\">本文的英文版Webpack for React</a>，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。</p>\n<p><hr><br>点击查看 <a href=\"http://www.pro-react.com/materials/appendixA/#&quot;Heading link&quot;\" target=\"_blank\" rel=\"external\">本文的英文版Webpack for React</a><br>点击查看 <a href=\"http://www.jianshu.com/p/42e11515c10f#&quot;Heading link&quot;\" target=\"_blank\" rel=\"external\">原本</a></p>\n","excerpt":"<blockquote>\n<p>框架搭建过程！</p>\n</blockquote>","more":"<ul>\n<li><p>安装Webpack <br>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为ProjectName），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//全局安装</span></div><div class=\"line\">npm install -g webpack</div><div class=\"line\"><span class=\"comment\">//安装到你的项目目录</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目<br><br>在上述练习文件夹中创建一个<code>package.json</code>文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个<code>package.json</code>文件</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">mkdir</span> ProjectName</div><div class=\"line\"><span class=\"keyword\">cd</span> ProjectName</div><div class=\"line\">npm init <span class=\"comment\">//自动创建这个package.json</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在<code>npm</code>中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>\n<ul>\n<li><p><code>package.json</code>文件已经就绪，我们在本项目中安装<code>Webpack</code>作为依赖包</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 安装Webpack</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目文件夹及其入口文件<br><br>回到之前的空文件夹，并在里面创建两个文件夹,<code>app</code>文件夹和<code>public</code>文件夹， <abbr title=\"\"><code>app</code>文件夹用来存放原始数据和我们将写的JavaScript模块</abbr>，<abbr title=\"\"><code>public</code>文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）</abbr>。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中，此时项目结构如下图所示</p>\n<figure class=\"highlight irpf90\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir app  <span class=\"keyword\">public</span></div><div class=\"line\">cd app</div><div class=\"line\"><span class=\"keyword\">touch</span>  main.js  Greeter.js</div><div class=\"line\">cd ../<span class=\"keyword\">public</span></div><div class=\"line\"><span class=\"keyword\">touch</span> <span class=\"built_in\">index</span>.html</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时项目结构如下图所示<br><img src=\"/img/2016-10-21.png\" alt=\"\"></p>\n<blockquote>\n<p><code>index.html</code>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（<code>bundle.js</code>）<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>Greeter.js</code>只包括一个用来返回包含问候信息的<code>html</code>元素的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Greeter.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">  greet.textContent = <span class=\"string\">\"Hi there and greetings!\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>main.js</code>用来把<code>Greeter</code>模块返回的节点插入页面。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//main.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> greeter = <span class=\"built_in\">require</span>(<span class=\"string\">'./Greeter.js'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>).appendChild(greeter());</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h5><p>webpack可以在终端中使用，其最基础的命令是<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack &#123;entry <span class=\"built_in\">file</span>/入口文件&#125; &#123;destination <span class=\"keyword\">for</span> bundled <span class=\"built_in\">file</span>/存放bundle.js的地方&#125;</div></pre></td></tr></table></figure></p>\n<p>只需要指定一个入口文件，webpack将自动识别项目所依赖的其它文件，<br>不过需要注意的是 <abbr title=\"\">如果你的webpack没有进行全局安装，那么当你在终端中使用此命令时，需要额外指定其在<code>node_modules</code>中的地址</abbr>.</p>\n<ul>\n<li>继续上面的例子，在终端中属于如下命令:<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span>webpack非全局安装的情况</div><div class=\"line\">node_modules<span class=\"regexp\">/.bin/</span>webpack   app<span class=\"regexp\">/main.js   public/</span>bundle.js</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结果如下<br><img src=\"/img/2016-10-21-1.png\" alt=\"\"><br>可以看出<code>webpack</code>同时编译了<code>main.js</code>和<code>Greeter.js</code>,<br>现在打开<code>index.html</code>,可以看到如下结果<br><img src=\"/img/2016-10-21-2.png\" alt=\"\"><br>有没有很激动，已经成功的使用Webpack打包了一个文件了。不过如果在终端中进行复杂的操作，还是不太方便且容易出错的，接下来看看Webpack的另一种使用方法。</p>\n<h5 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h5><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为<code>webpack.config.js</code>的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\"><span class=\"symbol\">  entry:</span>  __dirname + <span class=\"string\">\"/app/main.js\"</span>,<span class=\"comment\">//已多次提及的唯一入口文件</span></div><div class=\"line\"><span class=\"symbol\">  output:</span> &#123;</div><div class=\"line\"><span class=\"symbol\">    path:</span> __dirname + <span class=\"string\">\"/public\"</span>,<span class=\"comment\">//打包后的文件存放的地方</span></div><div class=\"line\"><span class=\"symbol\">    filename:</span> <span class=\"string\">\"bundle.js\"</span><span class=\"comment\">//打包后输出文件的文件名</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：<code>__dirname</code> 是node.js中的一个全局变量，它指向<abbr title=\"\">当前执行脚本所在的目录<abbr>。</p>\n</blockquote>\n<p>现在如果你需要打包文件只需要在终端里你运行<code>webpack</code>(非全局安装需使用<code>node_modules/.bin/webpack</code>)命令就可以了，这条命令会自动参考<code>webpack.config.js</code>文件中的配置选项打包你的项目。</p>\n<p>又学会了一种使用Webpack的方法，而且不用管那烦人的命令行参数了，有没有感觉很爽。有没有想过如果可以连webpack(非全局安装需使用<code>node_modules/.bin/webpack</code>)这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>\n<h5 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h5><p>执行类似于<code>node_modules/.bin/webpack</code>这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。<br>在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-sample-project\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Sample webpack project\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"webpack\"</span>  //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"zhang\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.12.9\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注：package.json中的脚本部分已经默认在命令前添加了<code>node_modules/.bin</code>路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是start，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，以下是执行<code>npm start</code>后命令行的输出显示<br><img src=\"/img/2016-10-21-3.png\" alt=\"\"><br>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得webpack也不过如此嘛，不过不要太小瞧Webpack，其强大的功能包含在其一系列可供配置的选项中，我们一项项来看。</p>\n<h5 id=\"Webpack的强大功能\"><a href=\"#Webpack的强大功能\" class=\"headerlink\" title=\"Webpack的强大功能\"></a>Webpack的强大功能</h5><h6 id=\"生成Source-Maps（使调试更容易）\"><a href=\"#生成Source-Maps（使调试更容易）\" class=\"headerlink\" title=\"生成Source Maps（使调试更容易）\"></a>生成Source Maps（使调试更容易）</h6><p>开发总是离不开调试，如果可以更加方便的调试当然就能提高开发效率，不过打包后的文件有时候你是不容易找到出错了的地方对应的源代码的位置的，Source Maps就是来帮我们解决这个问题的。<br><br>通过简单的配置后，Webpack在打包时可以为我们生成的source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。<br><br>在webpack的配置文件中配置source maps，需要配置devtool，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>\n<table>\n<thead>\n<tr>\n<th>devtool选项</th>\n<th>配置结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source-map</td>\n<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的source map，但是它会减慢打包文件的构建速度；</td>\n</tr>\n<tr>\n<td>cheap-module-source-map</td>\n<td>在一个单独的文件中生成一个不带列映射的map，不带列映射提高项目构建速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>\n</tr>\n<tr>\n<td>eval-source-map</td>\n<td>使用eval打包源文件模块，在同一个文件中生成干净的完整的source map。这个选项可以在不影响构建速度的前提下生成完整的sourcemap，但是对打包后输出的JS文件的执行具有性能和安全的隐患。不过在开发阶段这是一个非常好的选项，但是在生产阶段一定不要用这个选项；</td>\n</tr>\n<tr>\n<td>cheap-module-eval-source-map</td>\n<td>这是在打包文件时最快的生成source map的方法，生成的Source Map 会和打包后的JavaScript文件同行显示，没有列映射，和<code>eval-source-map</code>选项具有相似的缺点；</td>\n</tr>\n</tbody>\n</table>\n<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的构建速度的后果就是对打包后的文件的的执行有一定影响。<br>在学习阶段以及在小到中性的项目上，<code>eval-source-map</code>是一个很好的选项，不过记得只在开发阶段使用它，继续上面的例子，进行如下配置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,<span class=\"comment\">//配置生成Source Maps，选择合适的选项</span></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑da时间成本是使用。</p>\n</blockquote>\n<h5 id=\"使用webpack构建本地服务器\"><a href=\"#使用webpack构建本地服务器\" class=\"headerlink\" title=\"使用webpack构建本地服务器\"></a>使用webpack构建本地服务器</h5><p>想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> webpack-<span class=\"built_in\">dev</span>-server</div></pre></td></tr></table></figure></p>\n<ul>\n<li>devserver作为webpack配置选项中的一项，具有以下配置选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>devserver配置选项</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>contentBase</td>\n<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td>\n</tr>\n<tr>\n<td>port</td>\n<td>设置默认监听端口，如果省略，默认为<code>8080</code></td>\n</tr>\n<tr>\n<td>inline</td>\n<td>设置为<code>true</code>，当源文件改变时会自动刷新页面</td>\n</tr>\n<tr>\n<td>colors</td>\n<td>设置为<code>true</code>，使终端输出的文件为彩色的</td>\n</tr>\n<tr>\n<td>historyApiFallback</td>\n<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>继续把这些命令加到webpack的配置文件中，现在的配置文件如下所示<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span>.<span class=\"keyword\">exports</span> = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: <span class=\"string\">\"./public\"</span>,<span class=\"comment\">//本地服务器所加载的页面所在的目录</span></div><div class=\"line\">    colors: <span class=\"keyword\">true</span>,<span class=\"comment\">//终端中输出结果为彩色</span></div><div class=\"line\">    historyApiFallback: <span class=\"keyword\">true</span>,<span class=\"comment\">//不跳转</span></div><div class=\"line\">    inline: <span class=\"keyword\">true</span><span class=\"comment\">//实时刷新</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h5><h6 id=\"鼎鼎大名的Loaders登场了！\"><a href=\"#鼎鼎大名的Loaders登场了！\" class=\"headerlink\" title=\"鼎鼎大名的Loaders登场了！\"></a>鼎鼎大名的Loaders登场了！</h6><p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li>test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li>loader：loader的名称（必须）</li>\n<li>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li>query：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<blockquote>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//安装可以装换JSON的loader</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> json-loader</div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\"><span class=\"attr\">  devtool:</span> <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  entry:</span>  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\"><span class=\"attr\">  output:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    path:</span> __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\"><span class=\"attr\">    filename:</span> <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  module:</span> &#123;//在配置文件里添加JSON loader</div><div class=\"line\"><span class=\"attr\">    loaders:</span> [</div><div class=\"line\">      &#123;</div><div class=\"line\"><span class=\"attr\">        test:</span> /\\.json$/,</div><div class=\"line\"><span class=\"attr\">        loader:</span> <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  devServer:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    contentBase:</span> <span class=\"string\">\"./public\"</span>,</div><div class=\"line\"><span class=\"attr\">    colors:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    historyApiFallback:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    inline:</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建带有问候信息的JSON文件(命名为config.json)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//config.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"greetText\"</span>: <span class=\"string\">\"Hi there and greetings from JSON!\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更新后的Greeter.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config.json'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> greet = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">  greet.textContent = config.greetText;</div><div class=\"line\">  <span class=\"keyword\">return</span> greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n</blockquote>\n<h5 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h5><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：<br><em>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n</em>使用基于JavaScript进行了拓展的语言，比如React的JSX</p>\n<h5 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h5><p>Babel其实是几个模块化的包，其核心功能位于称为babel-core的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<blockquote>\n<p>我们先来一次性安装这些依赖包<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</div><div class=\"line\"><span class=\"symbol\">npm</span> install --save-dev <span class=\"keyword\">babel-core </span><span class=\"keyword\">babel-loader </span><span class=\"keyword\">babel-preset-es2015 </span><span class=\"keyword\">babel-preset-react</span></div></pre></td></tr></table></figure></p>\n<p>在webpack中配置Babel的方法如下<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\"><span class=\"attr\">  devtool:</span> <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  entry:</span>  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\"><span class=\"attr\">  output:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    path:</span> __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\"><span class=\"attr\">    filename:</span> <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  module:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    loaders:</span> [</div><div class=\"line\">      &#123;</div><div class=\"line\"><span class=\"attr\">        test:</span> /\\.json$/,</div><div class=\"line\"><span class=\"attr\">        loader:</span> <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\"><span class=\"attr\">        test:</span> /\\.js$/,</div><div class=\"line\"><span class=\"attr\">        exclude:</span> /node_modules/,</div><div class=\"line\"><span class=\"attr\">        loader:</span> <span class=\"string\">'babel'</span>,//在webpack的module部分的loaders里进行配置即可</div><div class=\"line\"><span class=\"attr\">        query:</span> &#123;</div><div class=\"line\"><span class=\"attr\">          presets:</span> [<span class=\"string\">'es2015'</span>,<span class=\"string\">'react'</span>]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">  devServer:</span> &#123;</div><div class=\"line\"><span class=\"attr\">    contentBase:</span> <span class=\"string\">\"./public\"</span>,</div><div class=\"line\"><span class=\"attr\">    colors:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    historyApiFallback:</span> <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"attr\">    inline:</span> <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save react react-dom</span></div></pre></td></tr></table></figure></p>\n<p>使用<code>ES6</code>的语法，更新Greeter.js并返回一个<code>React</code>组件<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Greeter,js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>&#125; from <span class=\"symbol\">'reac</span>t'</div><div class=\"line\"><span class=\"keyword\">import</span> config from './config.json';</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &#123;config.greetText&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">Greeter</span></div></pre></td></tr></table></figure></p>\n<p>使用ES6的模块定义和渲染Greeter模块<br><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Greeter <span class=\"keyword\">from</span> <span class=\"string\">'./Greeter'</span>;</div><div class=\"line\"></div><div class=\"line\">render(&lt;Greeter /&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>));</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h5><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/public\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: 'babel'</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span> // <span class=\"type\">Omitted</span> <span class=\"keyword\">for</span> brevity</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//.babelrc</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h5 id=\"一切皆模块\"><a href=\"#一切皆模块\" class=\"headerlink\" title=\"一切皆模块\"></a>一切皆模块</h5><p>Webpack有一个不可不说的优点，它把所有的文件都可以当做模块处理，包括你的JavaScript代码，也包括CSS和fonts以及图片等等等，只有通过合适的loaders，它们都可以被当做模块被处理。</p>\n<h5 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h5><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和<code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code>和<code>url(...)</code>的方法实现<code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入<code>webpack</code>打包后的JS文件中。</p>\n<blockquote>\n<p>继续上面的例子<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//安装</span></div><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> style-loader css-loader</div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'style!css'</span><span class=\"comment\">//添加对样式表的处理</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：感叹号的作用在于使同一文件能够使用不同类型的loader<br>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">  <span class=\"attribute\">-ms-text-size-adjust</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-text-size-adjust</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: inherit;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//main.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;render&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Greeter <span class=\"keyword\">from</span> <span class=\"string\">'./Greeter'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./main.css'</span>;<span class=\"comment\">//使用require导入css文件</span></div><div class=\"line\"></div><div class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Greeter</span> /&gt;</span>, document.getElementById('root'));</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。<br>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n</blockquote>\n<h5 id=\"CSS-module\"><a href=\"#CSS-module\" class=\"headerlink\" title=\"CSS module\"></a>CSS module</h5><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，且基于优化工具，依赖管理和加载管理可以自动完成。<br>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧是巨大且充满了全局类名，这使得维护和修改都非常困难和复杂。</p>\n<p>最近有一个叫做 CSS modules 的技术就意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack从一开始就对CSS模块化提供了支持，在CSS loader中进行配置后，你所需要做的一切就是把”modules“传递都所需要的地方，然后就可以直接把CSS的类名传递到组件的代码中，且这样做只对当前组件有效，不必担心在不同的模块中具有相同的类名可能会造成的问题。具体的代码如下</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: 'babel'</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: 'style!css?modules'//跟前面相比就在后面加上了?modules</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建一个Greeter.css文件</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.root</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>导入.root到Greeter.js中</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'./config.json'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./Greeter.css'</span>;<span class=\"comment\">//导入</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;styles.root&#125;</span>&gt;</span>//添加类名</div><div class=\"line\">        &#123;config.greetText&#125;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Greeter</div></pre></td></tr></table></figure>\n<blockquote>\n<p>放心使用把，相同的类名也不会造成不同组件之间的污染。<br>CSS modules 也是一个很大的主题，有兴趣的话可以去官方文档查看更多消息</p>\n</blockquote>\n<h5 id=\"CSS预处理器\"><a href=\"#CSS预处理器\" class=\"headerlink\" title=\"CSS预处理器\"></a>CSS预处理器</h5><p>Sass 和 Less之类的预处理器是对原生CSS的拓展，它们允许你使用类似于variables, nesting, mixins, inheritance等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，<br>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理loaders</p>\n<ul>\n<li>Less Loader</li>\n<li>Sass Loader</li>\n<li>Stylus Loader</li>\n</ul>\n<p>不过其实也存在一个CSS的处理平台-PostCSS，它可以帮助你的CSS实现更多的功能，在其CSS官方文档可了解更多相关知识。<br>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>\n<blockquote>\n<p>首先安装postcss-loader 和 autoprefixer（自动添加前缀的插件）<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> postcss-loader autoprefixer</div></pre></td></tr></table></figure></p>\n<p>接下来，在webpack配置文件中进行设置，只需要新建一个postcss关键字，并在里面申明依赖的插件，如下，现在你写的css会自动根据Can i use里的数据添加不同前缀了。<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">//webpack配置文件</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: 'babel'</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: 'style!css?modules!postcss'</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  postcss: [</div><div class=\"line\">    require('autoprefixer')//调用autoprefixer插件</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>到现在，本文已经涉及到处理JS的Babel和处理CSS的PostCSS，它们其实也是两个单独的平台，配合Webpack可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-Plugins</p>\n<h5 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h5><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>\n<h5 id=\"使用插件的方法\"><a href=\"#使用插件的方法\" class=\"headerlink\" title=\"使用插件的方法\"></a>使用插件的方法</h5><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续看例子，我们添加了一个实现版权声明的插件。</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//webpack.config.js</div><div class=\"line\"><span class=\"keyword\">var</span> webpack = require('webpack');</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: 'eval-source-map',</div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123; test: /\\.json$/, loader: <span class=\"string\">\"json\"</span> &#125;,</div><div class=\"line\">      &#123; test: /\\.js$/, exclude: /node_modules/, loader: 'babel' &#125;,</div><div class=\"line\">      &#123; test: /\\.css$/, loader: 'style!css?modules!postcss' &#125;//这里添加<span class=\"type\">PostCSS</span></div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    require('autoprefixer')</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    new webpack.<span class=\"type\">BannerPlugin</span>(<span class=\"string\">\"Copyright Flying Unicorns inc.\"</span>)//在这个数组中new一个就可以了</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>打包后的JS文件<code>bundle.js</code>将会添加版本信息。<br>知道Webpack中的插件如何使用了，下面给大家推荐几个常用的插件</p>\n</blockquote>\n<h5 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h5><p>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件，这个文件中自动引用了你打包后的JS文件。每次编译都在文件名中插入一个不同的哈希值。</p>\n<ul>\n<li>安装<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> html-webpack-plugin</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些改变：</p>\n<ol>\n<li>移除public文件夹，利用此插件，HTML5文件会自动生成，此外CSS已经通过前面的操作打包到JS中了，public文件夹里。</li>\n<li><p>在app目录下，创建一个Html文件模板，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，在本例中我们命名模板文件名称为index.tmpl.html，模板源代码<br>如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>更新webpack的配置文件，方法同上,新建一个build文件夹用来存放最终的输出文件</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.json$/</span>, loader: <span class=\"string\">\"json\"</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.js$/</span>, exclude: <span class=\"regexp\">/node_modules/</span>, loader: <span class=\"string\">'babel'</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: <span class=\"string\">'style!css?modules!postcss'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span><span class=\"comment\">//new 一个这个插件的实例，并传入相关的参数</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</div><div class=\"line\">    inline: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"Hot-Module-Replacement\"><a href=\"#Hot-Module-Replacement\" class=\"headerlink\" title=\"Hot Module Replacement\"></a>Hot Module Replacement</h5><p>Hot Module Replacement（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。<br>在webpack中实现HMR也很简单，只需要做两项配置</p>\n<ol>\n<li>在webpack配置文件中添加HMR插件；</li>\n<li>在Webpack Dev Server中添加“hot”参数；</li>\n</ol>\n<p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p>\n<p>整理下我们的思路，具体实现方法如下</p>\n<ul>\n<li>Babel和webpack是独立的工具</li>\n<li>二者可以一起工作</li>\n<li>二者都可以通过插件拓展功能</li>\n<li>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</li>\n<li>Babel有一个叫做react-transform-hrm的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</li>\n</ul>\n<blockquote>\n<p>更新我们的例子来实际看看如何配置<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//webpack中的配置</span></div><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.json$/</span>, loader: <span class=\"string\">\"json\"</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.js$/</span>, exclude: <span class=\"regexp\">/node_modules/</span>, loader: <span class=\"string\">'babel'</span> &#125;,</div><div class=\"line\">      &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: <span class=\"string\">'style!css?modules!postcss'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()<span class=\"comment\">//热加载插件</span></div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</div><div class=\"line\">    inline: <span class=\"literal\">true</span>,</div><div class=\"line\">    hot: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>安装react-transform-hmr<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-dev babel-plugin-react-<span class=\"built_in\">transform</span> react-<span class=\"built_in\">transform</span>-hmr</div></pre></td></tr></table></figure></p>\n<p>配置Babel<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"es2015\"</span>],</div><div class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"development\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"plugins\"</span>: [[<span class=\"string\">\"react-transform\"</span>, &#123;</div><div class=\"line\">       <span class=\"attr\">\"transforms\"</span>: [&#123;</div><div class=\"line\">         <span class=\"attr\">\"transform\"</span>: <span class=\"string\">\"react-transform-hmr\"</span>,</div><div class=\"line\"></div><div class=\"line\">         <span class=\"attr\">\"imports\"</span>: [<span class=\"string\">\"react\"</span>],</div><div class=\"line\"></div><div class=\"line\">         <span class=\"attr\">\"locals\"</span>: [<span class=\"string\">\"module\"</span>]</div><div class=\"line\">       &#125;]</div><div class=\"line\">     &#125;]]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在当你使用React时，可以热加载模块了</p>\n</blockquote>\n<h5 id=\"产品阶段的构建\"><a href=\"#产品阶段的构建\" class=\"headerlink\" title=\"产品阶段的构建\"></a>产品阶段的构建</h5><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>\n<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个“webpack.production.config.js”的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'style!css?modules!postcss'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>package.json<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//package.json</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-sample-project\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Sample webpack project\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --progress\"</span>,</div><div class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"NODE_ENV=production webpack --config ./webpack.production.config.js --progress\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"Cássio Zen\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: <span class=\"meta\">&#123;...&#125;</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: <span class=\"meta\">&#123;...&#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"优化插件\"><a href=\"#优化插件\" class=\"headerlink\" title=\"优化插件\"></a>优化插件</h5><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>\n<ul>\n<li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li>\n<li>UglifyJsPlugin：压缩JS代码；</li>\n<li>ExtractTextPlugin：分离CSS和JS文件</li>\n</ul>\n<blockquote>\n<p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装它们<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-dev extract-<span class=\"built_in\">text</span>-webpack-plugin</div></pre></td></tr></table></figure></p>\n<p>在配置文件的plugins后引用它们<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css?modules!postcss'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"style.css\"</span>)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h5><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>\n<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: __dirname + <span class=\"string\">\"/app/main.js\"</span>,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + <span class=\"string\">\"/build\"</span>,</div><div class=\"line\">    filename: <span class=\"string\">\"[name]-[hash].js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.json$/</span>,</div><div class=\"line\">        loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">        loader: <span class=\"string\">'babel'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">        loader: ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css?modules!postcss'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  postcss: [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>)</div><div class=\"line\">  ],</div><div class=\"line\"></div><div class=\"line\">  plugins: [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">      template: __dirname + <span class=\"string\">\"/app/index.tmpl.html\"</span></div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.OccurenceOrderPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class=\"line\">    <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"[name]-[hash].css\"</span>)</div><div class=\"line\">  ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>现在用户会有合理的缓存了。</p>\n</blockquote>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。直到看到<a href=\"http://www.pro-react.com/materials/appendixA/#&quot;Heading link&quot;\">本文的英文版Webpack for React</a>，真的有多次豁然开朗的感觉，喜欢看原文的点链接就可以看了。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。</p>\n<p><hr><br>点击查看 <a href=\"http://www.pro-react.com/materials/appendixA/#&quot;Heading link&quot;\">本文的英文版Webpack for React</a><br>点击查看 <a href=\"http://www.jianshu.com/p/42e11515c10f#&quot;Heading link&quot;\">原本</a></p>"},{"layout":"post","title":"html-webpack-plugin-②","date":"2016-11-30T09:35:54.000Z","comments":1,"_content":"webpack 配置html-webpack-plugin\n```\nlet path = require('path');\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n```\n\n```\nplugins: [\n    new HtmlWebpackPlugin({\n        template: path.resolve('./src/index.html')\n    })\n]\n```\n<!-- more -->\n\n公司有一个大神搭建的项目，有许多地方设计的很巧妙。\n虚心研究，一直有一个疑惑，并没有在项目HTML中看到任何src 文件的引用，项目是如何加在资源文件的？\n上次框架搭建过程中没有研究清楚，这次在新项目中仔细研究搭建过程。\n\n### HtmlWebpackPlugin\n* 这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件。\n* 这个<abbr  title=\"问题解决！！！\">文件中自动引用了你打包后的JS文件</abbr>。\n* 每次编译都在文件名中插入一个不同的哈希值。\n\n**安装**\n```\nnpm install --save-dev html-webpack-plugin\n```\n>创建Html模板页面，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件。\n\n\n此时项目结构如下图所示\n![](/img/2016-11-30.png)\n\n\nWebpack详细配置 （37行）：\n```\nlet path = require('path');\nlet webpack = require('webpack');\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    devtool: 'eval-source-map',\n    entry: __dirname + \"/src/app/app.module.js\",\n    // entry: __dirname + \"/src/bootstrap.js\",\n    output: {\n        path: __dirname + \"/dist\",\n        filename: \"bundle.js\"\n    },\n\n    module: {\n        loaders: [{\n            test: /\\.json$/, //在配置文件里添加JSON loader\n            loader: \"json\"\n        }, {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel' //在webpack的module部分的loaders里进行配置即可\n        }, {\n            test: /\\.css$/,\n            loader: 'style!css' //添加对样式表的处理\n        }]\n    },\n\n    devServer: {\n        contentBase: \"./src/\", //本地服务器所加载的页面所在的目录\n        colors: true, //终端中输出结果为彩色\n        historyApiFallback: true, //不跳转\n        inline: true //实时刷新\n    },\n\n    plugins: [\n        new webpack.BannerPlugin(\"Copyright upsmart.\"), //在这个数组中new一个就可以了\n        new webpack.HotModuleReplacementPlugin(), //热加载插件\n        new HtmlWebpackPlugin({\n            template: path.resolve('./src/index.html')\n        })\n    ],\n}\n```\n\nindex.html：\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Webpack Sample Project</title>\n    </head>\n    <body>\n        <h1>Webpack Sample Project</h1>\n        <hr>\n        <div id='root'></div>\n    </body>\n</html>\n```\n\n以上！\n","source":"_posts/2016-11-30-1.md","raw":"---\nlayout: post\ntitle: html-webpack-plugin-②\ndate: 2016-11-30 17:35:54\ncomments: true\ntags:\n  - webpack\n  - node\n---\nwebpack 配置html-webpack-plugin\n```\nlet path = require('path');\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n```\n\n```\nplugins: [\n    new HtmlWebpackPlugin({\n        template: path.resolve('./src/index.html')\n    })\n]\n```\n<!-- more -->\n\n公司有一个大神搭建的项目，有许多地方设计的很巧妙。\n虚心研究，一直有一个疑惑，并没有在项目HTML中看到任何src 文件的引用，项目是如何加在资源文件的？\n上次框架搭建过程中没有研究清楚，这次在新项目中仔细研究搭建过程。\n\n### HtmlWebpackPlugin\n* 这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件。\n* 这个<abbr  title=\"问题解决！！！\">文件中自动引用了你打包后的JS文件</abbr>。\n* 每次编译都在文件名中插入一个不同的哈希值。\n\n**安装**\n```\nnpm install --save-dev html-webpack-plugin\n```\n>创建Html模板页面，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件。\n\n\n此时项目结构如下图所示\n![](/img/2016-11-30.png)\n\n\nWebpack详细配置 （37行）：\n```\nlet path = require('path');\nlet webpack = require('webpack');\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    devtool: 'eval-source-map',\n    entry: __dirname + \"/src/app/app.module.js\",\n    // entry: __dirname + \"/src/bootstrap.js\",\n    output: {\n        path: __dirname + \"/dist\",\n        filename: \"bundle.js\"\n    },\n\n    module: {\n        loaders: [{\n            test: /\\.json$/, //在配置文件里添加JSON loader\n            loader: \"json\"\n        }, {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            loader: 'babel' //在webpack的module部分的loaders里进行配置即可\n        }, {\n            test: /\\.css$/,\n            loader: 'style!css' //添加对样式表的处理\n        }]\n    },\n\n    devServer: {\n        contentBase: \"./src/\", //本地服务器所加载的页面所在的目录\n        colors: true, //终端中输出结果为彩色\n        historyApiFallback: true, //不跳转\n        inline: true //实时刷新\n    },\n\n    plugins: [\n        new webpack.BannerPlugin(\"Copyright upsmart.\"), //在这个数组中new一个就可以了\n        new webpack.HotModuleReplacementPlugin(), //热加载插件\n        new HtmlWebpackPlugin({\n            template: path.resolve('./src/index.html')\n        })\n    ],\n}\n```\n\nindex.html：\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Webpack Sample Project</title>\n    </head>\n    <body>\n        <h1>Webpack Sample Project</h1>\n        <hr>\n        <div id='root'></div>\n    </body>\n</html>\n```\n\n以上！\n","slug":"2016-11-30-1","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqgv000ln0c5ueuzsygd","content":"<p>webpack 配置html-webpack-plugin<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span> [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">        template: path.<span class=\"built_in\">resolve</span>(<span class=\"string\">'./src/index.html'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>公司有一个大神搭建的项目，有许多地方设计的很巧妙。<br>虚心研究，一直有一个疑惑，并没有在项目HTML中看到任何src 文件的引用，项目是如何加在资源文件的？<br>上次框架搭建过程中没有研究清楚，这次在新项目中仔细研究搭建过程。</p>\n<h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h3><ul>\n<li>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件。</li>\n<li>这个<abbr title=\"问题解决！！！\">文件中自动引用了你打包后的JS文件</abbr>。</li>\n<li>每次编译都在文件名中插入一个不同的哈希值。</li>\n</ul>\n<p><strong>安装</strong><br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> html-webpack-plugin</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>创建Html模板页面，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件。</p>\n</blockquote>\n<p>此时项目结构如下图所示<br><img src=\"/img/2016-11-30.png\" alt=\"\"></p>\n<p>Webpack详细配置 （37行）：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">    entry: __dirname + <span class=\"string\">\"/src/app/app.module.js\"</span>,</div><div class=\"line\">    <span class=\"comment\">// entry: __dirname + \"/src/bootstrap.js\",</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: __dirname + <span class=\"string\">\"/dist\"</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">        loaders: [&#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.json$/</span>, <span class=\"comment\">//在配置文件里添加JSON loader</span></div><div class=\"line\">            loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">            loader: <span class=\"string\">'babel'</span> <span class=\"comment\">//在webpack的module部分的loaders里进行配置即可</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">            loader: <span class=\"string\">'style!css'</span> <span class=\"comment\">//添加对样式表的处理</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    devServer: &#123;</div><div class=\"line\">        contentBase: <span class=\"string\">\"./src/\"</span>, <span class=\"comment\">//本地服务器所加载的页面所在的目录</span></div><div class=\"line\">        colors: <span class=\"literal\">true</span>, <span class=\"comment\">//终端中输出结果为彩色</span></div><div class=\"line\">        historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//不跳转</span></div><div class=\"line\">        inline: <span class=\"literal\">true</span> <span class=\"comment\">//实时刷新</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">\"Copyright upsmart.\"</span>), <span class=\"comment\">//在这个数组中new一个就可以了</span></div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">//热加载插件</span></div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">            template: path.resolve(<span class=\"string\">'./src/index.html'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    ],</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>index.html：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以上！</p>\n","excerpt":"<p>webpack 配置html-webpack-plugin<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugin<span class=\"variable\">s:</span> [</div><div class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">        template: path.<span class=\"built_in\">resolve</span>(<span class=\"string\">'./src/index.html'</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">]</div></pre></td></tr></table></figure>","more":"<p>公司有一个大神搭建的项目，有许多地方设计的很巧妙。<br>虚心研究，一直有一个疑惑，并没有在项目HTML中看到任何src 文件的引用，项目是如何加在资源文件的？<br>上次框架搭建过程中没有研究清楚，这次在新项目中仔细研究搭建过程。</p>\n<h3 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h3><ul>\n<li>这个插件的作用是依据一个简单的模板，帮你生成最终的Html5文件。</li>\n<li>这个<abbr  title=\"问题解决！！！\">文件中自动引用了你打包后的JS文件</abbr>。</li>\n<li>每次编译都在文件名中插入一个不同的哈希值。</li>\n</ul>\n<p><strong>安装</strong><br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span> html-webpack-plugin</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>创建Html模板页面，这个模板包含title等其它你需要的元素，在编译过程中，本插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件。</p>\n</blockquote>\n<p>此时项目结构如下图所示<br><img src=\"/img/2016-11-30.png\" alt=\"\"></p>\n<p>Webpack详细配置 （37行）：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    devtool: <span class=\"string\">'eval-source-map'</span>,</div><div class=\"line\">    entry: __dirname + <span class=\"string\">\"/src/app/app.module.js\"</span>,</div><div class=\"line\">    <span class=\"comment\">// entry: __dirname + \"/src/bootstrap.js\",</span></div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: __dirname + <span class=\"string\">\"/dist\"</span>,</div><div class=\"line\">        filename: <span class=\"string\">\"bundle.js\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">module</span>: &#123;</div><div class=\"line\">        loaders: [&#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.json$/</span>, <span class=\"comment\">//在配置文件里添加JSON loader</span></div><div class=\"line\">            loader: <span class=\"string\">\"json\"</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</div><div class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">            loader: <span class=\"string\">'babel'</span> <span class=\"comment\">//在webpack的module部分的loaders里进行配置即可</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">            loader: <span class=\"string\">'style!css'</span> <span class=\"comment\">//添加对样式表的处理</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    devServer: &#123;</div><div class=\"line\">        contentBase: <span class=\"string\">\"./src/\"</span>, <span class=\"comment\">//本地服务器所加载的页面所在的目录</span></div><div class=\"line\">        colors: <span class=\"literal\">true</span>, <span class=\"comment\">//终端中输出结果为彩色</span></div><div class=\"line\">        historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">//不跳转</span></div><div class=\"line\">        inline: <span class=\"literal\">true</span> <span class=\"comment\">//实时刷新</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">\"Copyright upsmart.\"</span>), <span class=\"comment\">//在这个数组中new一个就可以了</span></div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(), <span class=\"comment\">//热加载插件</span></div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">            template: path.resolve(<span class=\"string\">'./src/index.html'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    ],</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>index.html：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以上！</p>"},{"layout":"post","title":"Angular应用刨析","date":"2016-11-09T00:55:00.000Z","comments":1,"_content":"####  9.1 准备项目示例\n 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\n\n <!-- more -->\n####  9.2 使用模块工作\n\n创建模块：\n  ```\n  set myApp=angular.module('exampleApp',[])\n  ```\n\n  module方法接受三个参数，但通常只使用前两个参数。 惯例给模块App的后缀名。\n  这个习惯清楚的体现出模块代表的是代码结构的顶层。这个做会在多模块的复杂应用中很有用。\n\n模块方法接受的参数：\n\n名称   | 描述\n-------- | -------------------------\nname     | 新模块的名称\nrequires | 该模块所依赖的模块集合\nconfig   | 改模块的配置。等同于Module.config方法\n\n注意\n```\n  set myApp=angular.module('exampleApp')\n```\n这样忽略requires参数，结果是模块试图查找一个之前创建的exampleApp的模块。\n而不是创建一个新的。而且通常会报错，没报错就说明已经有一个同名的模块。\n\n在HTML中引应用ng-app属性：\n```\n<html ng-app=\"exampleApp\">\n```\nng-app属性是在angularjs生命周期的bootstrap阶段被使用。不同于bootstrap CSS框架哦。\n\n####  9.3 使用模块定义AngularJS组件\n\n名称   | 描述\n-------- | -------------------------\nanimation|动画特性\nconfig|注册一个在模块加载时对模块的配置函数\nconstant|定义一个返回常亮服务\ncontroller|创建控制器\ndirectiv|创建一个指令\nfactory|创建一个服务\nfilter|创建一个过滤器\nprovider|创建一个服务\nname|返回模块名\nrun|注册一个在angularJS加载完毕后用于对所有模块配置的函数\nservice|创建一个服务\nvaiue|定义一个返回常量服务\n\nModule的对象定义的方法可以范围三类：\n* 为angulJS程序定义组件\n* 使得\n","source":"_posts/2016-11-23-2.md","raw":"---\nlayout: post\ntitle: Angular应用刨析\ndate: 2016-11-09 08:55\ncomments: true\ntags:\n  - Angular\n  - angular基础\n---\n####  9.1 准备项目示例\n 参考源码： https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\n\n <!-- more -->\n####  9.2 使用模块工作\n\n创建模块：\n  ```\n  set myApp=angular.module('exampleApp',[])\n  ```\n\n  module方法接受三个参数，但通常只使用前两个参数。 惯例给模块App的后缀名。\n  这个习惯清楚的体现出模块代表的是代码结构的顶层。这个做会在多模块的复杂应用中很有用。\n\n模块方法接受的参数：\n\n名称   | 描述\n-------- | -------------------------\nname     | 新模块的名称\nrequires | 该模块所依赖的模块集合\nconfig   | 改模块的配置。等同于Module.config方法\n\n注意\n```\n  set myApp=angular.module('exampleApp')\n```\n这样忽略requires参数，结果是模块试图查找一个之前创建的exampleApp的模块。\n而不是创建一个新的。而且通常会报错，没报错就说明已经有一个同名的模块。\n\n在HTML中引应用ng-app属性：\n```\n<html ng-app=\"exampleApp\">\n```\nng-app属性是在angularjs生命周期的bootstrap阶段被使用。不同于bootstrap CSS框架哦。\n\n####  9.3 使用模块定义AngularJS组件\n\n名称   | 描述\n-------- | -------------------------\nanimation|动画特性\nconfig|注册一个在模块加载时对模块的配置函数\nconstant|定义一个返回常亮服务\ncontroller|创建控制器\ndirectiv|创建一个指令\nfactory|创建一个服务\nfilter|创建一个过滤器\nprovider|创建一个服务\nname|返回模块名\nrun|注册一个在angularJS加载完毕后用于对所有模块配置的函数\nservice|创建一个服务\nvaiue|定义一个返回常量服务\n\nModule的对象定义的方法可以范围三类：\n* 为angulJS程序定义组件\n* 使得\n","slug":"2016-11-23-2","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqgz000on0c5on0vr6lt","content":"<h4 id=\"9-1-准备项目示例\"><a href=\"#9-1-准备项目示例\" class=\"headerlink\" title=\"9.1 准备项目示例\"></a>9.1 准备项目示例</h4><p> 参考源码： <a href=\"https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\" target=\"_blank\" rel=\"external\">https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html</a></p>\n <a id=\"more\"></a>\n<h4 id=\"9-2-使用模块工作\"><a href=\"#9-2-使用模块工作\" class=\"headerlink\" title=\"9.2 使用模块工作\"></a>9.2 使用模块工作</h4><p>创建模块：<br>  <figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> myApp=angular.<span class=\"keyword\">module</span>(<span class=\"comment\">'exampleApp',[])</span></div></pre></td></tr></table></figure></p>\n<p>  module方法接受三个参数，但通常只使用前两个参数。 惯例给模块App的后缀名。<br>  这个习惯清楚的体现出模块代表的是代码结构的顶层。这个做会在多模块的复杂应用中很有用。</p>\n<p>模块方法接受的参数：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>新模块的名称</td>\n</tr>\n<tr>\n<td>requires</td>\n<td>该模块所依赖的模块集合</td>\n</tr>\n<tr>\n<td>config</td>\n<td>改模块的配置。等同于Module.config方法</td>\n</tr>\n</tbody>\n</table>\n<p>注意<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> myApp=angular.<span class=\"keyword\">module</span>(<span class=\"comment\">'exampleApp')</span></div></pre></td></tr></table></figure></p>\n<p>这样忽略requires参数，结果是模块试图查找一个之前创建的exampleApp的模块。<br>而不是创建一个新的。而且通常会报错，没报错就说明已经有一个同名的模块。</p>\n<p>在HTML中引应用ng-app属性：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">html</span> ng-app=<span class=\"string\">\"exampleApp\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>ng-app属性是在angularjs生命周期的bootstrap阶段被使用。不同于bootstrap CSS框架哦。</p>\n<h4 id=\"9-3-使用模块定义AngularJS组件\"><a href=\"#9-3-使用模块定义AngularJS组件\" class=\"headerlink\" title=\"9.3 使用模块定义AngularJS组件\"></a>9.3 使用模块定义AngularJS组件</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>animation</td>\n<td>动画特性</td>\n</tr>\n<tr>\n<td>config</td>\n<td>注册一个在模块加载时对模块的配置函数</td>\n</tr>\n<tr>\n<td>constant</td>\n<td>定义一个返回常亮服务</td>\n</tr>\n<tr>\n<td>controller</td>\n<td>创建控制器</td>\n</tr>\n<tr>\n<td>directiv</td>\n<td>创建一个指令</td>\n</tr>\n<tr>\n<td>factory</td>\n<td>创建一个服务</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>创建一个过滤器</td>\n</tr>\n<tr>\n<td>provider</td>\n<td>创建一个服务</td>\n</tr>\n<tr>\n<td>name</td>\n<td>返回模块名</td>\n</tr>\n<tr>\n<td>run</td>\n<td>注册一个在angularJS加载完毕后用于对所有模块配置的函数</td>\n</tr>\n<tr>\n<td>service</td>\n<td>创建一个服务</td>\n</tr>\n<tr>\n<td>vaiue</td>\n<td>定义一个返回常量服务</td>\n</tr>\n</tbody>\n</table>\n<p>Module的对象定义的方法可以范围三类：</p>\n<ul>\n<li>为angulJS程序定义组件</li>\n<li>使得</li>\n</ul>\n","excerpt":"<h4 id=\"9-1-准备项目示例\"><a href=\"#9-1-准备项目示例\" class=\"headerlink\" title=\"9.1 准备项目示例\"></a>9.1 准备项目示例</h4><p> 参考源码： <a href=\"https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html\">https://github.com/momicafe/pro-angularjs/blob/master/Chapter%2009/Listing%2001.html</a></p>","more":"<h4 id=\"9-2-使用模块工作\"><a href=\"#9-2-使用模块工作\" class=\"headerlink\" title=\"9.2 使用模块工作\"></a>9.2 使用模块工作</h4><p>创建模块：<br>  <figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> myApp=angular.<span class=\"keyword\">module</span>(<span class=\"comment\">'exampleApp',[])</span></div></pre></td></tr></table></figure></p>\n<p>  module方法接受三个参数，但通常只使用前两个参数。 惯例给模块App的后缀名。<br>  这个习惯清楚的体现出模块代表的是代码结构的顶层。这个做会在多模块的复杂应用中很有用。</p>\n<p>模块方法接受的参数：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>新模块的名称</td>\n</tr>\n<tr>\n<td>requires</td>\n<td>该模块所依赖的模块集合</td>\n</tr>\n<tr>\n<td>config</td>\n<td>改模块的配置。等同于Module.config方法</td>\n</tr>\n</tbody>\n</table>\n<p>注意<br><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> myApp=angular.<span class=\"keyword\">module</span>(<span class=\"comment\">'exampleApp')</span></div></pre></td></tr></table></figure></p>\n<p>这样忽略requires参数，结果是模块试图查找一个之前创建的exampleApp的模块。<br>而不是创建一个新的。而且通常会报错，没报错就说明已经有一个同名的模块。</p>\n<p>在HTML中引应用ng-app属性：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"selector-tag\">html</span> ng-app=<span class=\"string\">\"exampleApp\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>ng-app属性是在angularjs生命周期的bootstrap阶段被使用。不同于bootstrap CSS框架哦。</p>\n<h4 id=\"9-3-使用模块定义AngularJS组件\"><a href=\"#9-3-使用模块定义AngularJS组件\" class=\"headerlink\" title=\"9.3 使用模块定义AngularJS组件\"></a>9.3 使用模块定义AngularJS组件</h4><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>animation</td>\n<td>动画特性</td>\n</tr>\n<tr>\n<td>config</td>\n<td>注册一个在模块加载时对模块的配置函数</td>\n</tr>\n<tr>\n<td>constant</td>\n<td>定义一个返回常亮服务</td>\n</tr>\n<tr>\n<td>controller</td>\n<td>创建控制器</td>\n</tr>\n<tr>\n<td>directiv</td>\n<td>创建一个指令</td>\n</tr>\n<tr>\n<td>factory</td>\n<td>创建一个服务</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>创建一个过滤器</td>\n</tr>\n<tr>\n<td>provider</td>\n<td>创建一个服务</td>\n</tr>\n<tr>\n<td>name</td>\n<td>返回模块名</td>\n</tr>\n<tr>\n<td>run</td>\n<td>注册一个在angularJS加载完毕后用于对所有模块配置的函数</td>\n</tr>\n<tr>\n<td>service</td>\n<td>创建一个服务</td>\n</tr>\n<tr>\n<td>vaiue</td>\n<td>定义一个返回常量服务</td>\n</tr>\n</tbody>\n</table>\n<p>Module的对象定义的方法可以范围三类：</p>\n<ul>\n<li>为angulJS程序定义组件</li>\n<li>使得</li>\n</ul>"},{"layout":"post","title":"path.resolve([...paths])解释","date":"2016-11-30T01:28:36.000Z","comments":1,"_content":"#   path.resolve\n\nnodejs官方文档原文：https://nodejs.org/api/path.html#path_path_resolve_paths\n\n初始添加在版本: v0.3.4\n* paths <String> 路径或路径段\n* 返回: <String>`path.resolve（）`方法将一系列路径或路径段解析为绝对路径。\n<!-- more -->\n\n* 给定的路径序列从右到左进行处理，每个后续路径前置直到构造绝对路径。\n  例如，给定路径段序列：`/ foo，/ bar，baz，`调用`path.resolve（'/ foo'，'/ bar'，'baz'）`将返回`/ bar / baz`。\n* 如果在处理所有给定路径段之后还没有生成绝对路径，则使用当前工作目录。\n* 生成的路径将进行规范化，并删除尾部斜杠，除非将路径解析为根目录。\n* 忽略零长度路径段。\n* 如果没有传递路径段，path.resolve（）将返回当前工作目录的绝对路径。\n\n例如：\n```\npath.resolve('/foo/bar', './baz')\n// Returns: '/foo/bar/baz'\n\npath.resolve('/foo/bar', '/tmp/file/')\n// Returns: '/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 如果当前工作目录是 /home/myself/node,返回 '/home/myself/node/wwwroot/static_files/gif/image.gif'\n```\n如果任何参数不是字符串，则抛出`TypeError`。\n\n####  Class: TypeError\nError子类，指示提供的参数不是允许的类型。例如，将函数传递给期望字符串的参数将被视为TypeError。\n```\nrequire('url').parse(() => { });\n  // throws TypeError, since it expected a string\n```\nNode.js将立即生成并抛出TypeError实例作为参数验证的形式。\n","source":"_posts/2016-11-30-2.md","raw":"---\nlayout: post\ntitle: path.resolve([...paths])解释\ndate: 2016-11-30 09:28:36\ncomments: true\ntags:\n  - webpack\n  - node\n---\n#   path.resolve\n\nnodejs官方文档原文：https://nodejs.org/api/path.html#path_path_resolve_paths\n\n初始添加在版本: v0.3.4\n* paths <String> 路径或路径段\n* 返回: <String>`path.resolve（）`方法将一系列路径或路径段解析为绝对路径。\n<!-- more -->\n\n* 给定的路径序列从右到左进行处理，每个后续路径前置直到构造绝对路径。\n  例如，给定路径段序列：`/ foo，/ bar，baz，`调用`path.resolve（'/ foo'，'/ bar'，'baz'）`将返回`/ bar / baz`。\n* 如果在处理所有给定路径段之后还没有生成绝对路径，则使用当前工作目录。\n* 生成的路径将进行规范化，并删除尾部斜杠，除非将路径解析为根目录。\n* 忽略零长度路径段。\n* 如果没有传递路径段，path.resolve（）将返回当前工作目录的绝对路径。\n\n例如：\n```\npath.resolve('/foo/bar', './baz')\n// Returns: '/foo/bar/baz'\n\npath.resolve('/foo/bar', '/tmp/file/')\n// Returns: '/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n// 如果当前工作目录是 /home/myself/node,返回 '/home/myself/node/wwwroot/static_files/gif/image.gif'\n```\n如果任何参数不是字符串，则抛出`TypeError`。\n\n####  Class: TypeError\nError子类，指示提供的参数不是允许的类型。例如，将函数传递给期望字符串的参数将被视为TypeError。\n```\nrequire('url').parse(() => { });\n  // throws TypeError, since it expected a string\n```\nNode.js将立即生成并抛出TypeError实例作为参数验证的形式。\n","slug":"2016-11-30-2","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqh0000qn0c5r6lmgm92","content":"<h1 id=\"path-resolve\"><a href=\"#path-resolve\" class=\"headerlink\" title=\"path.resolve\"></a>path.resolve</h1><p>nodejs官方文档原文：<a href=\"https://nodejs.org/api/path.html#path_path_resolve_paths\" target=\"_blank\" rel=\"external\">https://nodejs.org/api/path.html#path_path_resolve_paths</a></p>\n<p>初始添加在版本: v0.3.4</p>\n<ul>\n<li>paths <string> 路径或路径段</string></li>\n<li><p>返回: <string><code>path.resolve（）</code>方法将一系列路径或路径段解析为绝对路径。</string></p>\n<a id=\"more\"></a>\n</li>\n<li><p>给定的路径序列从右到左进行处理，每个后续路径前置直到构造绝对路径。<br>例如，给定路径段序列：<code>/ foo，/ bar，baz，</code>调用<code>path.resolve（&#39;/ foo&#39;，&#39;/ bar&#39;，&#39;baz&#39;）</code>将返回<code>/ bar / baz</code>。</p>\n</li>\n<li>如果在处理所有给定路径段之后还没有生成绝对路径，则使用当前工作目录。</li>\n<li>生成的路径将进行规范化，并删除尾部斜杠，除非将路径解析为根目录。</li>\n<li>忽略零长度路径段。</li>\n<li>如果没有传递路径段，path.resolve（）将返回当前工作目录的绝对路径。</li>\n</ul>\n<p>例如：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'./baz'</span>)</div><div class=\"line\"><span class=\"regexp\">//</span> Returns: <span class=\"string\">'/foo/bar/baz'</span></div><div class=\"line\"></div><div class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'/tmp/file/'</span>)</div><div class=\"line\"><span class=\"regexp\">//</span> Returns: <span class=\"string\">'/tmp/file'</span></div><div class=\"line\"></div><div class=\"line\">path.resolve(<span class=\"string\">'wwwroot'</span>, <span class=\"string\">'static_files/png/'</span>, <span class=\"string\">'../gif/image.gif'</span>)</div><div class=\"line\"><span class=\"regexp\">//</span> 如果当前工作目录是 <span class=\"regexp\">/home/my</span>self<span class=\"regexp\">/node,返回 '/</span>home<span class=\"regexp\">/myself/</span>node<span class=\"regexp\">/wwwroot/</span>static_files<span class=\"regexp\">/gif/im</span>age.gif<span class=\"string\">'</span></div></pre></td></tr></table></figure></p>\n<p>如果任何参数不是字符串，则抛出<code>TypeError</code>。</p>\n<h4 id=\"Class-TypeError\"><a href=\"#Class-TypeError\" class=\"headerlink\" title=\"Class: TypeError\"></a>Class: TypeError</h4><p>Error子类，指示提供的参数不是允许的类型。例如，将函数传递给期望字符串的参数将被视为TypeError。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;);</div><div class=\"line\">  <span class=\"comment\">// throws TypeError, since it expected a string</span></div></pre></td></tr></table></figure></p>\n<p>Node.js将立即生成并抛出TypeError实例作为参数验证的形式。</p>\n","excerpt":"<h1 id=\"path-resolve\"><a href=\"#path-resolve\" class=\"headerlink\" title=\"path.resolve\"></a>path.resolve</h1><p>nodejs官方文档原文：<a href=\"https://nodejs.org/api/path.html#path_path_resolve_paths\">https://nodejs.org/api/path.html#path_path_resolve_paths</a></p>\n<p>初始添加在版本: v0.3.4</p>\n<ul>\n<li>paths <String> 路径或路径段</li>\n<li><p>返回: <String><code>path.resolve（）</code>方法将一系列路径或路径段解析为绝对路径。</p>","more":"</li>\n<li><p>给定的路径序列从右到左进行处理，每个后续路径前置直到构造绝对路径。<br>例如，给定路径段序列：<code>/ foo，/ bar，baz，</code>调用<code>path.resolve（&#39;/ foo&#39;，&#39;/ bar&#39;，&#39;baz&#39;）</code>将返回<code>/ bar / baz</code>。</p>\n</li>\n<li>如果在处理所有给定路径段之后还没有生成绝对路径，则使用当前工作目录。</li>\n<li>生成的路径将进行规范化，并删除尾部斜杠，除非将路径解析为根目录。</li>\n<li>忽略零长度路径段。</li>\n<li>如果没有传递路径段，path.resolve（）将返回当前工作目录的绝对路径。</li>\n</ul>\n<p>例如：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'./baz'</span>)</div><div class=\"line\"><span class=\"regexp\">//</span> Returns: <span class=\"string\">'/foo/bar/baz'</span></div><div class=\"line\"></div><div class=\"line\">path.resolve(<span class=\"string\">'/foo/bar'</span>, <span class=\"string\">'/tmp/file/'</span>)</div><div class=\"line\"><span class=\"regexp\">//</span> Returns: <span class=\"string\">'/tmp/file'</span></div><div class=\"line\"></div><div class=\"line\">path.resolve(<span class=\"string\">'wwwroot'</span>, <span class=\"string\">'static_files/png/'</span>, <span class=\"string\">'../gif/image.gif'</span>)</div><div class=\"line\"><span class=\"regexp\">//</span> 如果当前工作目录是 <span class=\"regexp\">/home/my</span>self<span class=\"regexp\">/node,返回 '/</span>home<span class=\"regexp\">/myself/</span>node<span class=\"regexp\">/wwwroot/</span>static_files<span class=\"regexp\">/gif/im</span>age.gif<span class=\"string\">'</span></div></pre></td></tr></table></figure></p>\n<p>如果任何参数不是字符串，则抛出<code>TypeError</code>。</p>\n<h4 id=\"Class-TypeError\"><a href=\"#Class-TypeError\" class=\"headerlink\" title=\"Class: TypeError\"></a>Class: TypeError</h4><p>Error子类，指示提供的参数不是允许的类型。例如，将函数传递给期望字符串的参数将被视为TypeError。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;);</div><div class=\"line\">  <span class=\"comment\">// throws TypeError, since it expected a string</span></div></pre></td></tr></table></figure></p>\n<p>Node.js将立即生成并抛出TypeError实例作为参数验证的形式。</p>"},{"layout":"post","title":"CSS文件引入","date":"2016-12-01T06:47:41.000Z","comments":1,"_content":"\n\n# materialize.css文件引用\n\n<!-- more -->\n\n\n之前引用：\n```\n @import '~materialize-css/sass/materialize.scss';\n```\n>然后报错：Module not found: Error: Cannot resolve 'file' or 'directory' ../fonts/roboto/Roboto-Bold.ttf in /home/xxxxxxxxxxx/src/assets/sass resolve file..........................\n\n之后尝试修改引用node_modules文件中的资源，由引用SASS修改为应用 CSS文件。\n```\n@import '~materialize-css/dist/css/materialize.css';\n```\n\n在app.mpdule.js中加载文件：`import 'materialize-css';`不用加载其到 Angular中去。\n\n没有报错啦～～\n","source":"_posts/2016-12-01.md","raw":"---\nlayout: post\ntitle: CSS文件引入\ndate: 2016-12-01 14:47:41\ncomments: true\ntags:\n  - webpack\n  - Angular\n  - ES6\n---\n\n\n# materialize.css文件引用\n\n<!-- more -->\n\n\n之前引用：\n```\n @import '~materialize-css/sass/materialize.scss';\n```\n>然后报错：Module not found: Error: Cannot resolve 'file' or 'directory' ../fonts/roboto/Roboto-Bold.ttf in /home/xxxxxxxxxxx/src/assets/sass resolve file..........................\n\n之后尝试修改引用node_modules文件中的资源，由引用SASS修改为应用 CSS文件。\n```\n@import '~materialize-css/dist/css/materialize.css';\n```\n\n在app.mpdule.js中加载文件：`import 'materialize-css';`不用加载其到 Angular中去。\n\n没有报错啦～～\n","slug":"2016-12-01","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqh1000rn0c57rrmd9zr","content":"<h1 id=\"materialize-css文件引用\"><a href=\"#materialize-css文件引用\" class=\"headerlink\" title=\"materialize.css文件引用\"></a>materialize.css文件引用</h1><a id=\"more\"></a>\n<p>之前引用：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~materialize-css/sass/materialize.scss'</span>;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>然后报错：Module not found: Error: Cannot resolve ‘file’ or ‘directory’ ../fonts/roboto/Roboto-Bold.ttf in /home/xxxxxxxxxxx/src/assets/sass resolve file……………………..</p>\n</blockquote>\n<p>之后尝试修改引用node_modules文件中的资源，由引用SASS修改为应用 CSS文件。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~materialize-css/dist/css/materialize.css'</span>;</div></pre></td></tr></table></figure></p>\n<p>在app.mpdule.js中加载文件：<code>import &#39;materialize-css&#39;;</code>不用加载其到 Angular中去。</p>\n<p>没有报错啦～～</p>\n","excerpt":"<h1 id=\"materialize-css文件引用\"><a href=\"#materialize-css文件引用\" class=\"headerlink\" title=\"materialize.css文件引用\"></a>materialize.css文件引用</h1>","more":"<p>之前引用：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~materialize-css/sass/materialize.scss'</span>;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>然后报错：Module not found: Error: Cannot resolve ‘file’ or ‘directory’ ../fonts/roboto/Roboto-Bold.ttf in /home/xxxxxxxxxxx/src/assets/sass resolve file……………………..</p>\n</blockquote>\n<p>之后尝试修改引用node_modules文件中的资源，由引用SASS修改为应用 CSS文件。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'~materialize-css/dist/css/materialize.css'</span>;</div></pre></td></tr></table></figure></p>\n<p>在app.mpdule.js中加载文件：<code>import &#39;materialize-css&#39;;</code>不用加载其到 Angular中去。</p>\n<p>没有报错啦～～</p>"},{"layout":"post","title":"Angular Bootstrap","date":"2016-12-02T06:33:52.000Z","comments":1,"_content":"# Bootstrap\n\n本页介绍Angular初始化过程，以及如何在需要的时候手动初始化Angular。\n\n\n<!-- more -->\n\n## Angular` <script> `Tag\nAngular自动初始化时,我们建议这样导入文件路径.\n```\n<!doctype html>\n<html xmlns:ng=\"http://angularjs.org\" ng-app>\n  <body>\n    ...\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n1. 将`script`标签放在页面底部。在页面末尾放置脚本标记可以提高应用程序加载时间，因为<abbr  title=\"\">加载angular.js脚本不会阻止HTML的加载</abbr>。\n你可以从[这儿](http://code.angularjs.org)获取最新的代码。请不要将你的生产代码链接到此网址，因为它会暴露你网站上的安全漏洞。对于开发链接到我们的网站是好的。\n> 选择`angular-[version].js`为可读的文件，适合开发和调试。\n> 选择`angular-[version].min.js`为压缩的文件，适合在生产中使用。\n2. 如果你希望Angularjs自动引导你的应用程序，请将ng-app放置到应用程序的根目录，通常在<html>标签上。\n3. 不推荐在旧版本的IE上使用angularjs。\n\n## 自动初始化\nangular在`DOMContentLoaded`事件时自动初始化或者当angular.js脚本被评估为`document.readyState`设置为“完成”。这这个时间点上，Angular寻找指定你的应用程序根目录的ngApp指令。如果找到ngApp指令，那么Angular将：\n* 加载与指令相关联的模块。\n* 创建应用程序注入器。\n* 编译处理ngApp指令的DOM作为编译的最基层。这允许你告诉angular只处理DOM的一部分作为一个Angular应用程序。\n\n![](/img/concepts-startup.png)\n\n```\n<!doctype html>\n<html ng-app=\"optionalModuleName\">\n  <body>\n    I can add: {{ 1+2 }}.\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n作为最佳实践，考虑在ng-app的相同元素上添加`ng-strict-di`指令：\n```\n<!doctype html>\n<html ng-app=\"optionalModuleName\" ng-strict-di>\n  <body>\n    I can add: {{ 1+2 }}.\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n这将确保你的应用程序中的所有服务都已正确注释。请参阅[这儿](https://docs.angularjs.org/guide/di#using-strict-dependency-injection) 了解**依赖注入严格模式**。\n\n\n\n## 手动初始化\n如果你需要更多地控制初始化过程，可以改用手动引导方法。当你需要这样做需要在Angular编译页面之前执行操作。\n\n这里是一个手动初始化Angular的例子：\n```\n<!doctype html>\n<html>\n<body>\n  <div ng-controller=\"MyController\">\n    Hello {{greetMe}}!\n  </div>\n  <script src=\"http://code.angularjs.org/snapshot/angular.js\"></script>\n\n  <script>\n    angular.module('myApp', [])\n      .controller('MyController', ['$scope', function ($scope) {\n        $scope.greetMe = 'World';\n      }]);\n\n    angular.element(function() {\n      angular.bootstrap(document, ['myApp']);\n    });\n  </script>\n</body>\n</html>\n```\n 注意: 要加载到注入器中的应用程序模块的名称作为angular.bootstrap函数的第二个参数。\n 请注意，angular.bootstrap不会即时创建模块,只会在启动时创建模块,因此在作为参数传递之前，必须确保创建其所有的自定义模块。\n你调用`angular.bootstrap()`,就已经加载到了所有自定义模块。你不能在应用程序启动后添加控制器，服务，指令等。\n\n>注意：在手动引导应用程序时，不应使用`ng-app`指令。\n\n这是你的代码应该遵循的顺序：\n1. 在页面和所有代码加载后，找到你的AngularJS应用程序的根元素，它通常是文档的根。\n2. 调用`angular.bootstrap`将元素编译成可执行文件，双向绑定应用程序。\n\n### 谨记\n有几个事情要记住，不管自动或手动引导：\n* 虽然每页可以引导多个AngularJS应用程序，但不建议这么做。这可能会遇到问题，特别是与复杂的应用程序，所以提醒你需要谨慎。\n* 不要在具有使用转换的指令的元素上引导应用程序，例如`ngIf`，`ngInclude`和`ngView`。\n   这样做会错误地放置应用程序`$rootElement`和应用程序的注入器，导致动画停止工作，并使应用程序外部无法访问注入器。\n\n## 延迟引导\n这个功能使得像Batarang和测试运行程序这样的工具可以在AngularJS的引导进程中，并在更多的模块中依赖注入进来.其可以替代或增加依赖注入服务以用于仪器化或模拟重度依赖性。\n如果window.name包含前缀NG_DEFER_BOOTSTRAP！当angular.bootstrap被调用时，引导进程将被暂停，直到angular.resumeBootstrap（）被调用。\nangular.resumeBootstrap（）采用一个可选的模块数组，应该添加到应用程序即将被引导的模块的原始列表中。\n\n\nen:https://docs.angularjs.org/guide/bootstrap\n","source":"_posts/2016-12-02.md","raw":"---\nlayout: post\ntitle: Angular Bootstrap\ndate: 2016-12-02 14:33:52\ncomments: true\ntags:\n  - Bootstrap\n  - Angular\n---\n# Bootstrap\n\n本页介绍Angular初始化过程，以及如何在需要的时候手动初始化Angular。\n\n\n<!-- more -->\n\n## Angular` <script> `Tag\nAngular自动初始化时,我们建议这样导入文件路径.\n```\n<!doctype html>\n<html xmlns:ng=\"http://angularjs.org\" ng-app>\n  <body>\n    ...\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n1. 将`script`标签放在页面底部。在页面末尾放置脚本标记可以提高应用程序加载时间，因为<abbr  title=\"\">加载angular.js脚本不会阻止HTML的加载</abbr>。\n你可以从[这儿](http://code.angularjs.org)获取最新的代码。请不要将你的生产代码链接到此网址，因为它会暴露你网站上的安全漏洞。对于开发链接到我们的网站是好的。\n> 选择`angular-[version].js`为可读的文件，适合开发和调试。\n> 选择`angular-[version].min.js`为压缩的文件，适合在生产中使用。\n2. 如果你希望Angularjs自动引导你的应用程序，请将ng-app放置到应用程序的根目录，通常在<html>标签上。\n3. 不推荐在旧版本的IE上使用angularjs。\n\n## 自动初始化\nangular在`DOMContentLoaded`事件时自动初始化或者当angular.js脚本被评估为`document.readyState`设置为“完成”。这这个时间点上，Angular寻找指定你的应用程序根目录的ngApp指令。如果找到ngApp指令，那么Angular将：\n* 加载与指令相关联的模块。\n* 创建应用程序注入器。\n* 编译处理ngApp指令的DOM作为编译的最基层。这允许你告诉angular只处理DOM的一部分作为一个Angular应用程序。\n\n![](/img/concepts-startup.png)\n\n```\n<!doctype html>\n<html ng-app=\"optionalModuleName\">\n  <body>\n    I can add: {{ 1+2 }}.\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n作为最佳实践，考虑在ng-app的相同元素上添加`ng-strict-di`指令：\n```\n<!doctype html>\n<html ng-app=\"optionalModuleName\" ng-strict-di>\n  <body>\n    I can add: {{ 1+2 }}.\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n这将确保你的应用程序中的所有服务都已正确注释。请参阅[这儿](https://docs.angularjs.org/guide/di#using-strict-dependency-injection) 了解**依赖注入严格模式**。\n\n\n\n## 手动初始化\n如果你需要更多地控制初始化过程，可以改用手动引导方法。当你需要这样做需要在Angular编译页面之前执行操作。\n\n这里是一个手动初始化Angular的例子：\n```\n<!doctype html>\n<html>\n<body>\n  <div ng-controller=\"MyController\">\n    Hello {{greetMe}}!\n  </div>\n  <script src=\"http://code.angularjs.org/snapshot/angular.js\"></script>\n\n  <script>\n    angular.module('myApp', [])\n      .controller('MyController', ['$scope', function ($scope) {\n        $scope.greetMe = 'World';\n      }]);\n\n    angular.element(function() {\n      angular.bootstrap(document, ['myApp']);\n    });\n  </script>\n</body>\n</html>\n```\n 注意: 要加载到注入器中的应用程序模块的名称作为angular.bootstrap函数的第二个参数。\n 请注意，angular.bootstrap不会即时创建模块,只会在启动时创建模块,因此在作为参数传递之前，必须确保创建其所有的自定义模块。\n你调用`angular.bootstrap()`,就已经加载到了所有自定义模块。你不能在应用程序启动后添加控制器，服务，指令等。\n\n>注意：在手动引导应用程序时，不应使用`ng-app`指令。\n\n这是你的代码应该遵循的顺序：\n1. 在页面和所有代码加载后，找到你的AngularJS应用程序的根元素，它通常是文档的根。\n2. 调用`angular.bootstrap`将元素编译成可执行文件，双向绑定应用程序。\n\n### 谨记\n有几个事情要记住，不管自动或手动引导：\n* 虽然每页可以引导多个AngularJS应用程序，但不建议这么做。这可能会遇到问题，特别是与复杂的应用程序，所以提醒你需要谨慎。\n* 不要在具有使用转换的指令的元素上引导应用程序，例如`ngIf`，`ngInclude`和`ngView`。\n   这样做会错误地放置应用程序`$rootElement`和应用程序的注入器，导致动画停止工作，并使应用程序外部无法访问注入器。\n\n## 延迟引导\n这个功能使得像Batarang和测试运行程序这样的工具可以在AngularJS的引导进程中，并在更多的模块中依赖注入进来.其可以替代或增加依赖注入服务以用于仪器化或模拟重度依赖性。\n如果window.name包含前缀NG_DEFER_BOOTSTRAP！当angular.bootstrap被调用时，引导进程将被暂停，直到angular.resumeBootstrap（）被调用。\nangular.resumeBootstrap（）采用一个可选的模块数组，应该添加到应用程序即将被引导的模块的原始列表中。\n\n\nen:https://docs.angularjs.org/guide/bootstrap\n","slug":"2016-12-02","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqh2000tn0c5yjdzj8li","content":"<h1 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h1><p>本页介绍Angular初始化过程，以及如何在需要的时候手动初始化Angular。</p>\n<a id=\"more\"></a>\n<h2 id=\"Angular-lt-script-gt-Tag\"><a href=\"#Angular-lt-script-gt-Tag\" class=\"headerlink\" title=\"Angular&lt;script&gt;Tag\"></a>Angular<code>&lt;script&gt;</code>Tag</h2><p>Angular自动初始化时,我们建议这样导入文件路径.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:ng</span>=<span class=\"string\">\"http://angularjs.org\"</span> <span class=\"attr\">ng-app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>将<code>script</code>标签放在页面底部。在页面末尾放置脚本标记可以提高应用程序加载时间，因为<abbr title=\"\">加载angular.js脚本不会阻止HTML的加载</abbr>。<br>你可以从<a href=\"http://code.angularjs.org\" target=\"_blank\" rel=\"external\">这儿</a>获取最新的代码。请不要将你的生产代码链接到此网址，因为它会暴露你网站上的安全漏洞。对于开发链接到我们的网站是好的。<blockquote>\n<p>选择<code>angular-[version].js</code>为可读的文件，适合开发和调试。<br>选择<code>angular-[version].min.js</code>为压缩的文件，适合在生产中使用。</p>\n</blockquote>\n</li>\n<li>如果你希望Angularjs自动引导你的应用程序，请将ng-app放置到应用程序的根目录，通常在<html>标签上。</html></li>\n<li>不推荐在旧版本的IE上使用angularjs。</li>\n</ol>\n<h2 id=\"自动初始化\"><a href=\"#自动初始化\" class=\"headerlink\" title=\"自动初始化\"></a>自动初始化</h2><p>angular在<code>DOMContentLoaded</code>事件时自动初始化或者当angular.js脚本被评估为<code>document.readyState</code>设置为“完成”。这这个时间点上，Angular寻找指定你的应用程序根目录的ngApp指令。如果找到ngApp指令，那么Angular将：</p>\n<ul>\n<li>加载与指令相关联的模块。</li>\n<li>创建应用程序注入器。</li>\n<li>编译处理ngApp指令的DOM作为编译的最基层。这允许你告诉angular只处理DOM的一部分作为一个Angular应用程序。</li>\n</ul>\n<p><img src=\"/img/concepts-startup.png\" alt=\"\"></p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"optionalModuleName\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    I can add: <span class=\"template-variable\">&#123;&#123; 1+2 &#125;&#125;</span><span class=\"xml\">.</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>作为最佳实践，考虑在ng-app的相同元素上添加<code>ng-strict-di</code>指令：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"optionalModuleName\"</span> <span class=\"attr\">ng-strict-di</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    I can add: <span class=\"template-variable\">&#123;&#123; 1+2 &#125;&#125;</span><span class=\"xml\">.</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这将确保你的应用程序中的所有服务都已正确注释。请参阅<a href=\"https://docs.angularjs.org/guide/di#using-strict-dependency-injection\" target=\"_blank\" rel=\"external\">这儿</a> 了解<strong>依赖注入严格模式</strong>。</p>\n<h2 id=\"手动初始化\"><a href=\"#手动初始化\" class=\"headerlink\" title=\"手动初始化\"></a>手动初始化</h2><p>如果你需要更多地控制初始化过程，可以改用手动引导方法。当你需要这样做需要在Angular编译页面之前执行操作。</p>\n<p>这里是一个手动初始化Angular的例子：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">    Hello <span class=\"template-variable\">&#123;&#123;greetMe&#125;&#125;</span><span class=\"xml\">!</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://code.angularjs.org/snapshot/angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">      .controller(<span class=\"string\">'MyController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">        $scope.greetMe = <span class=\"string\">'World'</span>;</div><div class=\"line\">      &#125;]);</div><div class=\"line\"></div><div class=\"line\">    angular.element(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      angular.bootstrap(<span class=\"built_in\">document</span>, [<span class=\"string\">'myApp'</span>]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p> 注意: 要加载到注入器中的应用程序模块的名称作为angular.bootstrap函数的第二个参数。<br> 请注意，angular.bootstrap不会即时创建模块,只会在启动时创建模块,因此在作为参数传递之前，必须确保创建其所有的自定义模块。<br>你调用<code>angular.bootstrap()</code>,就已经加载到了所有自定义模块。你不能在应用程序启动后添加控制器，服务，指令等。</p>\n<blockquote>\n<p>注意：在手动引导应用程序时，不应使用<code>ng-app</code>指令。</p>\n</blockquote>\n<p>这是你的代码应该遵循的顺序：</p>\n<ol>\n<li>在页面和所有代码加载后，找到你的AngularJS应用程序的根元素，它通常是文档的根。</li>\n<li>调用<code>angular.bootstrap</code>将元素编译成可执行文件，双向绑定应用程序。</li>\n</ol>\n<h3 id=\"谨记\"><a href=\"#谨记\" class=\"headerlink\" title=\"谨记\"></a>谨记</h3><p>有几个事情要记住，不管自动或手动引导：</p>\n<ul>\n<li>虽然每页可以引导多个AngularJS应用程序，但不建议这么做。这可能会遇到问题，特别是与复杂的应用程序，所以提醒你需要谨慎。</li>\n<li>不要在具有使用转换的指令的元素上引导应用程序，例如<code>ngIf</code>，<code>ngInclude</code>和<code>ngView</code>。<br> 这样做会错误地放置应用程序<code>$rootElement</code>和应用程序的注入器，导致动画停止工作，并使应用程序外部无法访问注入器。</li>\n</ul>\n<h2 id=\"延迟引导\"><a href=\"#延迟引导\" class=\"headerlink\" title=\"延迟引导\"></a>延迟引导</h2><p>这个功能使得像Batarang和测试运行程序这样的工具可以在AngularJS的引导进程中，并在更多的模块中依赖注入进来.其可以替代或增加依赖注入服务以用于仪器化或模拟重度依赖性。<br>如果window.name包含前缀NG_DEFER_BOOTSTRAP！当angular.bootstrap被调用时，引导进程将被暂停，直到angular.resumeBootstrap（）被调用。<br>angular.resumeBootstrap（）采用一个可选的模块数组，应该添加到应用程序即将被引导的模块的原始列表中。</p>\n<p>en:<a href=\"https://docs.angularjs.org/guide/bootstrap\" target=\"_blank\" rel=\"external\">https://docs.angularjs.org/guide/bootstrap</a></p>\n","excerpt":"<h1 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a>Bootstrap</h1><p>本页介绍Angular初始化过程，以及如何在需要的时候手动初始化Angular。</p>","more":"<h2 id=\"Angular-lt-script-gt-Tag\"><a href=\"#Angular-lt-script-gt-Tag\" class=\"headerlink\" title=\"Angular&lt;script&gt;Tag\"></a>Angular<code>&lt;script&gt;</code>Tag</h2><p>Angular自动初始化时,我们建议这样导入文件路径.<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:ng</span>=<span class=\"string\">\"http://angularjs.org\"</span> <span class=\"attr\">ng-app</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>将<code>script</code>标签放在页面底部。在页面末尾放置脚本标记可以提高应用程序加载时间，因为<abbr  title=\"\">加载angular.js脚本不会阻止HTML的加载</abbr>。<br>你可以从<a href=\"http://code.angularjs.org\">这儿</a>获取最新的代码。请不要将你的生产代码链接到此网址，因为它会暴露你网站上的安全漏洞。对于开发链接到我们的网站是好的。<blockquote>\n<p>选择<code>angular-[version].js</code>为可读的文件，适合开发和调试。<br>选择<code>angular-[version].min.js</code>为压缩的文件，适合在生产中使用。</p>\n</blockquote>\n</li>\n<li>如果你希望Angularjs自动引导你的应用程序，请将ng-app放置到应用程序的根目录，通常在<html>标签上。</li>\n<li>不推荐在旧版本的IE上使用angularjs。</li>\n</ol>\n<h2 id=\"自动初始化\"><a href=\"#自动初始化\" class=\"headerlink\" title=\"自动初始化\"></a>自动初始化</h2><p>angular在<code>DOMContentLoaded</code>事件时自动初始化或者当angular.js脚本被评估为<code>document.readyState</code>设置为“完成”。这这个时间点上，Angular寻找指定你的应用程序根目录的ngApp指令。如果找到ngApp指令，那么Angular将：</p>\n<ul>\n<li>加载与指令相关联的模块。</li>\n<li>创建应用程序注入器。</li>\n<li>编译处理ngApp指令的DOM作为编译的最基层。这允许你告诉angular只处理DOM的一部分作为一个Angular应用程序。</li>\n</ul>\n<p><img src=\"/img/concepts-startup.png\" alt=\"\"></p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"optionalModuleName\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    I can add: </span><span class=\"template-variable\">&#123;&#123; 1+2 &#125;&#125;</span><span class=\"xml\">.</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>作为最佳实践，考虑在ng-app的相同元素上添加<code>ng-strict-di</code>指令：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"optionalModuleName\"</span> <span class=\"attr\">ng-strict-di</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    I can add: </span><span class=\"template-variable\">&#123;&#123; 1+2 &#125;&#125;</span><span class=\"xml\">.</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>这将确保你的应用程序中的所有服务都已正确注释。请参阅<a href=\"https://docs.angularjs.org/guide/di#using-strict-dependency-injection\">这儿</a> 了解<strong>依赖注入严格模式</strong>。</p>\n<h2 id=\"手动初始化\"><a href=\"#手动初始化\" class=\"headerlink\" title=\"手动初始化\"></a>手动初始化</h2><p>如果你需要更多地控制初始化过程，可以改用手动引导方法。当你需要这样做需要在Angular编译页面之前执行操作。</p>\n<p>这里是一个手动初始化Angular的例子：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"MyController\"</span>&gt;</span></div><div class=\"line\">    Hello </span><span class=\"template-variable\">&#123;&#123;greetMe&#125;&#125;</span><span class=\"xml\">!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://code.angularjs.org/snapshot/angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    angular.module(<span class=\"string\">'myApp'</span>, [])</div><div class=\"line\">      .controller(<span class=\"string\">'MyController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$scope</span>) </span>&#123;</div><div class=\"line\">        $scope.greetMe = <span class=\"string\">'World'</span>;</div><div class=\"line\">      &#125;]);</div><div class=\"line\"></div><div class=\"line\">    angular.element(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      angular.bootstrap(<span class=\"built_in\">document</span>, [<span class=\"string\">'myApp'</span>]);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p> 注意: 要加载到注入器中的应用程序模块的名称作为angular.bootstrap函数的第二个参数。<br> 请注意，angular.bootstrap不会即时创建模块,只会在启动时创建模块,因此在作为参数传递之前，必须确保创建其所有的自定义模块。<br>你调用<code>angular.bootstrap()</code>,就已经加载到了所有自定义模块。你不能在应用程序启动后添加控制器，服务，指令等。</p>\n<blockquote>\n<p>注意：在手动引导应用程序时，不应使用<code>ng-app</code>指令。</p>\n</blockquote>\n<p>这是你的代码应该遵循的顺序：</p>\n<ol>\n<li>在页面和所有代码加载后，找到你的AngularJS应用程序的根元素，它通常是文档的根。</li>\n<li>调用<code>angular.bootstrap</code>将元素编译成可执行文件，双向绑定应用程序。</li>\n</ol>\n<h3 id=\"谨记\"><a href=\"#谨记\" class=\"headerlink\" title=\"谨记\"></a>谨记</h3><p>有几个事情要记住，不管自动或手动引导：</p>\n<ul>\n<li>虽然每页可以引导多个AngularJS应用程序，但不建议这么做。这可能会遇到问题，特别是与复杂的应用程序，所以提醒你需要谨慎。</li>\n<li>不要在具有使用转换的指令的元素上引导应用程序，例如<code>ngIf</code>，<code>ngInclude</code>和<code>ngView</code>。<br> 这样做会错误地放置应用程序<code>$rootElement</code>和应用程序的注入器，导致动画停止工作，并使应用程序外部无法访问注入器。</li>\n</ul>\n<h2 id=\"延迟引导\"><a href=\"#延迟引导\" class=\"headerlink\" title=\"延迟引导\"></a>延迟引导</h2><p>这个功能使得像Batarang和测试运行程序这样的工具可以在AngularJS的引导进程中，并在更多的模块中依赖注入进来.其可以替代或增加依赖注入服务以用于仪器化或模拟重度依赖性。<br>如果window.name包含前缀NG_DEFER_BOOTSTRAP！当angular.bootstrap被调用时，引导进程将被暂停，直到angular.resumeBootstrap（）被调用。<br>angular.resumeBootstrap（）采用一个可选的模块数组，应该添加到应用程序即将被引导的模块的原始列表中。</p>\n<p>en:<a href=\"https://docs.angularjs.org/guide/bootstrap\">https://docs.angularjs.org/guide/bootstrap</a></p>"},{"layout":"post","title":"Angular ngController","date":"2016-12-05T02:06:43.000Z","comments":1,"_content":"# ngController\n\n本页介绍ngController，以及如何通过 `$route`服务在路由中绑定控制器？？？？。\n\n\n<!-- more -->\n\n## ngController\nngController指令将控制器綁定到视图。这是Angular如何支持模型 - 视图 - 控制器设计模式背后原理的一个关键点。\n\nAngular的MVC组件:\n* 模型(Model) - 模型是范围的属性;通过绑定访问作用域属性,作用域附加到DOM。\n* 视图(View) - 呈现到视图中的模板（具有数据绑定的HTML）。\n* 控制器(Controller) -ngController指令指定一个Controller类;该类包含应用程序后面的业务逻辑，用函数和值来装饰范围.\n\n> 注意，您还可以通过 `$route`服务在路由定义它来将控制器绑定到DOM。一个常见的错误是在模板本身中使用`ng-controller`再次声明控制器。这将导致控制器连接和执行两次。\n\n如何通过 `$route`服务在路由中绑定控制器？？？？\n\n## 指令信息\n* 此指令创建新范围。\n* 此指令的执行优先级为500。\n\n## 用法\n作为元素：\n```\n<ng-controller\n  ng-controller=\"expression\">\n...\n</ng-controller>\n```\n作为属性：\n```\n<ANY\n  ng-controller=\"expression\">\n...\n</ANY>\n```\n## 参数\n参数|类型|详细信息\n-----|------|-------\nngController|表达式|使用当前`$controllerProvider`注册函数名称或当前作用域上的表达式计算到函数的名称。通过指定`ng-controller =“as propertyName”`，可以将控制器实例发布到scope属性中。`$controllerProvider.allowGlobals()`设置全局，不推荐，已经弃用。\n\n\n\nen：https://docs.angularjs.org/api/ng/directive/ngController\n","source":"_posts/2016-12-05.md","raw":"---\nlayout: post\ntitle: Angular ngController\ndate: 2016-12-05 10:06:43\ncomments: true\ntags:\n  - ngController\n  - Angular\n---\n# ngController\n\n本页介绍ngController，以及如何通过 `$route`服务在路由中绑定控制器？？？？。\n\n\n<!-- more -->\n\n## ngController\nngController指令将控制器綁定到视图。这是Angular如何支持模型 - 视图 - 控制器设计模式背后原理的一个关键点。\n\nAngular的MVC组件:\n* 模型(Model) - 模型是范围的属性;通过绑定访问作用域属性,作用域附加到DOM。\n* 视图(View) - 呈现到视图中的模板（具有数据绑定的HTML）。\n* 控制器(Controller) -ngController指令指定一个Controller类;该类包含应用程序后面的业务逻辑，用函数和值来装饰范围.\n\n> 注意，您还可以通过 `$route`服务在路由定义它来将控制器绑定到DOM。一个常见的错误是在模板本身中使用`ng-controller`再次声明控制器。这将导致控制器连接和执行两次。\n\n如何通过 `$route`服务在路由中绑定控制器？？？？\n\n## 指令信息\n* 此指令创建新范围。\n* 此指令的执行优先级为500。\n\n## 用法\n作为元素：\n```\n<ng-controller\n  ng-controller=\"expression\">\n...\n</ng-controller>\n```\n作为属性：\n```\n<ANY\n  ng-controller=\"expression\">\n...\n</ANY>\n```\n## 参数\n参数|类型|详细信息\n-----|------|-------\nngController|表达式|使用当前`$controllerProvider`注册函数名称或当前作用域上的表达式计算到函数的名称。通过指定`ng-controller =“as propertyName”`，可以将控制器实例发布到scope属性中。`$controllerProvider.allowGlobals()`设置全局，不推荐，已经弃用。\n\n\n\nen：https://docs.angularjs.org/api/ng/directive/ngController\n","slug":"2016-12-05","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqh4000un0c5l28vqsho","content":"<h1 id=\"ngController\"><a href=\"#ngController\" class=\"headerlink\" title=\"ngController\"></a>ngController</h1><p>本页介绍ngController，以及如何通过 <code>$route</code>服务在路由中绑定控制器？？？？。</p>\n<a id=\"more\"></a>\n<h2 id=\"ngController-1\"><a href=\"#ngController-1\" class=\"headerlink\" title=\"ngController\"></a>ngController</h2><p>ngController指令将控制器綁定到视图。这是Angular如何支持模型 - 视图 - 控制器设计模式背后原理的一个关键点。</p>\n<p>Angular的MVC组件:</p>\n<ul>\n<li>模型(Model) - 模型是范围的属性;通过绑定访问作用域属性,作用域附加到DOM。</li>\n<li>视图(View) - 呈现到视图中的模板（具有数据绑定的HTML）。</li>\n<li>控制器(Controller) -ngController指令指定一个Controller类;该类包含应用程序后面的业务逻辑，用函数和值来装饰范围.</li>\n</ul>\n<blockquote>\n<p>注意，您还可以通过 <code>$route</code>服务在路由定义它来将控制器绑定到DOM。一个常见的错误是在模板本身中使用<code>ng-controller</code>再次声明控制器。这将导致控制器连接和执行两次。</p>\n</blockquote>\n<p>如何通过 <code>$route</code>服务在路由中绑定控制器？？？？</p>\n<h2 id=\"指令信息\"><a href=\"#指令信息\" class=\"headerlink\" title=\"指令信息\"></a>指令信息</h2><ul>\n<li>此指令创建新范围。</li>\n<li>此指令的执行优先级为500。</li>\n</ul>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>作为元素：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-controller</span></span></div><div class=\"line\">  <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"expression\"</span>&gt;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-controller</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>作为属性：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ANY</span></span></div><div class=\"line\">  <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"expression\"</span>&gt;</div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ANY</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>详细信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ngController</td>\n<td>表达式</td>\n<td>使用当前<code>$controllerProvider</code>注册函数名称或当前作用域上的表达式计算到函数的名称。通过指定<code>ng-controller =“as propertyName”</code>，可以将控制器实例发布到scope属性中。<code>$controllerProvider.allowGlobals()</code>设置全局，不推荐，已经弃用。</td>\n</tr>\n</tbody>\n</table>\n<p>en：<a href=\"https://docs.angularjs.org/api/ng/directive/ngController\" target=\"_blank\" rel=\"external\">https://docs.angularjs.org/api/ng/directive/ngController</a></p>\n","excerpt":"<h1 id=\"ngController\"><a href=\"#ngController\" class=\"headerlink\" title=\"ngController\"></a>ngController</h1><p>本页介绍ngController，以及如何通过 <code>$route</code>服务在路由中绑定控制器？？？？。</p>","more":"<h2 id=\"ngController-1\"><a href=\"#ngController-1\" class=\"headerlink\" title=\"ngController\"></a>ngController</h2><p>ngController指令将控制器綁定到视图。这是Angular如何支持模型 - 视图 - 控制器设计模式背后原理的一个关键点。</p>\n<p>Angular的MVC组件:</p>\n<ul>\n<li>模型(Model) - 模型是范围的属性;通过绑定访问作用域属性,作用域附加到DOM。</li>\n<li>视图(View) - 呈现到视图中的模板（具有数据绑定的HTML）。</li>\n<li>控制器(Controller) -ngController指令指定一个Controller类;该类包含应用程序后面的业务逻辑，用函数和值来装饰范围.</li>\n</ul>\n<blockquote>\n<p>注意，您还可以通过 <code>$route</code>服务在路由定义它来将控制器绑定到DOM。一个常见的错误是在模板本身中使用<code>ng-controller</code>再次声明控制器。这将导致控制器连接和执行两次。</p>\n</blockquote>\n<p>如何通过 <code>$route</code>服务在路由中绑定控制器？？？？</p>\n<h2 id=\"指令信息\"><a href=\"#指令信息\" class=\"headerlink\" title=\"指令信息\"></a>指令信息</h2><ul>\n<li>此指令创建新范围。</li>\n<li>此指令的执行优先级为500。</li>\n</ul>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>作为元素：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-controller</span></div><div class=\"line\">  <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"expression\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ng-controller</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>作为属性：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ANY</span></div><div class=\"line\">  <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"expression\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ANY</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>详细信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ngController</td>\n<td>表达式</td>\n<td>使用当前<code>$controllerProvider</code>注册函数名称或当前作用域上的表达式计算到函数的名称。通过指定<code>ng-controller =“as propertyName”</code>，可以将控制器实例发布到scope属性中。<code>$controllerProvider.allowGlobals()</code>设置全局，不推荐，已经弃用。</td>\n</tr>\n</tbody>\n</table>\n<p>en：<a href=\"https://docs.angularjs.org/api/ng/directive/ngController\">https://docs.angularjs.org/api/ng/directive/ngController</a></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-12-07T06:11:32.912Z","updated":"2016-12-07T06:11:32.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciweliqh5000wn0c5yn0u4i1v","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"UI-Router for Angular 1","date":"2016-12-06T09:57:07.000Z","comments":1,"_content":"# AngularUI库提供的最有用的库之一：UI-ROUTER\n\n本页介绍UI-ROUTER。\n\n<!-- more -->\n## 关于\nUI-Router是在AngularJS中路由的规范标准。\n受到Angula路由器`$route`和[Ember路由器](https://guides.emberjs.com/v2.5.0/routing/)的影响，UI-Router已成为在Angular 1中路由非简单应用程序的标准选择。\n\n## 安装\n\n* NPM\n```\nnpm install --save angular-ui-router\n```\n* 命令行\n向项目中添加最新的预发布：`npm install --save angular-ui-router@next`\n向项目中添加特定版本：`npm install --save angular-ui-router@1.0.0-beta.1`\n\n* 在HTML中用`<script>`标签\n最新的预发布: `<script src=\"//unpkg.com/angular-ui-router/release/angular-ui-router.min.js\">`\n特定版本: `<script src=\"//unpkg.com/angular-ui-router@0.3.1/release/angular-ui-router.js\">`\n\n* bower\n```\nbower install angular-ui-router#0.3.1\n```\n\n## 使用\n将ui.router注入到应用中\n```\nangulat.module('app',['ui.router']);\n```\n和`angular`内置服务`ngRouter`不同，`ui-router`是基于状态工作的，不是简单的url,因此可以将其镶嵌在视图中。\n```\n<div ng-controller=\"DemoController\">\n  <div ui-view></div>\n</div>\n```\n* ng-view ==> ui-view\n* ui-view的内置路由和状态有关系，所以只需要关心应用处于那种状态。\n* 允许视图嵌套。\n\n\n用`.config`定义路由。将路由设置在 **$routerProvider** 上，而不是$stateProvider。\n```\n$stateProvider\n    .state('home', {\n        url: '/home',\n        template: require('./index.html'),\n    });\n```\n这一步给路由配置了一个home的状态，当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面。\n\n\n# 1.template,templateUrl,templateProvider\n\n视图设置模板的方式有三种：\n* template：一个html字符串 OR 返回HTML的函数\n* templateUrl：一个模板路径 OR 返回模板路径的函数\n* templateProvider： 一个返回HTML字符的函数\n\n例如：\n```\n$stateProvider\n  .state('app', {\n    url: '/home',\n    /*@ngInject*/\n    templateProvider: ($q) => {\n        let promise = $q((resolve) => {\n            require.ensure([], function() {\n                resolve(require('./index.html'));\n            });\n        });\n        return promise;\n    }\n});\n```\n\n# 2.controller\n  为视图关联控制器，如果没有视图则不会创建该控制器。\n\n\n# 3.resolve\n在angular-ui-router中resolve是一个对象：\n其中：\n* 键就是你要注入到控制器中依赖的名称。\n* 值就是待解析的这个factories。\n\n>如果传入的是一个字符串，angular-ui-router会和已经注册的服务进行匹配。\n>如果传入的是一个函数，angular-ui-router则会注册这个函数，函数返回值就是依赖。\n>如果传入的是一个promise，angular-ui-router会在控制器实例化之前解析，其值会被注册到控制器中。\n\n```\n$stateProvider\n    .state('home', {\n        url: '/home',\n        template: require('./index.html'),\n        controller: 'AppController',\n        controllerAs: 'ctrl',\n        resolve: {\n            /*@ngInject*/\n            load: ($q, $ocLazyLoad) => {\n                let appControllerPromise = $q((resolve) => {\n                    require.ensure([], () => {\n                        let module = require('./app.controller'); //babel6 export default\n                        $ocLazyLoad.load({\n                            name: module.name\n                        });\n                        resolve(module);\n                    });\n                });\n                return $q.all([appControllerPromise]);\n            }\n        }\n    });\n```\n\n# 4.url\n\n给应用程序的状态分配一个唯一URL。URL通过状态导航应用，而不是简单的通过URL导航。\n```\n$stateProvider\n    .state('home', {\n        url: '/home',\n        template: require('./index.html'),\n    });\n```\n当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面将其填充到ui-view指令处。\n\n\n###  4.1url参数\n```\n$stateProvider\n    .state('home', {\n        url: '/home/:indexId',\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n当用户访问到 `/home/1`，`$stateParams.indexId`会变成`1`，因为`$stateParams`为`{indexId:1}`。\n\n还可以用不同的语法：\n```\n$stateProvider\n    .state('home', {\n        url: '/home/{indexId}',\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n还可以用正则：\n```\n$stateProvider\n    .state('home', {\n        url: '/home/{indexId:[0-9a-fA-f]{6}}',//只能匹配十六进制的indexId\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n> 注意不能使用正则捕获数组。\n\n还可以在路由中指定查询参数：\n```\n$stateProvider\n    .state('home', {\n        url: '/home/inbox?sort=ascenging',\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n\n# 5.嵌套路由\n一个页面包含多个ui-view。\n例如：在home的视图中，点击show billing链接将it's billing! 加载到其下方。\n```\n$stateProvider\n    .state('home', {\n        url: '/home/:inbox',\n        template: `\n        <div>\n            <a ui-sref=\"home.billing\">show billing</a>\n            <div ui-view></div>\n        </div>`,\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    })\n    .state('home.billing', {\n        url: '/billing',\n        template: `<div> it's billing! </div>`\n    });\n```\n\n* /home/1 匹配第一个`/home/:inbox`路由状态\n* /home/1/billing 匹配第二个`home.billing`路由状态\n\n\n# 6.params\n# 7.views\nangular-ui-router的多命名视图。\n在一个独立的视图中可以设置多个要引用的视图：\n```\n<div>\n  <div ui-views=\"iface\"></div>\n  <div ui-views=\"billing\"></div>\n  <div ui-views=\"account\"></div>\n</div>\n```\n>设置views参数,template,templateUrl,templateProvider就会被忽略。\n```\n$stateProvider\n    .state('home', {\n      views:{\n      'iface':{  \n        template: require('./index.html'),\n        controller:($scope)=>{}\n        },\n      'billing':{  \n        template: require('./index.html'),\n        controller:($scope)=>{}\n        },\n      'account':{  \n        template: require('./index.html'),\n        controller:($scope)=>{}\n        }\n      }\n    });\n```\n\n# 8.abstract\n  抽象模板不能直接被激活，可以被字节点激活。\n\n```\n$stateProvider\n    .state('home', {\n        abstract:true, //父设置abstract属性：抽象模板\n        url: '/home',\n        template: `<div><div ui-view></div></div>`\n    })\n    .state('home.billing', {\n        url: '/billing',//子节点\n        template: `<div> it's billing! </div>`\n    }\n    .state('home.account', {\n        url: '/account',//子节点\n        template: `<div> it's account! </div>`\n    });\n```\n\n# 9.onEnter , onExit\n  视图进入，或者离开状态时触发的行为。\n\n# 10.data状态传递参数\n```\n$stateProvider.state('app', {\n    abstract: true,\n    /*@ngInject*/\n    templateProvider: ($q) => {\n        let promise = $q((resolve) => {\n            require.ensure([], function() {\n                resolve(require('./index.html'));\n            });\n        });\n        return promise;\n    },\n    controller: 'AppController',\n    controllerAs: 'ctrl',\n    resolve: {},\n    data : {\n        title : '首页'\n    }\n});\n\n```\n\n\nen：https://ui-router.github.io/ng1/\n","source":"_posts/2016-12-06.md","raw":"---\nlayout: post\ntitle: UI-Router for Angular 1\ndate: 2016-12-06 17:57:07\ncomments: true\ntags:\n  - ui-router\n  - Angular\n---\n# AngularUI库提供的最有用的库之一：UI-ROUTER\n\n本页介绍UI-ROUTER。\n\n<!-- more -->\n## 关于\nUI-Router是在AngularJS中路由的规范标准。\n受到Angula路由器`$route`和[Ember路由器](https://guides.emberjs.com/v2.5.0/routing/)的影响，UI-Router已成为在Angular 1中路由非简单应用程序的标准选择。\n\n## 安装\n\n* NPM\n```\nnpm install --save angular-ui-router\n```\n* 命令行\n向项目中添加最新的预发布：`npm install --save angular-ui-router@next`\n向项目中添加特定版本：`npm install --save angular-ui-router@1.0.0-beta.1`\n\n* 在HTML中用`<script>`标签\n最新的预发布: `<script src=\"//unpkg.com/angular-ui-router/release/angular-ui-router.min.js\">`\n特定版本: `<script src=\"//unpkg.com/angular-ui-router@0.3.1/release/angular-ui-router.js\">`\n\n* bower\n```\nbower install angular-ui-router#0.3.1\n```\n\n## 使用\n将ui.router注入到应用中\n```\nangulat.module('app',['ui.router']);\n```\n和`angular`内置服务`ngRouter`不同，`ui-router`是基于状态工作的，不是简单的url,因此可以将其镶嵌在视图中。\n```\n<div ng-controller=\"DemoController\">\n  <div ui-view></div>\n</div>\n```\n* ng-view ==> ui-view\n* ui-view的内置路由和状态有关系，所以只需要关心应用处于那种状态。\n* 允许视图嵌套。\n\n\n用`.config`定义路由。将路由设置在 **$routerProvider** 上，而不是$stateProvider。\n```\n$stateProvider\n    .state('home', {\n        url: '/home',\n        template: require('./index.html'),\n    });\n```\n这一步给路由配置了一个home的状态，当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面。\n\n\n# 1.template,templateUrl,templateProvider\n\n视图设置模板的方式有三种：\n* template：一个html字符串 OR 返回HTML的函数\n* templateUrl：一个模板路径 OR 返回模板路径的函数\n* templateProvider： 一个返回HTML字符的函数\n\n例如：\n```\n$stateProvider\n  .state('app', {\n    url: '/home',\n    /*@ngInject*/\n    templateProvider: ($q) => {\n        let promise = $q((resolve) => {\n            require.ensure([], function() {\n                resolve(require('./index.html'));\n            });\n        });\n        return promise;\n    }\n});\n```\n\n# 2.controller\n  为视图关联控制器，如果没有视图则不会创建该控制器。\n\n\n# 3.resolve\n在angular-ui-router中resolve是一个对象：\n其中：\n* 键就是你要注入到控制器中依赖的名称。\n* 值就是待解析的这个factories。\n\n>如果传入的是一个字符串，angular-ui-router会和已经注册的服务进行匹配。\n>如果传入的是一个函数，angular-ui-router则会注册这个函数，函数返回值就是依赖。\n>如果传入的是一个promise，angular-ui-router会在控制器实例化之前解析，其值会被注册到控制器中。\n\n```\n$stateProvider\n    .state('home', {\n        url: '/home',\n        template: require('./index.html'),\n        controller: 'AppController',\n        controllerAs: 'ctrl',\n        resolve: {\n            /*@ngInject*/\n            load: ($q, $ocLazyLoad) => {\n                let appControllerPromise = $q((resolve) => {\n                    require.ensure([], () => {\n                        let module = require('./app.controller'); //babel6 export default\n                        $ocLazyLoad.load({\n                            name: module.name\n                        });\n                        resolve(module);\n                    });\n                });\n                return $q.all([appControllerPromise]);\n            }\n        }\n    });\n```\n\n# 4.url\n\n给应用程序的状态分配一个唯一URL。URL通过状态导航应用，而不是简单的通过URL导航。\n```\n$stateProvider\n    .state('home', {\n        url: '/home',\n        template: require('./index.html'),\n    });\n```\n当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面将其填充到ui-view指令处。\n\n\n###  4.1url参数\n```\n$stateProvider\n    .state('home', {\n        url: '/home/:indexId',\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n当用户访问到 `/home/1`，`$stateParams.indexId`会变成`1`，因为`$stateParams`为`{indexId:1}`。\n\n还可以用不同的语法：\n```\n$stateProvider\n    .state('home', {\n        url: '/home/{indexId}',\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n还可以用正则：\n```\n$stateProvider\n    .state('home', {\n        url: '/home/{indexId:[0-9a-fA-f]{6}}',//只能匹配十六进制的indexId\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n> 注意不能使用正则捕获数组。\n\n还可以在路由中指定查询参数：\n```\n$stateProvider\n    .state('home', {\n        url: '/home/inbox?sort=ascenging',\n        template: require('./index.html'),\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    });\n```\n\n# 5.嵌套路由\n一个页面包含多个ui-view。\n例如：在home的视图中，点击show billing链接将it's billing! 加载到其下方。\n```\n$stateProvider\n    .state('home', {\n        url: '/home/:inbox',\n        template: `\n        <div>\n            <a ui-sref=\"home.billing\">show billing</a>\n            <div ui-view></div>\n        </div>`,\n        controller:($scope,$stateParams)=>{\n            $scope.indexId=$stateParams.indexId;\n        }\n    })\n    .state('home.billing', {\n        url: '/billing',\n        template: `<div> it's billing! </div>`\n    });\n```\n\n* /home/1 匹配第一个`/home/:inbox`路由状态\n* /home/1/billing 匹配第二个`home.billing`路由状态\n\n\n# 6.params\n# 7.views\nangular-ui-router的多命名视图。\n在一个独立的视图中可以设置多个要引用的视图：\n```\n<div>\n  <div ui-views=\"iface\"></div>\n  <div ui-views=\"billing\"></div>\n  <div ui-views=\"account\"></div>\n</div>\n```\n>设置views参数,template,templateUrl,templateProvider就会被忽略。\n```\n$stateProvider\n    .state('home', {\n      views:{\n      'iface':{  \n        template: require('./index.html'),\n        controller:($scope)=>{}\n        },\n      'billing':{  \n        template: require('./index.html'),\n        controller:($scope)=>{}\n        },\n      'account':{  \n        template: require('./index.html'),\n        controller:($scope)=>{}\n        }\n      }\n    });\n```\n\n# 8.abstract\n  抽象模板不能直接被激活，可以被字节点激活。\n\n```\n$stateProvider\n    .state('home', {\n        abstract:true, //父设置abstract属性：抽象模板\n        url: '/home',\n        template: `<div><div ui-view></div></div>`\n    })\n    .state('home.billing', {\n        url: '/billing',//子节点\n        template: `<div> it's billing! </div>`\n    }\n    .state('home.account', {\n        url: '/account',//子节点\n        template: `<div> it's account! </div>`\n    });\n```\n\n# 9.onEnter , onExit\n  视图进入，或者离开状态时触发的行为。\n\n# 10.data状态传递参数\n```\n$stateProvider.state('app', {\n    abstract: true,\n    /*@ngInject*/\n    templateProvider: ($q) => {\n        let promise = $q((resolve) => {\n            require.ensure([], function() {\n                resolve(require('./index.html'));\n            });\n        });\n        return promise;\n    },\n    controller: 'AppController',\n    controllerAs: 'ctrl',\n    resolve: {},\n    data : {\n        title : '首页'\n    }\n});\n\n```\n\n\nen：https://ui-router.github.io/ng1/\n","slug":"2016-12-06","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqh6000xn0c5yj747xjh","content":"<h1 id=\"AngularUI库提供的最有用的库之一：UI-ROUTER\"><a href=\"#AngularUI库提供的最有用的库之一：UI-ROUTER\" class=\"headerlink\" title=\"AngularUI库提供的最有用的库之一：UI-ROUTER\"></a>AngularUI库提供的最有用的库之一：UI-ROUTER</h1><p>本页介绍UI-ROUTER。</p>\n<a id=\"more\"></a>\n<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>UI-Router是在AngularJS中路由的规范标准。<br>受到Angula路由器<code>$route</code>和<a href=\"https://guides.emberjs.com/v2.5.0/routing/\" target=\"_blank\" rel=\"external\">Ember路由器</a>的影响，UI-Router已成为在Angular 1中路由非简单应用程序的标准选择。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>NPM</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save angular-ui-router</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>命令行<br>向项目中添加最新的预发布：<code>npm install --save angular-ui-router@next</code><br>向项目中添加特定版本：<code>npm install --save angular-ui-router@1.0.0-beta.1</code></p>\n</li>\n<li><p>在HTML中用<code>&lt;script&gt;</code>标签<br>最新的预发布: <code>&lt;script src=&quot;//unpkg.com/angular-ui-router/release/angular-ui-router.min.js&quot;&gt;</code><br>特定版本: <code>&lt;script src=&quot;//unpkg.com/angular-ui-router@0.3.1/release/angular-ui-router.js&quot;&gt;</code></p>\n</li>\n<li><p>bower</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">bower</span> <span class=\"selector-tag\">install</span> <span class=\"selector-tag\">angular-ui-router</span><span class=\"selector-id\">#0</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>将ui.router注入到应用中<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">angulat.<span class=\"keyword\">module</span>(<span class=\"string\">'app'</span>,[<span class=\"string\">'ui.router'</span>]);</div></pre></td></tr></table></figure></p>\n<p>和<code>angular</code>内置服务<code>ngRouter</code>不同，<code>ui-router</code>是基于状态工作的，不是简单的url,因此可以将其镶嵌在视图中。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"DemoController\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>ng-view ==&gt; ui-view</li>\n<li>ui-view的内置路由和状态有关系，所以只需要关心应用处于那种状态。</li>\n<li>允许视图嵌套。</li>\n</ul>\n<p>用<code>.config</code>定义路由。将路由设置在 <strong>$routerProvider</strong> 上，而不是$stateProvider。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>这一步给路由配置了一个home的状态，当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面。</p>\n<h1 id=\"1-template-templateUrl-templateProvider\"><a href=\"#1-template-templateUrl-templateProvider\" class=\"headerlink\" title=\"1.template,templateUrl,templateProvider\"></a>1.template,templateUrl,templateProvider</h1><p>视图设置模板的方式有三种：</p>\n<ul>\n<li>template：一个html字符串 OR 返回HTML的函数</li>\n<li>templateUrl：一个模板路径 OR 返回模板路径的函数</li>\n<li>templateProvider： 一个返回HTML字符的函数</li>\n</ul>\n<p>例如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">  .state(<span class=\"string\">'app'</span>, &#123;</div><div class=\"line\">    url: <span class=\"string\">'/home'</span>,</div><div class=\"line\">    <span class=\"comment\">/*<span class=\"doctag\">@ngInject</span>*/</span></div><div class=\"line\">    templateProvider: ($q) =&gt; &#123;</div><div class=\"line\">        let promise = $q((resolve) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                resolve(<span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> promise;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-controller\"><a href=\"#2-controller\" class=\"headerlink\" title=\"2.controller\"></a>2.controller</h1><p>  为视图关联控制器，如果没有视图则不会创建该控制器。</p>\n<h1 id=\"3-resolve\"><a href=\"#3-resolve\" class=\"headerlink\" title=\"3.resolve\"></a>3.resolve</h1><p>在angular-ui-router中resolve是一个对象：<br>其中：</p>\n<ul>\n<li>键就是你要注入到控制器中依赖的名称。</li>\n<li>值就是待解析的这个factories。</li>\n</ul>\n<blockquote>\n<p>如果传入的是一个字符串，angular-ui-router会和已经注册的服务进行匹配。<br>如果传入的是一个函数，angular-ui-router则会注册这个函数，函数返回值就是依赖。<br>如果传入的是一个promise，angular-ui-router会在控制器实例化之前解析，其值会被注册到控制器中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">    .state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">        url: <span class=\"string\">'/home'</span>,</div><div class=\"line\">        template: <span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller: <span class=\"string\">'AppController'</span>,</div><div class=\"line\">        controllerAs: <span class=\"string\">'ctrl'</span>,</div><div class=\"line\">        resolve: &#123;</div><div class=\"line\">            <span class=\"comment\">/*<span class=\"doctag\">@ngInject</span>*/</span></div><div class=\"line\">            load: ($q, $ocLazyLoad) =&gt; &#123;</div><div class=\"line\">                let appControllerPromise = $q((resolve) =&gt; &#123;</div><div class=\"line\">                    <span class=\"keyword\">require</span>.ensure([], () =&gt; &#123;</div><div class=\"line\">                        let module = <span class=\"keyword\">require</span>(<span class=\"string\">'./app.controller'</span>); <span class=\"comment\">//babel6 export default</span></div><div class=\"line\">                        $ocLazyLoad.load(&#123;</div><div class=\"line\">                            name: module.name</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                        resolve(module);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span> $q.all([appControllerPromise]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"4-url\"><a href=\"#4-url\" class=\"headerlink\" title=\"4.url\"></a>4.url</h1><p>给应用程序的状态分配一个唯一URL。URL通过状态导航应用，而不是简单的通过URL导航。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面将其填充到ui-view指令处。</p>\n<h3 id=\"4-1url参数\"><a href=\"#4-1url参数\" class=\"headerlink\" title=\"4.1url参数\"></a>4.1url参数</h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/:indexId',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>当用户访问到 <code>/home/1</code>，<code>$stateParams.indexId</code>会变成<code>1</code>，因为<code>$stateParams</code>为<code>{indexId:1}</code>。</p>\n<p>还可以用不同的语法：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/&#123;indexId&#125;',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>还可以用正则：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">    .state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">        url: <span class=\"string\">'/home/&#123;indexId:[0-9a-fA-f]&#123;6&#125;&#125;'</span>,<span class=\"comment\">//只能匹配十六进制的indexId</span></div><div class=\"line\">        template: <span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:($scope,$stateParams)=&gt;&#123;</div><div class=\"line\">            $scope.indexId=$stateParams.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意不能使用正则捕获数组。</p>\n</blockquote>\n<p>还可以在路由中指定查询参数：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/inbox?sort=ascenging',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-嵌套路由\"><a href=\"#5-嵌套路由\" class=\"headerlink\" title=\"5.嵌套路由\"></a>5.嵌套路由</h1><p>一个页面包含多个ui-view。<br>例如：在home的视图中，点击show billing链接将it’s billing! 加载到其下方。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/:inbox',</div><div class=\"line\">        template: `</div><div class=\"line\">        <span class=\"variable\">&lt;div&gt;</span></div><div class=\"line\">            <span class=\"variable\">&lt;a ui-sref=\"home.billing\"&gt;</span>show billing&lt;/a&gt;</div><div class=\"line\">            <span class=\"variable\">&lt;div ui-view&gt;</span>&lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;`,</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .<span class=\"keyword\">state</span>('home.billing', &#123;</div><div class=\"line\">        url: '/billing',</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span> it's billing! &lt;/div&gt;`</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>/home/1 匹配第一个<code>/home/:inbox</code>路由状态</li>\n<li>/home/1/billing 匹配第二个<code>home.billing</code>路由状态</li>\n</ul>\n<h1 id=\"6-params\"><a href=\"#6-params\" class=\"headerlink\" title=\"6.params\"></a>6.params</h1><h1 id=\"7-views\"><a href=\"#7-views\" class=\"headerlink\" title=\"7.views\"></a>7.views</h1><p>angular-ui-router的多命名视图。<br>在一个独立的视图中可以设置多个要引用的视图：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-views</span>=<span class=\"string\">\"iface\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-views</span>=<span class=\"string\">\"billing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-views</span>=<span class=\"string\">\"account\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>设置views参数,template,templateUrl,templateProvider就会被忽略。<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">    .state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">      views:&#123;</div><div class=\"line\">      <span class=\"string\">'iface'</span>:&#123;  </div><div class=\"line\">        template: <span class=\"built_in\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:<span class=\"function\"><span class=\"params\">($scope)</span>=&gt;</span>&#123;&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      <span class=\"string\">'billing'</span>:&#123;  </div><div class=\"line\">        template: <span class=\"built_in\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:<span class=\"function\"><span class=\"params\">($scope)</span>=&gt;</span>&#123;&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      <span class=\"string\">'account'</span>:&#123;  </div><div class=\"line\">        template: <span class=\"built_in\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:<span class=\"function\"><span class=\"params\">($scope)</span>=&gt;</span>&#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"8-abstract\"><a href=\"#8-abstract\" class=\"headerlink\" title=\"8.abstract\"></a>8.abstract</h1><p>  抽象模板不能直接被激活，可以被字节点激活。</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        abstract:true, //父设置abstract属性：抽象模板</div><div class=\"line\">        url: '/home',</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span><span class=\"variable\">&lt;div ui-view&gt;</span>&lt;/div&gt;&lt;/div&gt;`</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .<span class=\"keyword\">state</span>('home.billing', &#123;</div><div class=\"line\">        url: '/billing',//子节点</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span> it's billing! &lt;/div&gt;`</div><div class=\"line\">    &#125;</div><div class=\"line\">    .<span class=\"keyword\">state</span>('home.account', &#123;</div><div class=\"line\">        url: '/account',//子节点</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span> it's account! &lt;/div&gt;`</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"9-onEnter-onExit\"><a href=\"#9-onEnter-onExit\" class=\"headerlink\" title=\"9.onEnter , onExit\"></a>9.onEnter , onExit</h1><p>  视图进入，或者离开状态时触发的行为。</p>\n<h1 id=\"10-data状态传递参数\"><a href=\"#10-data状态传递参数\" class=\"headerlink\" title=\"10.data状态传递参数\"></a>10.data状态传递参数</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider.state(<span class=\"string\">'app'</span>, &#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span>: <span class=\"keyword\">true</span>,</div><div class=\"line\">    <span class=\"comment\">/*<span class=\"doctag\">@ngInject</span>*/</span></div><div class=\"line\">    templateProvider: ($q) =&gt; &#123;</div><div class=\"line\">        let promise = $q((resolve) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                resolve(<span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> promise;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller: <span class=\"string\">'AppController'</span>,</div><div class=\"line\">    controllerAs: <span class=\"string\">'ctrl'</span>,</div><div class=\"line\">    resolve: &#123;&#125;,</div><div class=\"line\">    data : &#123;</div><div class=\"line\">        title : <span class=\"string\">'首页'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>en：<a href=\"https://ui-router.github.io/ng1/\" target=\"_blank\" rel=\"external\">https://ui-router.github.io/ng1/</a></p>\n","excerpt":"<h1 id=\"AngularUI库提供的最有用的库之一：UI-ROUTER\"><a href=\"#AngularUI库提供的最有用的库之一：UI-ROUTER\" class=\"headerlink\" title=\"AngularUI库提供的最有用的库之一：UI-ROUTER\"></a>AngularUI库提供的最有用的库之一：UI-ROUTER</h1><p>本页介绍UI-ROUTER。</p>","more":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>UI-Router是在AngularJS中路由的规范标准。<br>受到Angula路由器<code>$route</code>和<a href=\"https://guides.emberjs.com/v2.5.0/routing/\">Ember路由器</a>的影响，UI-Router已成为在Angular 1中路由非简单应用程序的标准选择。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>NPM</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save angular-ui-router</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>命令行<br>向项目中添加最新的预发布：<code>npm install --save angular-ui-router@next</code><br>向项目中添加特定版本：<code>npm install --save angular-ui-router@1.0.0-beta.1</code></p>\n</li>\n<li><p>在HTML中用<code>&lt;script&gt;</code>标签<br>最新的预发布: <code>&lt;script src=&quot;//unpkg.com/angular-ui-router/release/angular-ui-router.min.js&quot;&gt;</code><br>特定版本: <code>&lt;script src=&quot;//unpkg.com/angular-ui-router@0.3.1/release/angular-ui-router.js&quot;&gt;</code></p>\n</li>\n<li><p>bower</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">bower</span> <span class=\"selector-tag\">install</span> <span class=\"selector-tag\">angular-ui-router</span><span class=\"selector-id\">#0</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>将ui.router注入到应用中<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">angulat.<span class=\"keyword\">module</span>(<span class=\"string\">'app'</span>,[<span class=\"string\">'ui.router'</span>]);</div></pre></td></tr></table></figure></p>\n<p>和<code>angular</code>内置服务<code>ngRouter</code>不同，<code>ui-router</code>是基于状态工作的，不是简单的url,因此可以将其镶嵌在视图中。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"DemoController\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>ng-view ==&gt; ui-view</li>\n<li>ui-view的内置路由和状态有关系，所以只需要关心应用处于那种状态。</li>\n<li>允许视图嵌套。</li>\n</ul>\n<p>用<code>.config</code>定义路由。将路由设置在 <strong>$routerProvider</strong> 上，而不是$stateProvider。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>这一步给路由配置了一个home的状态，当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面。</p>\n<h1 id=\"1-template-templateUrl-templateProvider\"><a href=\"#1-template-templateUrl-templateProvider\" class=\"headerlink\" title=\"1.template,templateUrl,templateProvider\"></a>1.template,templateUrl,templateProvider</h1><p>视图设置模板的方式有三种：</p>\n<ul>\n<li>template：一个html字符串 OR 返回HTML的函数</li>\n<li>templateUrl：一个模板路径 OR 返回模板路径的函数</li>\n<li>templateProvider： 一个返回HTML字符的函数</li>\n</ul>\n<p>例如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">  .state(<span class=\"string\">'app'</span>, &#123;</div><div class=\"line\">    url: <span class=\"string\">'/home'</span>,</div><div class=\"line\">    <span class=\"comment\">/*<span class=\"doctag\">@ngInject</span>*/</span></div><div class=\"line\">    templateProvider: ($q) =&gt; &#123;</div><div class=\"line\">        let promise = $q((resolve) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                resolve(<span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> promise;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"2-controller\"><a href=\"#2-controller\" class=\"headerlink\" title=\"2.controller\"></a>2.controller</h1><p>  为视图关联控制器，如果没有视图则不会创建该控制器。</p>\n<h1 id=\"3-resolve\"><a href=\"#3-resolve\" class=\"headerlink\" title=\"3.resolve\"></a>3.resolve</h1><p>在angular-ui-router中resolve是一个对象：<br>其中：</p>\n<ul>\n<li>键就是你要注入到控制器中依赖的名称。</li>\n<li>值就是待解析的这个factories。</li>\n</ul>\n<blockquote>\n<p>如果传入的是一个字符串，angular-ui-router会和已经注册的服务进行匹配。<br>如果传入的是一个函数，angular-ui-router则会注册这个函数，函数返回值就是依赖。<br>如果传入的是一个promise，angular-ui-router会在控制器实例化之前解析，其值会被注册到控制器中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">    .state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">        url: <span class=\"string\">'/home'</span>,</div><div class=\"line\">        template: <span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller: <span class=\"string\">'AppController'</span>,</div><div class=\"line\">        controllerAs: <span class=\"string\">'ctrl'</span>,</div><div class=\"line\">        resolve: &#123;</div><div class=\"line\">            <span class=\"comment\">/*<span class=\"doctag\">@ngInject</span>*/</span></div><div class=\"line\">            load: ($q, $ocLazyLoad) =&gt; &#123;</div><div class=\"line\">                let appControllerPromise = $q((resolve) =&gt; &#123;</div><div class=\"line\">                    <span class=\"keyword\">require</span>.ensure([], () =&gt; &#123;</div><div class=\"line\">                        let module = <span class=\"keyword\">require</span>(<span class=\"string\">'./app.controller'</span>); <span class=\"comment\">//babel6 export default</span></div><div class=\"line\">                        $ocLazyLoad.load(&#123;</div><div class=\"line\">                            name: module.name</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                        resolve(module);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;);</div><div class=\"line\">                <span class=\"keyword\">return</span> $q.all([appControllerPromise]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"4-url\"><a href=\"#4-url\" class=\"headerlink\" title=\"4.url\"></a>4.url</h1><p>给应用程序的状态分配一个唯一URL。URL通过状态导航应用，而不是简单的通过URL导航。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>当用户导航到/home时，应用程序会处于home状态，进而加载template中配置的index页面将其填充到ui-view指令处。</p>\n<h3 id=\"4-1url参数\"><a href=\"#4-1url参数\" class=\"headerlink\" title=\"4.1url参数\"></a>4.1url参数</h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/:indexId',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<p>当用户访问到 <code>/home/1</code>，<code>$stateParams.indexId</code>会变成<code>1</code>，因为<code>$stateParams</code>为<code>{indexId:1}</code>。</p>\n<p>还可以用不同的语法：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/&#123;indexId&#125;',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<p>还可以用正则：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">    .state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">        url: <span class=\"string\">'/home/&#123;indexId:[0-9a-fA-f]&#123;6&#125;&#125;'</span>,<span class=\"comment\">//只能匹配十六进制的indexId</span></div><div class=\"line\">        template: <span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:($scope,$stateParams)=&gt;&#123;</div><div class=\"line\">            $scope.indexId=$stateParams.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意不能使用正则捕获数组。</p>\n</blockquote>\n<p>还可以在路由中指定查询参数：<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/inbox?sort=ascenging',</div><div class=\"line\">        template: require('./index.html'),</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-嵌套路由\"><a href=\"#5-嵌套路由\" class=\"headerlink\" title=\"5.嵌套路由\"></a>5.嵌套路由</h1><p>一个页面包含多个ui-view。<br>例如：在home的视图中，点击show billing链接将it’s billing! 加载到其下方。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        url: '/home/:inbox',</div><div class=\"line\">        template: `</div><div class=\"line\">        <span class=\"variable\">&lt;div&gt;</span></div><div class=\"line\">            <span class=\"variable\">&lt;a ui-sref=\"home.billing\"&gt;</span>show billing&lt;/a&gt;</div><div class=\"line\">            <span class=\"variable\">&lt;div ui-view&gt;</span>&lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;`,</div><div class=\"line\">        controller:(<span class=\"variable\">$scope</span>,<span class=\"variable\">$stateParams</span>)=&gt;&#123;</div><div class=\"line\">            <span class=\"variable\">$scope</span>.indexId=<span class=\"variable\">$stateParams</span>.indexId;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .<span class=\"keyword\">state</span>('home.billing', &#123;</div><div class=\"line\">        url: '/billing',</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span> it's billing! &lt;/div&gt;`</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>/home/1 匹配第一个<code>/home/:inbox</code>路由状态</li>\n<li>/home/1/billing 匹配第二个<code>home.billing</code>路由状态</li>\n</ul>\n<h1 id=\"6-params\"><a href=\"#6-params\" class=\"headerlink\" title=\"6.params\"></a>6.params</h1><h1 id=\"7-views\"><a href=\"#7-views\" class=\"headerlink\" title=\"7.views\"></a>7.views</h1><p>angular-ui-router的多命名视图。<br>在一个独立的视图中可以设置多个要引用的视图：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-views</span>=<span class=\"string\">\"iface\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-views</span>=<span class=\"string\">\"billing\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ui-views</span>=<span class=\"string\">\"account\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>设置views参数,template,templateUrl,templateProvider就会被忽略。<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider</div><div class=\"line\">    .state(<span class=\"string\">'home'</span>, &#123;</div><div class=\"line\">      views:&#123;</div><div class=\"line\">      <span class=\"string\">'iface'</span>:&#123;  </div><div class=\"line\">        template: <span class=\"built_in\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:<span class=\"function\"><span class=\"params\">($scope)</span>=&gt;</span>&#123;&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      <span class=\"string\">'billing'</span>:&#123;  </div><div class=\"line\">        template: <span class=\"built_in\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:<span class=\"function\"><span class=\"params\">($scope)</span>=&gt;</span>&#123;&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      <span class=\"string\">'account'</span>:&#123;  </div><div class=\"line\">        template: <span class=\"built_in\">require</span>(<span class=\"string\">'./index.html'</span>),</div><div class=\"line\">        controller:<span class=\"function\"><span class=\"params\">($scope)</span>=&gt;</span>&#123;&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h1 id=\"8-abstract\"><a href=\"#8-abstract\" class=\"headerlink\" title=\"8.abstract\"></a>8.abstract</h1><p>  抽象模板不能直接被激活，可以被字节点激活。</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$stateProvider</span></div><div class=\"line\">    .<span class=\"keyword\">state</span>('home', &#123;</div><div class=\"line\">        abstract:true, //父设置abstract属性：抽象模板</div><div class=\"line\">        url: '/home',</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span><span class=\"variable\">&lt;div ui-view&gt;</span>&lt;/div&gt;&lt;/div&gt;`</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .<span class=\"keyword\">state</span>('home.billing', &#123;</div><div class=\"line\">        url: '/billing',//子节点</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span> it's billing! &lt;/div&gt;`</div><div class=\"line\">    &#125;</div><div class=\"line\">    .<span class=\"keyword\">state</span>('home.account', &#123;</div><div class=\"line\">        url: '/account',//子节点</div><div class=\"line\">        template: `<span class=\"variable\">&lt;div&gt;</span> it's account! &lt;/div&gt;`</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"9-onEnter-onExit\"><a href=\"#9-onEnter-onExit\" class=\"headerlink\" title=\"9.onEnter , onExit\"></a>9.onEnter , onExit</h1><p>  视图进入，或者离开状态时触发的行为。</p>\n<h1 id=\"10-data状态传递参数\"><a href=\"#10-data状态传递参数\" class=\"headerlink\" title=\"10.data状态传递参数\"></a>10.data状态传递参数</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider.state(<span class=\"string\">'app'</span>, &#123;</div><div class=\"line\">    <span class=\"keyword\">abstract</span>: <span class=\"keyword\">true</span>,</div><div class=\"line\">    <span class=\"comment\">/*<span class=\"doctag\">@ngInject</span>*/</span></div><div class=\"line\">    templateProvider: ($q) =&gt; &#123;</div><div class=\"line\">        let promise = $q((resolve) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">require</span>.ensure([], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                resolve(<span class=\"keyword\">require</span>(<span class=\"string\">'./index.html'</span>));</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> promise;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller: <span class=\"string\">'AppController'</span>,</div><div class=\"line\">    controllerAs: <span class=\"string\">'ctrl'</span>,</div><div class=\"line\">    resolve: &#123;&#125;,</div><div class=\"line\">    data : &#123;</div><div class=\"line\">        title : <span class=\"string\">'首页'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>en：<a href=\"https://ui-router.github.io/ng1/\">https://ui-router.github.io/ng1/</a></p>"},{"layout":"post","title":"特效展示","date":"2016-02-17T00:55:00.000Z","comments":1,"_content":"\n<!-- more -->\n\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","source":"_posts/hello-world.html","raw":"---\nlayout: post\ntitle:  特效展示\ndate: 2016-02-17 08:55\ncomments: true\ntags:\n- HTML5\n---\n\n<!-- more -->\n\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","slug":"hello-world","published":1,"updated":"2016-12-07T06:18:27.536Z","photos":[],"link":"","_id":"ciweliqh7000zn0c5kc5k610r","content":"\n<a id=\"more\"></a>\n\n<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>\n","excerpt":"","more":"<!doctype html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>无标题文档</title>\n</head>\n<style>\nbody {\n    padding:0;\n    margin:0;\n    overflow:hidden;\n}\n\ncanvas {\n    padding:0;\n    margin:0;\n    height: 600px;\n    width: 1000px;\n}\ndiv.btnbg {\n    position:fixed;\n    left:0;\n    top:0;\n}\n</style>\n<body>\n<canvas id=\"sakura\"></canvas>\n<div class=\"btnbg\">\n</div>\n\n<!-- sakura shader -->\n<script id=\"sakura_point_vsh\" type=\"x-shader/x_vertex\">\nuniform mat4 uProjection;\nuniform mat4 uModelview;\nuniform vec3 uResolution;\nuniform vec3 uOffset;\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nattribute vec3 aPosition;\nattribute vec3 aEuler;\nattribute vec2 aMisc; //x:size, y:fade\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nvoid main(void) {\n    // Projection is based on vertical angle\n    vec4 pos = uModelview * vec4(aPosition + uOffset, 1.0);\n    gl_Position = uProjection * pos;\n    gl_PointSize = aMisc.x * uProjection[1][1] / -pos.z * uResolution.y * 0.5;\n\n    pposition = pos.xyz;\n    psize = aMisc.x;\n    pdist = length(pos.xyz);\n    palpha = smoothstep(0.0, 1.0, (pdist - 0.1) / uFade.z);\n\n    vec3 elrsn = sin(aEuler);\n    vec3 elrcs = cos(aEuler);\n    mat3 rotx = mat3(\n        1.0, 0.0, 0.0,\n        0.0, elrcs.x, elrsn.x,\n        0.0, -elrsn.x, elrcs.x\n    );\n    mat3 roty = mat3(\n        elrcs.y, 0.0, -elrsn.y,\n        0.0, 1.0, 0.0,\n        elrsn.y, 0.0, elrcs.y\n    );\n    mat3 rotz = mat3(\n        elrcs.z, elrsn.z, 0.0,\n        -elrsn.z, elrcs.z, 0.0,\n        0.0, 0.0, 1.0\n    );\n    mat3 rotmat = rotx * roty * rotz;\n    normal = rotmat[2];\n\n    mat3 trrotm = mat3(\n        rotmat[0][0], rotmat[1][0], rotmat[2][0],\n        rotmat[0][1], rotmat[1][1], rotmat[2][1],\n        rotmat[0][2], rotmat[1][2], rotmat[2][2]\n    );\n    normX = trrotm[0];\n    normY = trrotm[1];\n    normZ = trrotm[2];\n\n    const vec3 lit = vec3(0.6917144638660746, 0.6917144638660746, -0.20751433915982237);\n\n    float tmpdfs = dot(lit, normal);\n    if(tmpdfs < 0.0) {\n        normal = -normal;\n        tmpdfs = dot(lit, normal);\n    }\n    diffuse = 0.4 + tmpdfs;\n\n    vec3 eyev = normalize(-pos.xyz);\n    if(dot(eyev, normal) > 0.0) {\n        vec3 hv = normalize(eyev + lit);\n        specular = pow(max(dot(hv, normal), 0.0), 20.0);\n    }\n    else {\n        specular = 0.0;\n    }\n\n    rstop = clamp((abs(pdist - uDOF.x) - uDOF.y) / uDOF.z, 0.0, 1.0);\n    rstop = pow(rstop, 0.5);\n    //-0.69315 = ln(0.5)\n    distancefade = min(1.0, exp((uFade.x - pdist) * 0.69315 / uFade.y));\n}\n</script>\n<script id=\"sakura_point_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec3 uDOF;  //x:focus distance, y:focus radius, z:max radius\nuniform vec3 uFade; //x:start distance, y:half distance, z:near fade start\n\nconst vec3 fadeCol = vec3(0.08, 0.03, 0.06);\n\nvarying vec3 pposition;\nvarying float psize;\nvarying float palpha;\nvarying float pdist;\n\n//varying mat3 rotMat;\nvarying vec3 normX;\nvarying vec3 normY;\nvarying vec3 normZ;\nvarying vec3 normal;\n\nvarying float diffuse;\nvarying float specular;\nvarying float rstop;\nvarying float distancefade;\n\nfloat ellipse(vec2 p, vec2 o, vec2 r) {\n    vec2 lp = (p - o) / r;\n    return length(lp) - 1.0;\n}\n\nvoid main(void) {\n    vec3 p = vec3(gl_PointCoord - vec2(0.5, 0.5), 0.0) * 2.0;\n    vec3 d = vec3(0.0, 0.0, -1.0);\n    float nd = normZ.z; //dot(-normZ, d);\n    if(abs(nd) < 0.0001) discard;\n\n    float np = dot(normZ, p);\n    vec3 tp = p + d * np / nd;\n    vec2 coord = vec2(dot(normX, tp), dot(normY, tp));\n\n    //angle = 15 degree\n    const float flwrsn = 0.258819045102521;\n    const float flwrcs = 0.965925826289068;\n    mat2 flwrm = mat2(flwrcs, -flwrsn, flwrsn, flwrcs);\n    vec2 flwrp = vec2(abs(coord.x), coord.y) * flwrm;\n\n    float r;\n    if(flwrp.x < 0.0) {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.36, 0.96) * 0.5);\n    }\n    else {\n        r = ellipse(flwrp, vec2(0.065, 0.024) * 0.5, vec2(0.58, 0.96) * 0.5);\n    }\n\n    if(r > rstop) discard;\n\n    vec3 col = mix(vec3(1.0, 0.8, 0.75), vec3(1.0, 0.9, 0.87), r);\n    float grady = mix(0.0, 1.0, pow(coord.y * 0.5 + 0.5, 0.35));\n    col *= vec3(1.0, grady, grady);\n    col *= mix(0.8, 1.0, pow(abs(coord.x), 0.3));\n    col = col * diffuse + specular;\n\n    col = mix(fadeCol, col, distancefade);\n\n    float alpha = (rstop > 0.001)? (0.5 - r / (rstop * 2.0)) : 1.0;\n    alpha = smoothstep(0.0, 1.0, alpha) * palpha;\n\n    gl_FragColor = vec4(col * 0.5, alpha);\n}\n</script>\n<!-- effects -->\n<script id=\"fx_common_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"bg_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\n\nuniform vec2 uTimes;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec3 col;\n    float c;\n    vec2 tmpv = texCoord * vec2(0.8, 1.0) - vec2(0.95, 1.0);\n    c = exp(-pow(length(tmpv) * 1.8, 2.0));\n    col = mix(vec3(0.02, 0.0, 0.03), vec3(0.96, 0.98, 1.0) * 1.5, c);\n    gl_FragColor = vec4(col * 0.5, 1.0);\n}\n</script>\n<script id=\"fx_brightbuf_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    gl_FragColor = vec4(col.rgb * 2.0 - vec3(0.5), 1.0);\n}\n</script>\n<script id=\"fx_dirblur_r4_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\nuniform vec4 uBlurDir; //dir(x, y), stride(z, w)\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    vec4 col = texture2D(uSrc, texCoord);\n    col = col + texture2D(uSrc, texCoord + uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord - uBlurDir.xy * uDelta);\n    col = col + texture2D(uSrc, texCoord + (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    col = col + texture2D(uSrc, texCoord - (uBlurDir.xy + uBlurDir.zw) * uDelta);\n    gl_FragColor = col / 5.0;\n}\n</script>\n<!-- effect fragment shader template -->\n<script id=\"fx_common_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform vec2 uDelta;\n\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\n\nvoid main(void) {\n    gl_FragColor = texture2D(uSrc, texCoord);\n}\n</script>\n<!-- post processing -->\n<script id=\"pp_final_vsh\" type=\"x-shader/x_vertex\">\nuniform vec3 uResolution;\nattribute vec2 aPosition;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n    texCoord = aPosition.xy * 0.5 + vec2(0.5, 0.5);\n    screenCoord = aPosition.xy * vec2(uResolution.z, 1.0);\n}\n</script>\n<script id=\"pp_final_fsh\" type=\"x-shader/x_fragment\">\n#ifdef GL_ES\n//precision mediump float;\nprecision highp float;\n#endif\nuniform sampler2D uSrc;\nuniform sampler2D uBloom;\nuniform vec2 uDelta;\nvarying vec2 texCoord;\nvarying vec2 screenCoord;\nvoid main(void) {\n    vec4 srccol = texture2D(uSrc, texCoord) * 2.0;\n    vec4 bloomcol = texture2D(uBloom, texCoord);\n    vec4 col;\n    col = srccol + bloomcol * (vec4(1.0) + srccol);\n    col *= smoothstep(1.0, 0.0, pow(length((texCoord - vec2(0.5)) * 2.0), 1.2) * 0.5);\n    col = pow(col, vec4(0.45454545454545)); //(1.0 / 2.2)\n\n    gl_FragColor = vec4(col.rgb, 1.0);\n    gl_FragColor.a = 1.0;\n}\n</script>\n</body>\n<script>\n// Utilities\nvar Vector3 = {};\nvar Matrix44 = {};\nVector3.create = function(x, y, z) {\n    return {'x':x, 'y':y, 'z':z};\n};\nVector3.dot = function (v0, v1) {\n    return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z;\n};\nVector3.cross = function (v, v0, v1) {\n    v.x = v0.y * v1.z - v0.z * v1.y;\n    v.y = v0.z * v1.x - v0.x * v1.z;\n    v.z = v0.x * v1.y - v0.y * v1.x;\n};\nVector3.normalize = function (v) {\n    var l = v.x * v.x + v.y * v.y + v.z * v.z;\n    if(l > 0.00001) {\n        l = 1.0 / Math.sqrt(l);\n        v.x *= l;\n        v.y *= l;\n        v.z *= l;\n    }\n};\nVector3.arrayForm = function(v) {\n    if(v.array) {\n        v.array[0] = v.x;\n        v.array[1] = v.y;\n        v.array[2] = v.z;\n    }\n    else {\n        v.array = new Float32Array([v.x, v.y, v.z]);\n    }\n    return v.array;\n};\nMatrix44.createIdentity = function () {\n    return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);\n};\nMatrix44.loadProjection = function (m, aspect, vdeg, near, far) {\n    var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0;\n    var w = h * aspect;\n\n    m[0] = 2.0 * near / w;\n    m[1] = 0.0;\n    m[2] = 0.0;\n    m[3] = 0.0;\n\n    m[4] = 0.0;\n    m[5] = 2.0 * near / h;\n    m[6] = 0.0;\n    m[7] = 0.0;\n\n    m[8] = 0.0;\n    m[9] = 0.0;\n    m[10] = -(far + near) / (far - near);\n    m[11] = -1.0;\n\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = -2.0 * far * near / (far - near);\n    m[15] = 0.0;\n};\nMatrix44.loadLookAt = function (m, vpos, vlook, vup) {\n    var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z);\n    Vector3.normalize(frontv);\n    var sidev = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(sidev, vup, frontv);\n    Vector3.normalize(sidev);\n    var topv = Vector3.create(1.0, 0.0, 0.0);\n    Vector3.cross(topv, frontv, sidev);\n    Vector3.normalize(topv);\n\n    m[0] = sidev.x;\n    m[1] = topv.x;\n    m[2] = frontv.x;\n    m[3] = 0.0;\n\n    m[4] = sidev.y;\n    m[5] = topv.y;\n    m[6] = frontv.y;\n    m[7] = 0.0;\n\n    m[8] = sidev.z;\n    m[9] = topv.z;\n    m[10] = frontv.z;\n    m[11] = 0.0;\n\n    m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]);\n    m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]);\n    m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]);\n    m[15] = 1.0;\n};\n\n//\nvar timeInfo = {\n    'start':0, 'prev':0, // Date\n    'delta':0, 'elapsed':0 // Number(sec)\n};\n\n//\nvar gl;\nvar renderSpec = {\n    'width':0,\n    'height':0,\n    'aspect':1,\n    'array':new Float32Array(3),\n    'halfWidth':0,\n    'halfHeight':0,\n    'halfArray':new Float32Array(3)\n    // and some render targets. see setViewport()\n};\nrenderSpec.setSize = function(w, h) {\n    renderSpec.width = w;\n    renderSpec.height = h;\n    renderSpec.aspect = renderSpec.width / renderSpec.height;\n    renderSpec.array[0] = renderSpec.width;\n    renderSpec.array[1] = renderSpec.height;\n    renderSpec.array[2] = renderSpec.aspect;\n\n    renderSpec.halfWidth = Math.floor(w / 2);\n    renderSpec.halfHeight = Math.floor(h / 2);\n    renderSpec.halfArray[0] = renderSpec.halfWidth;\n    renderSpec.halfArray[1] = renderSpec.halfHeight;\n    renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight;\n};\n\nfunction deleteRenderTarget(rt) {\n    gl.deleteFramebuffer(rt.frameBuffer);\n    gl.deleteRenderbuffer(rt.renderBuffer);\n    gl.deleteTexture(rt.texture);\n}\n\nfunction createRenderTarget(w, h) {\n    var ret = {\n        'width':w,\n        'height':h,\n        'sizeArray':new Float32Array([w, h, w / h]),\n        'dtxArray':new Float32Array([1.0 / w, 1.0 / h])\n    };\n    ret.frameBuffer = gl.createFramebuffer();\n    ret.renderBuffer = gl.createRenderbuffer();\n    ret.texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, ret.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0);\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    return ret;\n}\n\nfunction compileShader(shtype, shsrc) {\n\tvar retsh = gl.createShader(shtype);\n\n\tgl.shaderSource(retsh, shsrc);\n\tgl.compileShader(retsh);\n\n\tif(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) {\n\t\tvar errlog = gl.getShaderInfoLog(retsh);\n\t\tgl.deleteShader(retsh);\n\t\tconsole.error(errlog);\n\t\treturn null;\n\t}\n\treturn retsh;\n}\n\nfunction createShader(vtxsrc, frgsrc, uniformlist, attrlist) {\n    var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc);\n    var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc);\n\n    if(vsh == null || fsh == null) {\n        return null;\n    }\n\n    var prog = gl.createProgram();\n    gl.attachShader(prog, vsh);\n    gl.attachShader(prog, fsh);\n\n    gl.deleteShader(vsh);\n    gl.deleteShader(fsh);\n\n    gl.linkProgram(prog);\n    if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) {\n        var errlog = gl.getProgramInfoLog(prog);\n        console.error(errlog);\n        return null;\n    }\n\n    if(uniformlist) {\n        prog.uniforms = {};\n        for(var i = 0; i < uniformlist.length; i++) {\n            prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]);\n        }\n    }\n\n    if(attrlist) {\n        prog.attributes = {};\n        for(var i = 0; i < attrlist.length; i++) {\n            var attr = attrlist[i];\n            prog.attributes[attr] = gl.getAttribLocation(prog, attr);\n        }\n    }\n\n    return prog;\n}\n\nfunction useShader(prog) {\n    gl.useProgram(prog);\n    for(var attr in prog.attributes) {\n        gl.enableVertexAttribArray(prog.attributes[attr]);;\n    }\n}\n\nfunction unuseShader(prog) {\n    for(var attr in prog.attributes) {\n        gl.disableVertexAttribArray(prog.attributes[attr]);;\n    }\n    gl.useProgram(null);\n}\n\n/////\nvar projection = {\n    'angle':60,\n    'nearfar':new Float32Array([0.1, 100.0]),\n    'matrix':Matrix44.createIdentity()\n};\nvar camera = {\n    'position':Vector3.create(0, 0, 100),\n    'lookat':Vector3.create(0, 0, 0),\n    'up':Vector3.create(0, 1, 0),\n    'dof':Vector3.create(10.0, 4.0, 8.0),\n    'matrix':Matrix44.createIdentity()\n};\n\nvar pointFlower = {};\nvar meshFlower = {};\nvar sceneStandBy = false;\n\nvar BlossomParticle = function () {\n    this.velocity = new Array(3);\n    this.rotation = new Array(3);\n    this.position = new Array(3);\n    this.euler = new Array(3);\n    this.size = 1.0;\n    this.alpha = 1.0;\n    this.zkey = 0.0;\n};\n\nBlossomParticle.prototype.setVelocity = function (vx, vy, vz) {\n    this.velocity[0] = vx;\n    this.velocity[1] = vy;\n    this.velocity[2] = vz;\n};\n\nBlossomParticle.prototype.setRotation = function (rx, ry, rz) {\n    this.rotation[0] = rx;\n    this.rotation[1] = ry;\n    this.rotation[2] = rz;\n};\n\nBlossomParticle.prototype.setPosition = function (nx, ny, nz) {\n    this.position[0] = nx;\n    this.position[1] = ny;\n    this.position[2] = nz;\n};\n\nBlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) {\n    this.euler[0] = rx;\n    this.euler[1] = ry;\n    this.euler[2] = rz;\n};\n\nBlossomParticle.prototype.setSize = function (s) {\n    this.size = s;\n};\n\nBlossomParticle.prototype.update = function (dt, et) {\n    this.position[0] += this.velocity[0] * dt;\n    this.position[1] += this.velocity[1] * dt;\n    this.position[2] += this.velocity[2] * dt;\n\n    this.euler[0] += this.rotation[0] * dt;\n    this.euler[1] += this.rotation[1] * dt;\n    this.euler[2] += this.rotation[2] * dt;\n};\n\nfunction createPointFlowers() {\n    // get point sizes\n    var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);\n    renderSpec.pointSize = {'min':prm[0], 'max':prm[1]};\n\n    var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent;\n    var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent;\n\n    pointFlower.program = createShader(\n        vtxsrc, frgsrc,\n        ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'],\n        ['aPosition', 'aEuler', 'aMisc']\n    );\n\n    useShader(pointFlower.program);\n    pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]);\n    pointFlower.fader = Vector3.create(0.0, 10.0, 0.0);\n\n    // paramerters: velocity[3], rotate[3]\n    pointFlower.numFlowers = 1600;\n    pointFlower.particles = new Array(pointFlower.numFlowers);\n    // vertex attributes {position[3], euler_xyz[3], size[1]}\n    pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2));\n    pointFlower.positionArrayOffset = 0;\n    pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3;\n    pointFlower.miscArrayOffset = pointFlower.numFlowers * 6;\n\n    pointFlower.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    unuseShader(pointFlower.program);\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        pointFlower.particles[i] = new BlossomParticle();\n    }\n}\n\nfunction initPointFlowers() {\n    //area\n    pointFlower.area = Vector3.create(20.0, 20.0, 20.0);\n    pointFlower.area.x = pointFlower.area.y * renderSpec.aspect;\n\n    pointFlower.fader.x = 10.0; //env fade start\n    pointFlower.fader.y = pointFlower.area.z; //env fade half\n    pointFlower.fader.z = 0.1;  //near fade start\n\n    //particles\n    var PI2 = Math.PI * 2.0;\n    var tmpv3 = Vector3.create(0, 0, 0);\n    var tmpv = 0;\n    var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);};\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var tmpprtcl = pointFlower.particles[i];\n\n        //velocity\n        tmpv3.x = symmetryrand() * 0.3 + 0.8;\n        tmpv3.y = symmetryrand() * 0.2 - 1.0;\n        tmpv3.z = symmetryrand() * 0.3 + 0.5;\n        Vector3.normalize(tmpv3);\n        tmpv = 2.0 + Math.random() * 1.0;\n        tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv);\n\n        //rotation\n        tmpprtcl.setRotation(\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5,\n            symmetryrand() * PI2 * 0.5\n        );\n\n        //position\n        tmpprtcl.setPosition(\n            symmetryrand() * pointFlower.area.x,\n            symmetryrand() * pointFlower.area.y,\n            symmetryrand() * pointFlower.area.z\n        );\n\n        //euler\n        tmpprtcl.setEulerAngles(\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0,\n            Math.random() * Math.PI * 2.0\n        );\n\n        //size\n        tmpprtcl.setSize(0.9 + Math.random() * 0.1);\n    }\n}\n\nfunction renderPointFlowers() {\n    //update\n    var PI2 = Math.PI * 2.0;\n    var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z];\n    var repeatPos = function (prt, cmp, limit) {\n        if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) {\n            //out of area\n            if(prt.position[cmp] > 0) {\n                prt.position[cmp] -= limit * 2.0;\n            }\n            else {\n                prt.position[cmp] += limit * 2.0;\n            }\n        }\n    };\n    var repeatEuler = function (prt, cmp) {\n        prt.euler[cmp] = prt.euler[cmp] % PI2;\n        if(prt.euler[cmp] < 0.0) {\n            prt.euler[cmp] += PI2;\n        }\n    };\n\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        prtcl.update(timeInfo.delta, timeInfo.elapsed);\n        repeatPos(prtcl, 0, pointFlower.area.x);\n        repeatPos(prtcl, 1, pointFlower.area.y);\n        repeatPos(prtcl, 2, pointFlower.area.z);\n        repeatEuler(prtcl, 0);\n        repeatEuler(prtcl, 1);\n        repeatEuler(prtcl, 2);\n\n        prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5;\n\n        prtcl.zkey = (camera.matrix[2] * prtcl.position[0]\n                    + camera.matrix[6] * prtcl.position[1]\n                    + camera.matrix[10] * prtcl.position[2]\n                    + camera.matrix[14]);\n    }\n\n    // sort\n    pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;});\n\n    // update data\n    var ipos = pointFlower.positionArrayOffset;\n    var ieuler = pointFlower.eulerArrayOffset;\n    var imisc = pointFlower.miscArrayOffset;\n    for(var i = 0; i < pointFlower.numFlowers; i++) {\n        var prtcl = pointFlower.particles[i];\n        pointFlower.dataArray[ipos] = prtcl.position[0];\n        pointFlower.dataArray[ipos + 1] = prtcl.position[1];\n        pointFlower.dataArray[ipos + 2] = prtcl.position[2];\n        ipos += 3;\n        pointFlower.dataArray[ieuler] = prtcl.euler[0];\n        pointFlower.dataArray[ieuler + 1] = prtcl.euler[1];\n        pointFlower.dataArray[ieuler + 2] = prtcl.euler[2];\n        ieuler += 3;\n        pointFlower.dataArray[imisc] = prtcl.size;\n        pointFlower.dataArray[imisc + 1] = prtcl.alpha;\n        imisc += 2;\n    }\n\n    //draw\n    gl.enable(gl.BLEND);\n    //gl.disable(gl.DEPTH_TEST);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    var prog = pointFlower.program;\n    useShader(prog);\n\n    gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix);\n    gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n    gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof));\n    gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader));\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW);\n\n    gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n    gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT);\n\n    // doubler\n    for(var i = 1; i < 2; i++) {\n        var zpos = i * -2.0;\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x * -1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y * -1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n        pointFlower.offset[0] = pointFlower.area.x *  1.0;\n        pointFlower.offset[1] = pointFlower.area.y *  1.0;\n        pointFlower.offset[2] = pointFlower.area.z * zpos;\n        gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n        gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n    }\n\n    //main\n    pointFlower.offset[0] = 0.0;\n    pointFlower.offset[1] = 0.0;\n    pointFlower.offset[2] = 0.0;\n    gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset);\n    gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(prog);\n\n    gl.enable(gl.DEPTH_TEST);\n    gl.disable(gl.BLEND);\n}\n\n// effects\n//common util\nfunction createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) {\n    var ret = {};\n    var unifs = ['uResolution', 'uSrc', 'uDelta'];\n    if(exunifs) {\n        unifs = unifs.concat(exunifs);\n    }\n    var attrs = ['aPosition'];\n    if(exattrs) {\n        attrs = attrs.concat(exattrs);\n    }\n\n    ret.program = createShader(vtxsrc, frgsrc, unifs, attrs);\n    useShader(ret.program);\n\n    ret.dataArray = new Float32Array([\n        -1.0, -1.0,\n         1.0, -1.0,\n        -1.0,  1.0,\n         1.0,  1.0\n    ]);\n    ret.buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    unuseShader(ret.program);\n\n    return ret;\n}\n\n// basic usage\n// useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize\n// gl.uniform**(...); //additional uniforms\n// drawEffect()\n// unuseEffect(prog)\n// TEXTURE0 makes src\nfunction useEffect(fxobj, srctex) {\n    var prog = fxobj.program;\n    useShader(prog);\n    gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array);\n\n    if(srctex != null) {\n        gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray);\n        gl.uniform1i(prog.uniforms.uSrc, 0);\n\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, srctex.texture);\n    }\n}\nfunction drawEffect(fxobj) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer);\n    gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n}\nfunction unuseEffect(fxobj) {\n    unuseShader(fxobj.program);\n}\n\nvar effectLib = {};\nfunction createEffectLib() {\n\n    var vtxsrc, frgsrc;\n    //common\n    var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent;\n\n    //background\n    frgsrc = document.getElementById(\"bg_fsh\").textContent;\n    effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null);\n\n    // make brightpixels buffer\n    frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent;\n    effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null);\n\n    // direction blur\n    frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent;\n    effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null);\n\n    //final composite\n    vtxsrc = document.getElementById(\"pp_final_vsh\").textContent;\n    frgsrc = document.getElementById(\"pp_final_fsh\").textContent;\n    effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null);\n}\n\n// background\nfunction createBackground() {\n    //console.log(\"create background\");\n}\nfunction initBackground() {\n    //console.log(\"init background\");\n}\nfunction renderBackground() {\n    gl.disable(gl.DEPTH_TEST);\n\n    useEffect(effectLib.sceneBg, null);\n    gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta);\n    drawEffect(effectLib.sceneBg);\n    unuseEffect(effectLib.sceneBg);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n// post process\nvar postProcess = {};\nfunction createPostProcess() {\n    //console.log(\"create post process\");\n}\nfunction initPostProcess() {\n    //console.log(\"init post process\");\n}\n\nfunction renderPostProcess() {\n    gl.enable(gl.TEXTURE_2D);\n    gl.disable(gl.DEPTH_TEST);\n    var bindRT = function (rt, isclear) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer);\n        gl.viewport(0, 0, rt.width, rt.height);\n        if(isclear) {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n    };\n\n    //make bright buff\n    bindRT(renderSpec.wHalfRT0, true);\n    useEffect(effectLib.mkBrightBuf, renderSpec.mainRT);\n    drawEffect(effectLib.mkBrightBuf);\n    unuseEffect(effectLib.mkBrightBuf);\n\n    // make bloom\n    for(var i = 0; i < 2; i++) {\n        var p = 1.5 + 1 * i;\n        var s = 2.0 + 1 * i;\n        bindRT(renderSpec.wHalfRT1, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT0);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n\n        bindRT(renderSpec.wHalfRT0, true);\n        useEffect(effectLib.dirBlur, renderSpec.wHalfRT1);\n        gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s);\n        drawEffect(effectLib.dirBlur);\n        unuseEffect(effectLib.dirBlur);\n    }\n\n    //display\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    useEffect(effectLib.finalComp, renderSpec.mainRT);\n    gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1);\n    gl.activeTexture(gl.TEXTURE1);\n    gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture);\n    drawEffect(effectLib.finalComp);\n    unuseEffect(effectLib.finalComp);\n\n    gl.enable(gl.DEPTH_TEST);\n}\n\n/////\nvar SceneEnv = {};\nfunction createScene() {\n    createEffectLib();\n    createBackground();\n    createPointFlowers();\n    createPostProcess();\n    sceneStandBy = true;\n}\n\nfunction initScene() {\n    initBackground();\n    initPointFlowers();\n    initPostProcess();\n\n    //camera.position.z = 17.320508;\n    camera.position.z = pointFlower.area.z + projection.nearfar[0];\n    projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0;\n    Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]);\n}\n\nfunction renderScene() {\n    //draw\n    Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up);\n\n    gl.enable(gl.DEPTH_TEST);\n\n    //gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer);\n    gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height);\n    gl.clearColor(0.005, 0, 0.05, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    renderBackground();\n    renderPointFlowers();\n    renderPostProcess();\n}\n\n/////\nfunction onResize(e) {\n    makeCanvasFullScreen(document.getElementById(\"sakura\"));\n    setViewports();\n    if(sceneStandBy) {\n        initScene();\n    }\n}\n\nfunction setViewports() {\n    renderSpec.setSize(gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0.2, 0.2, 0.5, 1.0);\n    gl.viewport(0, 0, renderSpec.width, renderSpec.height);\n\n    var rtfunc = function (rtname, rtw, rth) {\n        var rt = renderSpec[rtname];\n        if(rt) deleteRenderTarget(rt);\n        renderSpec[rtname] = createRenderTarget(rtw, rth);\n    };\n    rtfunc('mainRT', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT0', renderSpec.width, renderSpec.height);\n    rtfunc('wFullRT1', renderSpec.width, renderSpec.height);\n    rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight);\n    rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight);\n}\n\nfunction render() {\n    renderScene();\n}\n\nvar animating = true;\nfunction toggleAnimation(elm) {\n    animating ^= true;\n    if(animating) animate();\n    if(elm) {\n        elm.innerHTML = animating? \"Stop\":\"Start\";\n    }\n}\n\nfunction stepAnimation() {\n    if(!animating) animate();\n}\n\nfunction animate() {\n    var curdate = new Date();\n    timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0;\n    timeInfo.delta = (curdate - timeInfo.prev) / 1000.0;\n    timeInfo.prev = curdate;\n\n    if(animating) requestAnimationFrame(animate);\n    render();\n}\n\nfunction makeCanvasFullScreen(canvas) {\n    var b = document.body;\n\tvar d = document.documentElement;\n\tfullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth);\n\tfullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight);\n\tcanvas.width = fullw;\n\tcanvas.height = fullh;\n}\n\nwindow.addEventListener('load', function(e) {\n    var canvas = document.getElementById(\"sakura\");\n    try {\n        makeCanvasFullScreen(canvas);\n        gl = canvas.getContext('experimental-webgl');\n    } catch(e) {\n        alert(\"WebGL not supported.\" + e);\n        console.error(e);\n        return;\n    }\n\n    window.addEventListener('resize', onResize);\n\n    setViewports();\n    createScene();\n    initScene();\n\n    timeInfo.start = new Date();\n    timeInfo.prev = timeInfo.start;\n    animate();\n});\n\n//set window.requestAnimationFrame\n(function (w, r) {\n    w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); };\n})(window, 'equestAnimationFrame');\n</script>\n</html>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciweliqfw0001n0c5weqhjkzf","tag_id":"ciweliqg70004n0c5y5b6smzv","_id":"ciweliqgh0009n0c5a4mu8baf"},{"post_id":"ciweliqg40003n0c5gc7qwq6b","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqgv000kn0c522693yyz"},{"post_id":"ciweliqg40003n0c5gc7qwq6b","tag_id":"ciweliqgk000cn0c5cr75osqf","_id":"ciweliqgy000mn0c5xzunwvx4"},{"post_id":"ciweliqg40003n0c5gc7qwq6b","tag_id":"ciweliqgn000fn0c5xkvw6gdm","_id":"ciweliqh0000pn0c5mzhgm3qu"},{"post_id":"ciweliqga0005n0c54mion7wy","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqh80010n0c58qlz73jy"},{"post_id":"ciweliqga0005n0c54mion7wy","tag_id":"ciweliqgy000nn0c5xa960kt8","_id":"ciweliqh80011n0c5tz83ri6m"},{"post_id":"ciweliqga0005n0c54mion7wy","tag_id":"ciweliqh2000sn0c51ly3cz9g","_id":"ciweliqh90013n0c5ixqvlgkr"},{"post_id":"ciweliqga0005n0c54mion7wy","tag_id":"ciweliqgn000fn0c5xkvw6gdm","_id":"ciweliqh90014n0c5646w94wk"},{"post_id":"ciweliqgb0006n0c5flc21wpw","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqhd0018n0c5zc9vn4xf"},{"post_id":"ciweliqgb0006n0c5flc21wpw","tag_id":"ciweliqh90012n0c5qu3iq7p2","_id":"ciweliqhd0019n0c52f0rl3ww"},{"post_id":"ciweliqgb0006n0c5flc21wpw","tag_id":"ciweliqh90015n0c5l6dedffg","_id":"ciweliqhe001bn0c5yjon0zg5"},{"post_id":"ciweliqgb0006n0c5flc21wpw","tag_id":"ciweliqh90016n0c5x1x6sxwa","_id":"ciweliqhe001cn0c5s8dk30cw"},{"post_id":"ciweliqgd0007n0c5ehw8vh12","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqhf001fn0c5cyutpsbo"},{"post_id":"ciweliqgd0007n0c5ehw8vh12","tag_id":"ciweliqh90012n0c5qu3iq7p2","_id":"ciweliqhg001gn0c5b7ufdj2z"},{"post_id":"ciweliqgd0007n0c5ehw8vh12","tag_id":"ciweliqh90015n0c5l6dedffg","_id":"ciweliqhg001in0c5u5nr6sow"},{"post_id":"ciweliqgh000an0c5qqt9nzg3","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqhg001kn0c5l9ne0sau"},{"post_id":"ciweliqgh000an0c5qqt9nzg3","tag_id":"ciweliqhf001en0c5q295rmpw","_id":"ciweliqhh001ln0c5ewa2ydah"},{"post_id":"ciweliqgh000an0c5qqt9nzg3","tag_id":"ciweliqhg001hn0c5k6up0qjb","_id":"ciweliqhh001nn0c56qres70g"},{"post_id":"ciweliqgj000bn0c5xy7jnwco","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqhj001qn0c5f3uk3863"},{"post_id":"ciweliqgj000bn0c5xy7jnwco","tag_id":"ciweliqhg001jn0c57c5jmfqa","_id":"ciweliqhj001rn0c5zslew7j8"},{"post_id":"ciweliqgj000bn0c5xy7jnwco","tag_id":"ciweliqhh001mn0c59z0atl6m","_id":"ciweliqhk001tn0c5oj8ttnof"},{"post_id":"ciweliqgj000bn0c5xy7jnwco","tag_id":"ciweliqh90016n0c5x1x6sxwa","_id":"ciweliqhl001un0c58kfv3oh1"},{"post_id":"ciweliqgk000dn0c58wciv9h8","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqhn001yn0c5xxvi0cdx"},{"post_id":"ciweliqgk000dn0c58wciv9h8","tag_id":"ciweliqhg001jn0c57c5jmfqa","_id":"ciweliqhp001zn0c5t1uj00yz"},{"post_id":"ciweliqgk000dn0c58wciv9h8","tag_id":"ciweliqhh001mn0c59z0atl6m","_id":"ciweliqhp0021n0c5s8ed804j"},{"post_id":"ciweliqgk000dn0c58wciv9h8","tag_id":"ciweliqh90016n0c5x1x6sxwa","_id":"ciweliqhp0022n0c5kedakrrw"},{"post_id":"ciweliqgk000dn0c58wciv9h8","tag_id":"ciweliqhl001wn0c535iikzmj","_id":"ciweliqhp0024n0c58kk1i5j0"},{"post_id":"ciweliqgl000en0c5vg17x7yi","tag_id":"ciweliqhm001xn0c555facuyh","_id":"ciweliqhr0026n0c5xxyqv9s4"},{"post_id":"ciweliqgl000en0c5vg17x7yi","tag_id":"ciweliqhp0020n0c5lho4zfvt","_id":"ciweliqhr0027n0c5eemn4oo3"},{"post_id":"ciweliqgl000en0c5vg17x7yi","tag_id":"ciweliqhp0023n0c5qpvn4qec","_id":"ciweliqhr0029n0c5f5t3qcrq"},{"post_id":"ciweliqgo000gn0c5yzuu7k40","tag_id":"ciweliqhq0025n0c5ju6epl2k","_id":"ciweliqhr002an0c51cyzjblx"},{"post_id":"ciweliqgr000hn0c5wyvkh9ao","tag_id":"ciweliqhq0025n0c5ju6epl2k","_id":"ciweliqht002en0c599ai7wp8"},{"post_id":"ciweliqgr000hn0c5wyvkh9ao","tag_id":"ciweliqhs002bn0c5l1lole2m","_id":"ciweliqht002fn0c5vlctij3q"},{"post_id":"ciweliqgr000hn0c5wyvkh9ao","tag_id":"ciweliqhs002cn0c5f1qjxadh","_id":"ciweliqht002hn0c5go4lftjl"},{"post_id":"ciweliqgt000jn0c5cp1cx4dh","tag_id":"ciweliqgg0008n0c5fkx0hv05","_id":"ciweliqhv002kn0c5s5gc4bov"},{"post_id":"ciweliqgt000jn0c5cp1cx4dh","tag_id":"ciweliqhg001jn0c57c5jmfqa","_id":"ciweliqhv002ln0c5waep5om3"},{"post_id":"ciweliqgt000jn0c5cp1cx4dh","tag_id":"ciweliqhh001mn0c59z0atl6m","_id":"ciweliqhv002nn0c5nf6o9mqh"},{"post_id":"ciweliqgt000jn0c5cp1cx4dh","tag_id":"ciweliqh90016n0c5x1x6sxwa","_id":"ciweliqhv002on0c5klsn87qp"},{"post_id":"ciweliqgv000ln0c5ueuzsygd","tag_id":"ciweliqh90016n0c5x1x6sxwa","_id":"ciweliqhw002qn0c5up5wvq2w"},{"post_id":"ciweliqgv000ln0c5ueuzsygd","tag_id":"ciweliqgy000nn0c5xa960kt8","_id":"ciweliqhx002rn0c53522fuf7"},{"post_id":"ciweliqgz000on0c5on0vr6lt","tag_id":"ciweliqhm001xn0c555facuyh","_id":"ciweliqhy002un0c5v4i2ye27"},{"post_id":"ciweliqgz000on0c5on0vr6lt","tag_id":"ciweliqhp0020n0c5lho4zfvt","_id":"ciweliqhy002vn0c53b3jt1zt"},{"post_id":"ciweliqh0000qn0c5r6lmgm92","tag_id":"ciweliqh90016n0c5x1x6sxwa","_id":"ciweliqhy002xn0c5el8etmmw"},{"post_id":"ciweliqh0000qn0c5r6lmgm92","tag_id":"ciweliqgy000nn0c5xa960kt8","_id":"ciweliqhz002yn0c5vxyhtt2x"},{"post_id":"ciweliqh1000rn0c57rrmd9zr","tag_id":"ciweliqh90016n0c5x1x6sxwa","_id":"ciweliqi00032n0c5x7cjuf5o"},{"post_id":"ciweliqh1000rn0c57rrmd9zr","tag_id":"ciweliqhm001xn0c555facuyh","_id":"ciweliqi00033n0c5kmr06vbm"},{"post_id":"ciweliqh1000rn0c57rrmd9zr","tag_id":"ciweliqhz0030n0c55u8ar1tc","_id":"ciweliqi00035n0c5x9skcelc"},{"post_id":"ciweliqh2000tn0c5yjdzj8li","tag_id":"ciweliqi00031n0c5djafmar7","_id":"ciweliqi10037n0c5kntbjyo1"},{"post_id":"ciweliqh2000tn0c5yjdzj8li","tag_id":"ciweliqhm001xn0c555facuyh","_id":"ciweliqi10038n0c5i2espmyv"},{"post_id":"ciweliqh4000un0c5l28vqsho","tag_id":"ciweliqi10036n0c5uy51jt29","_id":"ciweliqi2003bn0c55a1od3mo"},{"post_id":"ciweliqh4000un0c5l28vqsho","tag_id":"ciweliqhm001xn0c555facuyh","_id":"ciweliqi2003cn0c5teynyfos"},{"post_id":"ciweliqh6000xn0c5yj747xjh","tag_id":"ciweliqi1003an0c5qy47501z","_id":"ciweliqi3003fn0c5uf87grd8"},{"post_id":"ciweliqh6000xn0c5yj747xjh","tag_id":"ciweliqhm001xn0c555facuyh","_id":"ciweliqi3003gn0c5cfinr7hq"},{"post_id":"ciweliqh7000zn0c5kc5k610r","tag_id":"ciweliqi3003en0c5p45gxhbh","_id":"ciweliqi3003hn0c5tdswsxda"}],"Tag":[{"name":"Editor","_id":"ciweliqg70004n0c5y5b6smzv"},{"name":"前段","_id":"ciweliqgg0008n0c5fkx0hv05"},{"name":"note","_id":"ciweliqgk000cn0c5cr75osqf"},{"name":"npm","_id":"ciweliqgn000fn0c5xkvw6gdm"},{"name":"node","_id":"ciweliqgy000nn0c5xa960kt8"},{"name":"nvm","_id":"ciweliqh2000sn0c51ly3cz9g"},{"name":"博客","_id":"ciweliqh90012n0c5qu3iq7p2"},{"name":"经验","_id":"ciweliqh90015n0c5l6dedffg"},{"name":"webpack","_id":"ciweliqh90016n0c5x1x6sxwa"},{"name":"GIT","_id":"ciweliqhf001en0c5q295rmpw"},{"name":"SSH","_id":"ciweliqhg001hn0c5k6up0qjb"},{"name":"笔记","_id":"ciweliqhg001jn0c57c5jmfqa"},{"name":"框架搭建","_id":"ciweliqhh001mn0c59z0atl6m"},{"name":"html-webpack-plugin","_id":"ciweliqhl001wn0c535iikzmj"},{"name":"Angular","_id":"ciweliqhm001xn0c555facuyh"},{"name":"angular基础","_id":"ciweliqhp0020n0c5lho4zfvt"},{"name":"数据绑定","_id":"ciweliqhp0023n0c5qpvn4qec"},{"name":"Angular Material","_id":"ciweliqhq0025n0c5ju6epl2k"},{"name":"Dynamic Themes","_id":"ciweliqhs002bn0c5l1lole2m"},{"name":"Themes","_id":"ciweliqhs002cn0c5f1qjxadh"},{"name":"ES6","_id":"ciweliqhz0030n0c55u8ar1tc"},{"name":"Bootstrap","_id":"ciweliqi00031n0c5djafmar7"},{"name":"ngController","_id":"ciweliqi10036n0c5uy51jt29"},{"name":"ui-router","_id":"ciweliqi1003an0c5qy47501z"},{"name":"HTML5","_id":"ciweliqi3003en0c5p45gxhbh"}]}}